<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AnalysisServices.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AnalysisServices.DesignXmlReader">
            <summary>
            Summary description for DesignXmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DesignXmlReader.CheckForXmlaException">
            <summary>
            Moves to content the XmlReader and throws XmlSerializationException if the XmlReader is positioned 
            on &lt;Exception xmlns="urn:schemas-microsoft-com:xml-analysis:exception"/&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DesignXmlReader.CreateXmlSerializationException(System.String,System.Exception)">
            <summary>
            Creates an XmlSerializationException from the context of this DesignXmlReader, setting 
            the LineNumber and LinePosition if possible.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DesignXmlReader.ReadXmlNode">
            <summary>
            Creates and returns an XmlNode from the current position of XmlReader. It throws XmlSerializationException if XML/A Exception
            occurs, keeping the XmlReader positioned on the Exception element.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DesignXmlWriter">
            <summary>
            Summary description for DesignerXmlWriter.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DesignXmlSerializerOptions">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.Default">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.IncludeForeignComponent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.DontForceSiteName">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.DontWriteStartDocument">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.IgnoreDesignTimeProperties">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.IgnoreRuntimeProperties">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.DontWriteSiteName">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerOptions.DoNotUseNamespaces">
            <summary>For internal use.</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DesignXmlSerializerConstants">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerConstants.DesignerNamespace">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerConstants.DesignerPrefix">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DesignXmlSerializerConstants.DesignTimeName">
            <summary>For internal use.</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.JaXmlSerializer">
            <summary>
            Just Another Xml Serializer.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,Microsoft.AnalysisServices.DesignXmlSerializerOptions)">
            <summary>For internal use.</summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.JaXmlSerializer.SerializationManager">
            <summary>For internal use.</summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.JaXmlSerializer.UserSerializationOptions">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.#ctor">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.#ctor(Microsoft.AnalysisServices.DesignXmlSerializerOptions)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.#ctor(System.Xml.Serialization.XmlAttributeOverrides,Microsoft.AnalysisServices.DesignXmlSerializerOptions)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.DeserializeComponent(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlReader,System.Type)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JaXmlSerializer.SerializeComponent(System.Xml.XmlWriter,System.Type,System.ComponentModel.IComponent)">
            <summary>For internal use.</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.PropertyOrderAttribute">
            <summary>
            PropertyOrderAttribute specifies the order of properties in serialization.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes the PropertyOrderAttribute object.
            </summary>
            <param name="order">The order for the property serialization.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.PropertyOrderAttribute.Order">
            <summary>
            Gets the serialization order for the associated property.
            </summary>
            <value>The serialization order.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlIgnoreOnReadAttribute">
            <summary>
            Overrides the default serialization of an XML object, used when the object exists for internal operations.
            </summary>
            <remarks>
            This attribute is set on properties that has to be accepted but ignored during deserialization from XMLA.
            DimensionAttribute.ColumnUsage is an example of deprecated property.
            It was added for UDM 1200 models. As UDM 1200 is deprecated, some properties are removed from AMO public surface.
            But AMO still has to handle the case when client is connecting to existing UDM 1200 model that was created using some Excel 2016 CTP1.
            So AMO must not throw an exception when it sees ColumnUsage element, but ignore the value of ColumnUsage and not serialize it back into XMLA.
            </remarks>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlSerializationException">
            <summary>
            Represents an exception occured during serialization or deserialization. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlSerializationException.#ctor">
            <summary>
            Initializes a new instance of XmlSerializationException class using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XmlSerializationException class using the specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XmlSerializationException class using the specified message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlSerializationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the XmlSerializationException class using the specified message and inner exception, as well as error position.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="lineNumber">The line number in XML where the error occured.</param>
            <param name="linePosition">The line position number in XML where the error occured.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate the data.</param>
            <param name="context">The context for this serialization.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlSerializationException.LineNumber">
            <summary>
            Specifies the line number in XML where the error occured.
            </summary>
            <value>An Integer value with the line number where the exception occurred.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlSerializationException.LinePosition">
            <summary>
            Specifies the line position in XML where the error occured.
            </summary>
            <value>An Integer value with the line position where the exception occurred.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.TypeMapper">
            <summary>
            Summary description for TypeMappings.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TypeMapper.GetCustomAttributes``1(System.Type,System.Collections.Generic.Dictionary{System.Type,``0[]})">
            <summary>
            To get type custom attributes from provided type
            </summary>
            <typeparam name="T">Custom attributes class type</typeparam>
            <param name="objectType">Type to get attributes from</param>
            <param name="attributesCache">custom attribute cache</param>
            <returns>custom attribute objects</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TypeMapper.GetPropertyInfoCustomAttributes(System.Reflection.PropertyInfo,System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Object[]})">
            <summary>
            To get type custom attributes from provided property info
            </summary>
            <param name="propertyInfo">Property info to get attributes from</param>
            <param name="attributesCache">custom attribute cache</param>
            <returns>custom attribute objects</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TypeMapper.GetPropertyInfos(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Reflection.PropertyInfo[]},System.Reflection.BindingFlags)">
            <summary>
            To get property info from provided type
            </summary>
            <param name="objectType">Type to get property info from</param>
            <param name="propertyInfoCache">property info cache</param>
            <param name="bindingFlag">binding flag</param>
            <returns>property info objects</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TypeMapper.GetFieldInfos(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Reflection.FieldInfo[]})">
            <summary>
            To get field info from provided type
            </summary>
            <param name="objectType">Type to get field info from</param>
            <param name="fieldInfoCache">field info cache</param>
            <returns>field info objects</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ConnectionStyle">
            <summary>
              Indicates the method that AS client libraries should use to connect
              to a workbook model.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ConnectionStyle.Direct">
            <summary>
              Client libraries should connect directly to the database.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ConnectionStyle.ProxyStream">
            <summary>
              Client libraries should communicate with the database through a proxy
              Stream that is redirected through the AS SharePoint addin.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile">
            <summary>
              Represents a BISM Connection (.aslx / .bism) file within a SharePoint farm.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.Database">
            <summary>
              Gets the database associated with the .bism file.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.Description">
            <summary>
              Gets the description associated with the .bism file.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.IsDelegationAllowed">
            <summary>
              Gets the flag from the .bism file indicating if delegation
              of credentials is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.IsInFarm">
            <summary>
              Gets a flag indicating if this is a .bism file located in the
              current SharePoint farm.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.IsFileMalformed">
            <summary>
              Gets a flag indicating if the .bism file is malformed or
              otherwise syntactically invalid.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ILinkFile.Server">
            <summary>
              Gets the server associated with the .bism file.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy">
            <summary>
              Defines dependency-free methods and properties to load workbook models within
              SharePoint and to interact with existing Excel Services sessions.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.IsWorkbookInFarm(System.String)">
            <summary>
              Test whether or not a given workbook is hosted in the local SharePoint
              farm.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path of the workbook.
            </param>
            <returns>
              True if <paramref name="in_bstrWorkbookPath"/> is the absolute path of an Excel
              workbook hosted in the current SharePoint farm; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.IsFarmRunning">
            <summary>
              Test whether or not a given workbook is hosted in the local SharePoint
              farm.
            </summary>
            <returns>
              True if this machine is running SharePoint 2013 or 2016 farm with a configured version of the PowerPivot for SharePoint addin.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.GetLinkFile(System.String)">
            <summary>
              Gets a metadata about a BISM Connection (.aslx) file located in the
              local SharePoint farm.
            </summary>
            <param name="in_bstrLinkFilePath">
              The absolute path of the .aslx file.
            </param>
            <returns>
              A set of metadata about the file and the connection described therein.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookModel(System.String)">
            <summary>
              Open a connection to a specific workbook's model and return metadata that
              can be used to interact with the resulting session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path to the workbook within the SharePoint site.
            </param>
            <returns>
              A set of session metadata that describes the resulting connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookModelForRefresh(System.String)">
            <summary>
              Open an exclusive, writable connection to a specific workbook's model and
              return metadata that can be used to interact with the resulting session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path to the workbook within the SharePoint site.
            </param>
            <returns>
              A set of session metadata that describes the resulting connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookSession(System.String,System.String)">
            <summary>
              Open a new connection to a specific workbook's model within the scope
              of a given Excel Services session, and return metadata that can be used
              to interact with the session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path of the workbook within the SharePoint site.
            </param>
            <param name="in_bstrSessionId">
              The ID of the Excel Services session that holds an existing connection
              to this workbook model.
            </param>
            <returns>
              A set of session metadata that describes the connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.Log(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.Log1(System.Diagnostics.TraceLevel,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">A parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.Log2(System.Diagnostics.TraceLevel,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.Log3(System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
            <param name="bstr_inParam3">The third parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.Log4(System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
            <param name="bstr_inParam3">The third parameter for the trace entry message.</param>
            <param name="bstr_inParam4">The forth parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookModel(System.String,Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy)">
            <summary>
              Open a connection to a specific workbook's model and return metadata that
              can be used to interact with the resulting session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path to the workbook within the SharePoint site.
            </param>
            <param name="in_lifetimePolicy">
              The <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy" /> that governs how (and if) the
              IWorkbookSession should manage the newly-created Excel Services session.
            </param>
            <returns>
              A set of session metadata that describes the resulting connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookModelForRefresh(System.String,Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy)">
            <summary>
              Open an exclusive, writable connection to a specific workbook's model and
              return metadata that can be used to interact with the resulting session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path to the workbook within the SharePoint site.
            </param>
            <param name="in_lifetimePolicy">
              The <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy" /> that governs how (and if) the
              IWorkbookSession should manage the newly-created Excel Services session.
            </param>
            <returns>
              A set of session metadata that describes the resulting connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.OpenWorkbookSession(System.String,System.String,Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy)">
            <summary>
              Open a new connection to a specific workbook's model within the scope
              of a given Excel Services session, and return metadata that can be used
              to interact with the session.
            </summary>
            <param name="in_bstrWorkbookPath">
              The absolute path of the workbook within the SharePoint site.
            </param>
            <param name="in_bstrSessionId">
              The ID of the Excel Services session that holds an existing connection
              to this workbook model.
            </param>
            <param name="in_lifetimePolicy">
              The <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy" /> that governs how (and if) the
              IWorkbookSession should manage the session specified by
              <paramref name="in_bstrSessionId" />.
            </param>
            <returns>
              A set of session metadata that describes the connection.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.IsRunningInFarm(System.Int32)">
            <summary>
            Indicates whether the application is running on a machine which has SharePoint atleast this version of SharePoint installed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.GetWindowsIdentityFromCurrentPrincipal">
            <summary>
            This method is used when the caller needs to construct a WindowsIdentity from the Thread.CurrentPrincipal. 
            This uses SharePoint apis to reconstruct the WindowIdentity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.TraceError(System.String,System.Object[])">
            <summary>
              Write an error to the ULS log.
            </summary>
            <param name="message">
              The parameterized error message.
            </param>
            <param name="args">
              Parameters for the error message.
            </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.TraceVerbose(System.String,System.Object[])">
            <summary>
              Write a verbose message to the ULS log.
            </summary>
            <param name="message">
              The parameterized message.
            </param>
            <param name="args">
              Parameters for the message.
            </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy.TraceWarning(System.String,System.Object[])">
            <summary>
              Write a warning to the ULS log.
            </summary>
            <param name="message">
              The parameterized warning message.
            </param>
            <param name="args">
              Parameters for the error message.
            </param>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession">
            <summary>
              Defines dependency-free methods and properties to interact with a workbook
              model that has been loaded in a SharePoint farm.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.ConnectionStyle">
            <summary>
              Gets a value indicating how client libraries are expected to communicate
              with the Analysis Services database hosting the loaded workbook model.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Database">
            <summary>
              Gets the name of the Analysis Services database containing the loaded
              workbook model.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Server">
            <summary>
              Gets the name of the Analysis Services instance containing the loaded
              workbook model.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.SessionId">
            <summary>
              Gets the Excel Services session identifier for the current workbook
              model connection.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.UserName">
            <summary>
              Gets the user name as per the SharePoint context
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.WorkbookFormatVersion">
            <summary>
              Gets the file format version of the loaded workbook.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.WorkbookPath">
            <summary>
              Gets the absolute path of the workbook within the SharePoint farm.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.BeginActivity">
            <summary>
              Signal that a query or other action is in progress and that
              Excel Services should not time out the session.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.CreateNativeStream">
            <summary>
              Get a native IStream that can be used to communicate with
              the AS instance hosting the current session's model.
            </summary>
            <returns>
              An IStream that acts as a proxy to the hosting AS instance.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.EndActivity">
            <summary>
              Signal that activity has ceased (for the moment) and that
              Excel Services is free to time out the session.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.EndSession">
            <summary>
              Signal that the caller is permanently releasing interest in
              the session and will not resume activity.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Refresh(System.String,System.String)">
            <summary>
              Execute a shallow refresh of the workbook model's data sources using credentials
              that have been cached in a given Secure Store target application.
            </summary>
            <param name="in_bstrTargetApplicationId">
              The ID of the Secure Store target application containing the credentials to be used
              for the refresh operation.
            </param>
            <param name="in_bstrConnectionName">
              The name of the specific connection within the workbook to be refreshed.
            </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.ReportQueryExecution(System.Int32,System.String)">
            <summary>
            Reports a query execution.
            </summary>
            <param name="elapsedTime">The time that the query elapsed.</param>
            <param name="in_bstrQuery">The query.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Log(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Log1(System.Diagnostics.TraceLevel,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">A parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Log2(System.Diagnostics.TraceLevel,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Log3(System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
            <param name="bstr_inParam3">The third parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Log4(System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a trace entry to the log.
            </summary>
            <param name="e_inTraceLevel">The trace entry level.</param>
            <param name="bstr_inMsg">The trace entry message.</param>
            <param name="bstr_inParam1">The first parameter for the trace entry message.</param>
            <param name="bstr_inParam2">The second parameter for the trace entry message.</param>
            <param name="bstr_inParam3">The third parameter for the trace entry message.</param>
            <param name="bstr_inParam4">The forth parameter for the trace entry message.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.EnsureValidSession">
            <summary>
            Ensures that the session is valid.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.CreateManagedStream">
            <summary>
              Get a managed Stream that can be used to communicate with
              the AS instance hosting the current session's model.
            </summary>
            <returns>
              A Stream that acts as a proxy to the hosting AS instance.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.GetWorkbookConnections">
            <summary>
              Get the names of the embedded connections.
            </summary>
            <returns>
              The names of the embedded connections.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.RefreshEmbeddedModel">
            <summary>
              Do a shallow refresh of the embedded model. This is only needed when working against O14 models
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.Save">
            <summary>
              After refresh, save the workbook back into SharePoint.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.TraceError(System.String,System.Object[])">
            <summary>
              Write an error to the ULS log.
            </summary>
            <param name="message">
              The parameterized error message.
            </param>
            <param name="args">
              Parameters for the error message.
            </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.TraceVerbose(System.String,System.Object[])">
            <summary>
              Write a verbose message to the ULS log.
            </summary>
            <param name="message">
              The parameterized message.
            </param>
            <param name="args">
              Parameters for the message.
            </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IWorkbookSession.TraceWarning(System.String,System.Object[])">
            <summary>
              Write a warning to the ULS log.
            </summary>
            <param name="message">
              The parameterized warning message.
            </param>
            <param name="args">
              Parameters for the error message.
            </param>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ASSPClientProxyFactory">
            <summary>
              Provides a factory method for dynamically creating proxy objects
              via reflection.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ASSPClientProxyFactory.ConcreteProxyTypeName13">
            <summary>
              The fully qualified type name of a concrete implementation of
              <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy" /> that is to be instantiated.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.ASSPClientProxyFactory.CreateProxy">
            <summary>
              Uses reflection to create a concrete implementation of the
              <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy" /> interface without enforcing a compile-time or
              run-time dependency.
            </summary>
            <returns>
              A concrete instance of the <see cref="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.IASSPClientProxy" /> interface.
            </returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy">
            <summary>
              Describes the possible actions that the SPClient should use to manage
              the lifetime of an Excel Services session.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy.None">
            <summary>
              Do not actively manage the Excel Services session.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy.CloseSessionOnDispose">
            <summary>
              Close the Excel Services session when the containing object (i.e.
              the IWorkbookSession) is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy.KeepActiveSessionAlive">
            <summary>
              Keep the Excel Services session from being closed (i.e. via periodic
              calls to EnsureWorkbookModel) while the containing object is in use.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.SessionLifetimePolicy.VersionCheckOnSave">
            <summary>
            Capture the file Etag information on open and validate that the file has not changed
            if a Save command is issued
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.WorkbookFileFormat">
            <summary>
              Represents a specific file format of an Excel workbook, generally corresponding
              to a major version number of the Excel product.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.WorkbookFileFormat.Unknown">
            <summary>
              An unknown recognized workbook version.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.WorkbookFileFormat.Excel2010">
            <summary>
              An Excel 2010 (Office 14) workbook.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.WorkbookFileFormat.Excel2013">
            <summary>
              An Excel 2013 (Office 15) workbook.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Internal.SPClient.Interfaces.WorkbookFileFormat.Excel2016">
            <summary>
              An Excel 2016 (Office 16) workbook.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDAuthenticationProvider.Authenticate(System.String,System.String)">
            <summary>
            Authenticated user against MsoID using specified credentials and after that returns access token to SAAS service.
            </summary>
            <returns>MsoID access token for SAAS service if authentication was successful and null if authentication failed.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.NativeMethods.#cctor">
            <summary>
            This static constructor loads the "suitable" native IDCRL dll into the process.
            We are using DllImport to import the native funcitons of IDCRL.
            DllImport locates the dll by using PATH env variable.
            Since we don't want to be dependant on PATH env variable correctness and order,
            we are manually locating and loading IDCRL dll before any native function call. 
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL">
            <summary>
            MsoIDCRL is a internal class that exposes structures, properties and methods necessary to call the Native APIs in msidcrl.dll.     
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportCredUIInfo">
            <summary>
             Describes the user interface for those API calls in which the client runtime library may need to create a user interface
            to interact with the user. (Currently only LogonIdentity.)
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportCredCustomUI">
            <summary>
            Describes customizations to the appearance of the user interface.
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.POINT">
            <summary>
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportIdentityHandle">
            <summary>
            Handle to the Indentity to the authenticated
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportUIAuthContextHandle">
            <summary>
            Handle to the Authentication UI
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportEnumIdentitiesHandle">
            <summary>
            Handle to the List of persistedIdentities obtained based on the Application GUID and the Persisted Cred Type
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CallBackDelegateWithData">
            <summary>
             Callback notification for asynchronous identity activity. This is used for all UI-based authentications, and optionally for
            asynchronous ui-less authentications. This is called whenever the state of the identity is changed and the hosting application
            may want to react to this change. The hosting application can check the state of the identity
            to determine further action (see GetAuthState, below).
             * RESULT
             Any failed HRESULT will cause the library to discontinue anypending authentication. 
             Any successful HRESULT will cause the library to continue this authentication if it is able.
            Return PPCRL_E_DISCONTINUE_AUTHENTICATION to explicitly stop a pending authentication for no other reason than
            control of flow.
             IMPORTANT
            This may be called by any number of threads and could be called by multiple threads at the same time.
            The implementor should takecare to protect any resources accessed by this implementation
            from such clashes of access.
            </summary>
            <param name="Identity">The identity with state that has changed</param>
            <param name="ptr">The data ???</param>
            <param name="CanContinue">The library can continue with the authentication.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.UserStateChangedCallback">
            <summary>
            UserStateChangedCallback 
            ADDED IN RELEASE
                4.0
            DESCRIPTION
              Callback notification for use state changes. This is called whenever
              there is a change to the user state. E.g. user tile change, persisted
              credentials change.
            
            IMPORTANT
               This may be called by any number of threads and could be called
            by multiple threads at the same time. The implementor should take
              care to protect any resources accessed by this implementation
               from such clashes of access.
            </summary>
            <param name="dwChangeID">Type of change, from NOTIFICATION_CHANGE_TYPE enum. This same ID is also provided in the IDSUserNotification struct.</param>
            <param name="changeData">Pointer to the notification data. Exact type depends on the change ID.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_OPTION">
            <summary>
            Holds an option for IDCRL initialization through InitializeEx API.
            m_dwId   : option id from IDCRL_OPTION_ID enum
            m_pValue : Option value passed in as a BYTE *. The actual data 
            structure will differ with the option id
            m_cbValue  : Byte size of the value
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_OPTIONS">
            <summary>
            Holds all options for IDCRL initialization through InitializeEx API.
            m_dwCount : Number of options
            m_arrOptions : Array of options
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.INTERNET_PROXY_INFO">
            <summary>
            Contains information that is supplied with the INTERNET_OPTION_PROXY value in wininet to get or set proxy information 
            on a handle obtained from a call to the InternetOpen function.
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams">
            <summary>
            RSTParams - Request Security Token Params
            - added in IDCRL 3.2 to allow application to request multiple tokens
             the structure to hold information related to request a service token
            This is an IDCRL structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.AuthState">
            <summary>
            Holds all the return values from AuthIdentityToService and AuthIdentityToServiceEx
            token : ServiceTokens in the requested format
            resultFlags : Returns the errorcode incase the service tokens could not be obtained
            sessionKey :If the service token format supports it, this will return a session key to the hosting
            application that matches the symmetric session key inside the service token. 
            This key material is binary, so care should be taken to not utilize any manipulations that 
            may terminate on embedded null or non-printable characters.
            sessionKeyLength : Lengtth of the session key
            This is a managed wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonState">
            <summary>
            Holds all the return values from GetAuthState and GetAuthStateEx
            AuthState : Authentication status
            AuthRequired : The authentication required (if any)
            RequestStatus : Status of the last request based on this identity
            WebFlowUrl : May optionally return a URL that the hosting application can take the user to in order 
            to explain and/or resolve theerror.
            This is a managed wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.MD5Data">
            <summary>
            It holds the data returned by GetWebAuthUrl
            md5Url : The Url to the MD5 login Service
            postData : Blob of data that can be POSTed to the URL for authentication
            This is a managed wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SHA1">
            <summary>
            It holds the data returned by GetWebAuthUrl
            Sha1Url : The Url to the MD5 login Service
            Sha1PostData : Blob of data that can be POSTed to the URL for authentication
            This is a managed wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CertSet">
            <summary>
            This structure holds all the certbased information. It contains IntPtr to the ShortlivedCertificate and CA Certificate.
            It all contains X509Certificate instances of these certificate, IntPtrs to Proof of Possession(POP)and size of POP.
            This is a managed wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.ExtendedError">
            <summary>
            This is a managedWrapper structure. It returns the errorCategory. Errorcode and errorblob
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize_Options">
            <summary>
            Holds all options for IDCRL initialization through InitializeEx API.
            optionType : option id from IDCRL_OPTION_ID enum
            proxyUserInfo : This could be the proxy user name or password depending on the IDCRL_OPTION_ID
            timeOut : The actual timeout value for the IDCRL_OPTION_ID
            proxyInfo :  instance to of INTERNET_PROXY_INFO struct
            This is an Managed Wrapper structure
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.INTERNET_CONNECTION_OPTIONS">
            <summary>
            The Internet Acess types in wininet
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.AUTHENTICATION_STATE">
            <summary>
            Authentication states used in <see cref="F:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonState.AuthState"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_OPTION_ID">
            <summary>
            IDCRL_OPTION_IDS enum : IDs of valid options that can be given to InitializeEx call
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportIdentityProperty">
            <summary>
             Used for retrieving properties about a given identity handle.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.UpdateFlag">
            <summary>
            Flags controlling general behavior of the library passed in during the Initialize call. Normally the update
            mechanism operates periodically and automatically based on a time-out policy. These flags allow the hosting application
            to over-ride this behavior. They also allow the hosting application to indicate that it can operate in offline mode (an M2 feature).
            IDCRL 3.2: OFFLINE_MODE_ALLOWED is ignored, it will mean the same asIDCRL 3.2: SKIP_CONNECTION_CHECK: When this mode is set, IDCRL will
             not check if a network and Internet connection is enabled before making network calls. In this case, you will get the default windows
             dialog to establish a connection if you are not connected already. The default IDCRL behavior is to fail with an error if there is no
             connection available or default connection is not established anduser has chosen to "Always dial my default connection" setting in IE.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonFlag">
            <summary>
            LOGON_FLAG enum
            Flags that can be passed into the various LogonIdentity API's to control the authentication process.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IdentityFlag">
            <summary>
            IDENTITY_FLAG enum
            Flags controlling properties of a particular identity handle. May be combined and passed in to the
            dwFlags parameter to CreateIdentityHandle.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.OfflineKeyMethod">
            <summary>
            Determines the algorithm to use to derive the offline key.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.ServiceTokenFlags">
            <summary>
            Used for retrieving properties about a given identity handle.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CertRequestFlags">
            <summary>
            CERTREQUESTFLAGS enum : flags for GetCertificate call.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.NOTIFICATION_CHANGE_TYPE">
            <summary>
             ADDED IN RELEASE
             4.0
             DESCRIPTION
             IDS_USER_ACCOUNT_CHANGE: Creds were persisted or removed.
             IDS_USER_PROPERTY_CHANGE: user property, extended property changed.
             </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.NOTIFICATION_ACTION_TYPE">
             <summary>
             NOTIFICATION_ACTION_TYPE enum
             ADDED IN RELEASE
             4.0
            
             DESCRIPTION
             IDS_NOTIFY_ADD: notification target was added
             IDS_NOTIFY_UPDATE: notification target was updated
             IDS_NOTIFY_DELETE: notification target was deleted
             </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_SETOPTIONS_FLAG">
            IDCRL_SETOPTIONS_FLAG enum
            IDs of valid options that can be given to InitializeEx call
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_DEVICE_ID_OPTIONS">
            <summary>
            IDCRL_DEVICE_ID_OPTIONS Flag enum
            Flags passed to GetDeviceID and Generate DeviceToken APIs to change 
            behavior of deviceid
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_DEVICE_CONSENT_OPTIONS">
            <summary>
            IDCRL_DEVICE_CONSENT_OPTIONS Flag enum
            Flags passed to SetConsent API to change consent behavior
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.UIFlag">
            <summary>
            WLIDUI_FLAG enum
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SSOFlags">
            <summary>
            SSO_FLAG enum
            Flags passed to Set SSO behaviour.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.WINHTTP_INTERNET_CONNECTION_OPTIONS">
            <summary>
            The Internet Acess types in wininet
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDSUserNotification">
             <summary>
             IDSUserNotification
            
             ADDED IN RELEASE
                 4.0
            
             DESCRIPTION
                Structure to the change data that is given to the application in the
                UserStateChangeCallback.
             NOTE
                Application must make a copy of string buffers before returning
                 from the callback because the memory will be freed by IDCRL as soon as 
                the callback function returns 
             </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDSUserPropertyNotification">
             <summary>
             IDSUserPropertyNotification
             ADDED IN RELEASE
                  4.0
            
             DESCRIPTION
                 Structure to the change data that is given to the application in the
                UserStateChangeCallback.
             NOTE
               Application must make a copy of string buffers before returning
                 from the callback because the memory will be freed by IDCRL as soon as 
                the callback function returns.
                If the property value is too large to pass in the notification,
                fValueTooLarge flag will be set to True. Apps must call 
                GetUserExtendedProperty to get the actual value in this case.
             </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize(System.Guid@,System.Int32,System.UInt32)">
            <summary>
            Initialize : Must be called before and return successfully before any other client runtime library functions are called.
            </summary>
            <param name="appGuid">A GUID that uniquely identifies the hosting application. This allows features such as customized user interfaces
            to match the hosting application's look and feel.</param>
            <param name="ppclrVersion">Binary version of the API</param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <returns>Suceessful HResult</returns>        
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.InitializeEx(System.Guid@,System.Int32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_OPTION[],System.UInt32)">
            <summary> Must be called before and return successfully before any other
            client runtime library functions are called. This function supports
            setting some optional parameters that Initialize does not support.        
            </summary>
            <param name="appGuid">A GUID that uniquely identifies the hosting application. This allows features such as customized user interfaces
            to match the hosting application's look and feel.</param>
            <param name="ppcrlVersion">Binary version of the API</param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <param name="options">Additional options to set. e.g. proxy information.</param>
            <param name="count">count of options in pOptions.</param>
            <returns>Suceessful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.InitializeEx(System.Guid@,System.Int32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize_Options[])">
            <summary> Must be called before and return successfully before any otherclient runtime library functions are called. 
            This function supports setting some optional parameters that Initialize does not support.
            This overloads takes an array of Initialize_Options and constructs an array of IDCRL_OPTIONS. 
            This saves the application from doing the marshalling.
            </summary>
            <param name="appGuid">A GUID that uniquely identifies the hosting application. This allows features such as customized user interfaces
            to match the hosting application's look and feel.</param>
            <param name="ppcrlVersion">Binary version of the API</param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <param name="initOptions">Array of Initialize_Options for addittional options to set. </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.InitializeEx(System.Guid@,System.Int32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize_Options[],System.UInt32)">
            <summary> Must be called before and return successfully before any otherclient runtime library functions are called. 
            This function supports setting some optional parameters that Initialize does not support.
            This overloads takes an array of Initialize_Options and constructs an array of IDCRL_OPTIONS. 
            This saves the application from doing the marshalling.
            </summary>
            <param name="appGuid">A GUID that uniquely identifies the hosting application. This allows features such as customized user interfaces
            to match the hosting application's look and feel.</param>
            <param name="ppcrlVersion">Binary version of the API</param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <param name="initOptions">Array of Initialize_Options for addittional options to set. </param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.InitializeApp(System.String,System.Int32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize_Options[])">
            <summary> Must be called before and return successfully before any otherclient runtime library functions are called. 
            This function supports setting some optional parameters that Initialize does not support.
            This overloads takes an array of Initialize_Options and constructs an array of IDCRL_OPTIONS. 
            This saves the application from doing the marshalling.
            </summary>
            <param name="appID">A GUID that uniquely identifies the hosting application. This allows features such as customized user interfaces
            to match the hosting application's look and feel.</param>
            <param name="ppcrlVersion">Binary version of the API</param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <param name="initOptions">Array of Initialize_Options for addittional options to set. </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetIdcrlOptions(Microsoft.AnalysisServices.MsoID.MsoIDCRL.Initialize_Options[],System.UInt32)">
            <summary> Must be called before and return successfully before any otherclient runtime library functions are called. 
            This function supports setting some optional parameters that Initialize does not support.
            This overloads takes an array of Initialize_Options and constructs an array of IDCRL_OPTIONS. 
            This saves the application from doing the marshalling.
            </summary>
            <param name="initOptions">Array of Initialize_Options for addittional options to set. </param>
            <param name="updateFlags">Initialization flags from the UPDATE_FLAG enum above.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.Uninitialize">
            <summary>
             Must be called when shutting down the client runtime library. This will immediately invalidate any extant identity handles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CreateIdentityHandle(System.String,System.UInt32,System.IntPtr@)">
            <summary>
             Used to create new identity handles, which then be authenticated with credentials and acquire authentication tokens.
            </summary>
            <param name="memberName">Member name to initialize the identity to. May be NULL and set later with SetIdentityProperty (or
            by the user if UI is being used).</param>
            <param name="identityFlags">Identity creation flags.</param>
            <param name="hIdentity">New identity handle. May be passed to LogonIdentity, etc. Must be released with CloseIdentityHandle eventually.</param>
            <returns>successful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.AuthIdentityToService(System.IntPtr,System.String,System.String,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.AuthState@)">
            <summary>
            Using an authenticated identity, attempts to retrieve a service token for that identity to the specified resource. If additional
            user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
             needs to be called to enhance the authentication state before
             the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity  ServiceTarget - URI representing the webservice. This is primarily
            to identity the resource and need not necessarily represent a real service URL.</param>
            <param name="serviceTarget">DNS Name or the service name</param>
            <param name="servicePolicy">Policy if the application knows it or can provide it directly. This may be provided by the hosting application directly or extract from the application-
            level challenge from an initial attempt to access the resource.</param>
            <param name="serviceTokenFlags">ServiceToken Flags to determine the type of token</param>
            <param name="authState">AuthState which will contain 
            1. pcbSessionKey / pcbSessionKeyLength - If the service token format supports it, this will return a session key to the hosting application that matches the symmetric session key inside
            the service token. This key material is binary, so care should be taken to not utilize any manipulations that may terminate on embedded null or non-printable characters.</param>
            <returns>sucessful HRresult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonIdentity(System.IntPtr,System.String,System.UInt32)">
            <summary>
            Fundamental call of the Passport client runtime library. Allows the creation of an authenticated identity. This version of the
            call allows credentials to be provided by the calling application.
            </summary>
            <param name="identity">Passport IdentityHandle returned by CreateIdentityHandle Call</param>
            <param name="servicePolicy">Param for future use. The managedWrapper always passes optional params. 
            The next version will handle optional params
            </param>
            <param name="logonFlags">From LOGON_FLAG enum above.</param>
            <returns>successful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonIdentityEx(System.IntPtr,System.String,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams[],System.UInt32)">
            <summary> 
            Fundamental call of the Passport client runtime library. Allows the creation of an authenticated identity. This version of the
            call allows credentials to be provided by the calling application. Service tokens are requested with Ex version.
            the service tokens will be put in cache, use AuthIdentityToService with SERVICE_TOKEN_FROM_CACHE flag to retrieve from cache
            </summary>
            <param name="identity">Passport Identity handle obtained from CreateIdentityHandle call</param>
            <param name="authPolicy">Optional authPolicy.
            The next version will handle optional params</param>
            <param name="logonFlags">From LOGON_FLAG enum above.</param>
            <param name="rstParam">Struct to specify combinations of ServiceNames and policies with the addittional information</param>
            <param name="paramCount">Number of RSTParams elements. </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetCredential(System.IntPtr,System.String,System.String)">
            <summary> 
            Sets a specified credential on the given identity handle. 
            Any set credential will be used, as-needed, for all future authentication requests on this identity.        
            </summary>
            <param name="identity">Passport Identity Handle</param>
            <param name="credType">Credential type to set (from PPCRL_CREDTYPE_* definitions, above).</param>
            <param name="credValue">Credential to associate with the identity.</param>
            <returns>successful hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetAuthState(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonState@)">
            <summary>
            Returns the authentication and request state associated with the given identity handle. This allows the calling
            application to determine not only the current authentication state, but the state of the last request made on behalf
            of this identity. The calling application can use this information to deal with the state/errors appropriately.
            </summary>
            <param name="identity">Passport Identity handle</param>
            <param name="state">LogonState struc definted above.  Returns the authentication status, the authentication required (if any), the status of the last request
            based on this identity, and may optionally return a URL that the hosting application can take the user to in order to explain and/or resolve the
            </param>
            <returns>Successful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.AuthIdentityToServiceEx(System.IntPtr,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams[],System.UInt32)">
            <summary>
             Using an authenticated identity, attempts to retrieve a set of service tokens for that identity to the specified resources.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected)
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="serviceTokenFlags"> the service tokens will be put in cache if async, use AuthIdentityToService with SERVICE_TOKEN_FROM_CACHE flag to retrieve from cache</param>
            <param name="rstParams">parameters for service tokens</param>
            <param name="rstParamCount">number of parameters</param>
            <returns>Sucessful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetCertificate(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
            Using an authenticated identity to get a certficate for this user for that identity to the specified service name.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="pcRSTParams"> parameters for the certificate request</param>
            <param name="dwMinTTL">If getting from cache, as input, minimum acceptable TTL as output, actual remaining TTL. Has no effect for a
            new certificate request from network.</param>
            <param name="certRequestFlags">indicate if the cert should be from the cache</param>
            <param name="certContext">the cert context, this context can be used with cryto API for cert/internal key/private key related operations.
            IDCRL maitains the private key for this cert.  It clears the private key when it requesing a new cert from passport.
            Application must call CertFreeCertificateContext and stop using the certcontext before the next GetCerficate call.</param>
            <returns>S_OK if successful
            PPCRL_S_OK_CLIENTTIME if successful but the clock skew is not set
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetCertificate(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams,System.UInt32,System.UInt32,System.Security.Cryptography.X509Certificates.X509Certificate@)">
            <summary>
            Using an authenticated identity to get a certficate for this user for that identity to the specified service name.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="pcRSTParams"> parameters for the certificate request</param>
            <param name="dwMinTTL">If getting from cache, as input, minimum acceptable TTL as output, actual remaining TTL. Has no effect for a
            new certificate request from network.</param>
            <param name="certRequestFlags">indicate if the cert should be from the cache</param>
            <param name="cert">The wrapper initializes a X509Cert</param>
            <returns>S_OK if successful
            PPCRL_S_OK_CLIENTTIME if successful but the clock skew is not set
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetCertificate(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams,System.UInt32,System.UInt32,System.IntPtr@,System.IntPtr,System.UInt32@,System.IntPtr@)">
            <summary>
            Using an authenticated identity to get a certficate for this user for that identity to the specified service name.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="pcRSTParams"> parameters for the certificate request</param>
            <param name="dwMinTTL">If getting from cache, as input, minimum acceptable TTL as output, actual remaining TTL. Has no effect for a
            new certificate request from network.</param>
            <param name="certRequestFlags">indicate if the cert should be from the cache</param>
            <param name="certContext">the cert context, this context can be used withcryto API for cert/internal key/private key related operations.
            IDCRL maitains the private key for this cert.  It clears the private key when it requesing a new cert from passport.
            Application must call CertFreeCertificateContext and stop using the certcontext before the next GetCerficate call.</param>
            <param name="popBlob">Optional parameter to receive the proof of possession blob. Applications can give this blob to VerifyCertificate API
            to perform POP check on the certificate. Application must free it with PassportFreeMemory API after using.</param>
            <param name="popBlobSize">If ppbPOP is not NULL, you must also pass this parameter to get the size of the POP blob.</param>
            <param name="ppCACertContext">Optional parameter to receive the CA certificate context. Application must free it with CertFreeCertificateContext
            API after using. The CA cert context may be expired in time but corresponds to the signature on the subject certificate.</param>
            <returns>S_OK if successful
            PPCRL_S_OK_CLIENTTIME if successful but the clock skew is not set
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetCertificate(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams,System.UInt32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.CertSet@)">
            <summary>
            Using an authenticated identity to get a certficate for this user for that identity to the specified service name.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="pcRSTParams"> parameters for the certificate request</param>
            <param name="dwMinTTL">If getting from cache, as input, minimum acceptable TTL as output, actual remaining TTL. Has no effect for a
            new certificate request from network.</param>
            <param name="certRequestFlags">indicate if the cert should be from the cache</param>
            <param name="certSet">CertSet contains IntPtr to cert, CACert also X509Cert instances of cert and CACert and popBlob and popSize. 
            The wrapper handles the marshalling of the certs</param>
            <returns>S_OK if successful
            PPCRL_S_OK_CLIENTTIME if successful but the clock skew is not set
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetAssertion(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.RSTParams,System.UInt32,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.CertSet@)">
            <summary>
            Using an authenticated identity to get a certficate for this user for that identity to the specified service name.
            If additional user interface interaction is required from the user, this call may fail with an error code indicating that LogonIdentity
            needs to be called to enhance the authentication state before the service token can be granted (e.g., if a PIN needs to be collected).
            </summary>
            <param name="identity">Authenticated identity handle returned from LogonIdentity</param>
            <param name="pcRSTParams"> parameters for the certificate request</param>
            <param name="dwMinTTL">If getting from cache, as input, minimum acceptable TTL as output, actual remaining TTL. Has no effect for a
            new certificate request from network.</param>
            <param name="certRequestFlags">indicate if the cert should be from the cache</param>
            <param name="certSet">CertSet contains IntPtr to cert, CACert also X509Cert instances of cert and CACert and popBlob and popSize. 
            The wrapper handles the marshalling of the certs</param>
            <returns>S_OK if successful
            PPCRL_S_OK_CLIENTTIME if successful but the clock skew is not set
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetAuthStateEx(System.IntPtr,System.String,Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonState@)">
            <summary>
            Returns the authentication and request state associated with the given identity handle. This allows the calling
            application to determine not only the current authentication state, but the state of the last request made on behalf
            of this identity. The calling application can use this information to deal with the state/errors appropriately.
            The Ex version is used to query states for a particular service token
            </summary>
            <param name="identity">Passport Identity handle</param>
            <param name="serviceTarget">Token is retrieved based on serviceTarget. When wzServiceTarget == NULL, the states from last request is returned</param>
            <param name="state">LogonState struc definted above.  Returns the authentication status, the authentication required (if any), the status of the last request
            based on this identity, and may optionally return a URL that the hosting application can take the user to in order to explain and/or resolve the
            </param>
            <returns>Successful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetAuthenticationStatus(System.IntPtr,System.String,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_STATUS_CURRENT@)">
            <summary>
            GetAuthenticationStatus
            
            DESCRIPTION--Extensible version of GetAuthStateEx
                
            </summary>
            
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.VerifyCertificate(System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            check if the cert can be chained back to one of the certs in config.
            </summary>
            <param name="pcertContext">Pointer to a cert context of the certificate you</param>
            <param name="dwMinTTL">As input, it is the minimum acceptable TTL, as output it is the actual remaining TTL.</param>
            <param name="popBlob">POP blob to verify</param>
            <param name="popSize">size of the pop blob in bytes</param>
            <param name="ppCACertContext">Optional parameter to receive the CA certificate context. 
            Application must free it with CertFreeCertificateContext API after using. 
            The CA cert context may be expired in time butcorresponds to the signature on the subject certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.VerifyCertificate(System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32,System.Security.Cryptography.X509Certificates.X509Certificate@)">
            <summary>
            check if the cert can be chained back to one of the certs in config.
            </summary>
            <param name="pcertContext">Pointer to a cert context of the certificate you</param>
            <param name="dwMinTTL">As input, it is the minimum acceptable TTL, as output it is the actual remaining TTL.</param>
            <param name="popBlob">POP blob to verify</param>
            <param name="popSize">size of the pop blob in bytes</param>
            <param name="ppCACert">instance of x509cert  
            Application must free it with CertFreeCertificateContext API after using. 
            The CA cert context may be expired in time butcorresponds to the signature on the subject certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.VerifyCertificate(System.IntPtr,System.UInt32@,System.Security.Cryptography.X509Certificates.X509Certificate@)">
            <summary>
            check if the cert can be chained back to one of the certs in config.
            </summary>
            <param name="pcertContext">Pointer to a cert context of the certificate you</param>
            <param name="dwMinTTL">As input, it is the minimum acceptable TTL, as output it is the actual remaining TTL.</param>
            <param name="popBlob">POP blob to verify</param>
            <param name="popSize">size of the pop blob in bytes</param>
            <param name="ppCACert">instance of x509cert  
            Application must free it with CertFreeCertificateContext API after using. 
            The CA cert context may be expired in time butcorresponds to the signature on the subject certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.VerifyAssertion(System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            check if the cert can be chained back to one of the certs in config.
            </summary>
            <param name="pcertContext">Pointer to a cert context of the certificate you</param>
            <param name="dwMinTTL">As input, it is the minimum acceptable TTL, as output it is the actual remaining TTL.</param>
            <param name="popBlob">POP blob to verify</param>
            <param name="popSize">size of the pop blob in bytes</param>
            <param name="ppCACertContext">Optional parameter to receive the CA certificate context. 
            Application must free it with CertFreeCertificateContext API after using. 
            The CA cert context may be expired in time butcorresponds to the signature on the subject certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetIdentityCallback(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.CallBackDelegateWithData)">
            <summary>
            Associates a callback procedure with the identity for asynchronousfunctionality. Any identity without an associated callback will
            operate synchronously.
            </summary>
            <param name="identity">Passport Identity handle</param>
            <param name="CallbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetIdentityCallback(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.CallBackDelegateWithData,System.IntPtr)">
            <summary>
            Associates a callback procedure with the identity for asynchronousfunctionality. Any identity without an associated callback will
            operate synchronously.
            </summary>
            <param name="identity">Passport Identity handle</param>
            <param name="CallbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetChangeNotificationCallback(System.String,System.UInt32,Microsoft.AnalysisServices.MsoID.MsoIDCRL.UserStateChangedCallback)">
            <summary>
            Associates a callback procedure with the identity for asynchronousfunctionality. Any identity without an associated callback will
            operate synchronously.
            </summary>
            <param name="identity">Passport Identity handle</param>
            <param name="CallbackFunction">call back function</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetChangeNotificationCallback(Microsoft.AnalysisServices.MsoID.MsoIDCRL.UserStateChangedCallback)">
            <summary>
            Associates a callback procedure with the identity for asynchronousfunctionality. Any identity without an associated callback will
            operate synchronously. Default flag 0 will be passed to the function. and empty string will be passed to the function.
            </summary>
            <param name="CallbackFunction">call back function</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.RemoveChangeNotificationCallback">
            <summary>
            Associates a callback procedure with the identity for asynchronousfunctionality. Any identity without an associated callback will
            operate synchronously. Default flag 0 will be passed to the function. and empty string will be passed to the function.
            </summary>
            <param name="CallbackFunction">call back function</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CancelPendingRequest(System.IntPtr)">
            <summary>
            Cancel the pending request, so callback function will not be called
            </summary>
            <param name="identity">Passport Identity Handle </param>
            <returns>successful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CloseIdentityHandle(System.IntPtr)">
            <summary>
            Closes an identity handle previously opened with CreateIdentityHandle freeing any resources associated with the identity.
            </summary>
            <param name="identity">Identity handle to close.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PersistCredential(System.IntPtr,System.String)">
            <summary>
            Stores, updates and/or deletes stored credentials.The persistent credential store is updated based on the
            credentials stored on the identity.
            </summary>
            <param name="identity">Identity from to persist credentials for.</param>
            <param name="credType">Credential type on the identity to persist.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.EnumIdentitiesWithCachedCredentials(System.String,System.Int64@)">
            <summary>
            Enumerates stored credentials allowing the hosting application to determine which credentials are present.
            </summary>
            <param name="credType">If non-NULL and non-empty, specifies the credential type to limit iteration of. For example,
            if PPCRL_CREDTYPE_PASSWORD is passed here, only identitieswith cached passwords will be iterated. If NULL or an
            empty string is passed here, then all identities with any type of cached credential will be iterated.</param>
            <param name="credHandle">A enumeration handle that allows iteration through the identities.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.NextIdentity(System.Int32)">
            <summary>
            Returns the next identity for the given enumeration handle.
            NOTES Any strings returned as outputs must be freed with PassportFreeMemory.
            However, if the pointers are passed back in as outputs to a PPCRL call, any previous string will be correctly freed.
            </summary>
            <param name="enumHandle">Handle as returned from EnumIdentities* call</param>
            <returns>The member name with cached credentials</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.NextIdentity(System.Int32,System.String@)">
            <summary>
            Returns the next identity for the given enumeration handle.
            NOTES Any strings returned as outputs must be freed with PassportFreeMemory.
            However, if the pointers are passed back in as outputs to a PPCRL call, any previous string will be correctly freed.
            </summary>
            <param name="enumHandle">Handle as returned from EnumIdentities* call</param>
            <returns>The member name with cached credentials</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CloseEnumIdentitiesHandle(System.Int32)">
            <summary>
            Closes an identity iterator, freeing resource associated with it.
            </summary>
            <param name="enumHandle">The iterator to close</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.RemovePersistedCredential(System.IntPtr,System.String)">
            <summary>
            Removes credentials from persistent storage.Any previously persisted credential will be deleted from
            the store. Any transient credential left on the identity itself is left unchanged.
            </summary>
            <param name="identity">Identity from which to remove credentials</param>
            <param name="credType">Credential type to delete from the store</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetIdentityPropertyByName(System.IntPtr,System.String,System.String@)">
            <summary>
            Retrieves the value of a property associated with an identity handle.
            Currently GetIdentityPropertyByName doesnot return successcode. But this overload can be used if the API 
            starts returning success codes
            </summary>
            <param name="identity">Passport Identity Handle</param>
            <param name="PropertyName">property Name ANID / BRANDID</param>
            <param name="strPropertyVal">Upon success, the value of the property will be stored on the wszPropertyValue buffer. 
            The buffer must be freed with a call to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetIdentityPropertyByName(System.IntPtr,System.String)">
            <summary>
            Retrieves the value of a property associated with an identity handle.
            </summary>
            <param name="identity">Passport Identity Handle</param>
            <param name="PropertyName">property Name ANID / BRANDID</param>
            <param name="strPropertyVal">Upon success, the value of the property will be stored on the wszPropertyValue buffer. 
            The buffer must be freed with a call to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetIdentityProperty(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportIdentityProperty,System.String@)">
            <summary>
            Retrieves the value of a property associated with an identity handle.
            Currently GetIdentityproperty doesnot return successcode. But this overload can be used if the API 
            starts returning success codes
            </summary>
            <param name="identity">Passport Identity Handle</param>
            <param name="PropertyName">property Name ANID / BRANDID</param>
            <param name="strPropertyVal">Upon success, the value of the property will be stored on the szPropertyValue buffer. 
            The buffer must be freed with a callto</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetIdentityProperty(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportIdentityProperty)">
            <summary>
            Retrieves the value of a property associated with an identity handle.
            </summary>
            <param name="identity">Passport Identity Handle</param>
            <param name="PropertyName">property Name ANID / BRANDID</param>
            <param name="strPropertyVal">Upon success, the value of the property will be stored on the szPropertyValue buffer. 
            The buffer must be freed with a callto</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetPreferredAuthUIContextSize(System.IntPtr,System.Drawing.Size@)">
            <summary>
            Returns the preferred screen dimensions for an AuthUIContext. This may change depending upon the state of the identity handle
            (some error flows recommend a large window). Therefore the authentication and request states of the given identity
            will be taken into account.
            </summary>
            <param name="identity">Optional identity to return the preferred dimensions 
            for. Of a NULL handle is given, the preferred dimensions for initial authenticaiton are returned.</param>
            <param name="size">Returns the width and height that are preferred to perform an authentication with UI for the given identity.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CreatePassportAuthUIContext(Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportCredUIInfo@,Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportCredCustomUI@,System.Int64@)">
            <summary>
            Creates a UI context for the PPCRL to use its built-in user interface for credential collection and error handling when
            dealing with the user to authenticate.
            </summary>
            <param name="credUIInfo">describes the configurable attributes of the built-in user interface</param>
            <param name="credUICustomUI"></param>
            <param name="authUIContextHandle">Address to receive the auth context handle for the newly-created context.</param>
            <returns>Creates a UI authentication context that can be used when authenticating identities.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.DestroyPassportAuthUIContext(System.Int32)">
            <summary>
            Destroys a previously-allocated UI context, freeing the resources associated with it.
            </summary>
            <param name="authUIContextHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.LogonIdentityWithUI(System.Int32,System.IntPtr,System.String,System.UInt32)">
            <summary>
            Requests an authentication using the client runtime's built-in user interface for credential collection and error handling.
            UI-based authentications are always asynchronous in nature (asthey depend on user input), so a valid call-back is required.
            This also means that this call always returns immediately to the caller, and the authentication process occurs over
            time as Windows messages are pumped and the library is able to interact with the user and the auth servers.
            </summary>
            <param name="authContext">The UI authentication context to be used for this authentication. This comes from
            CreatePassportAuthUIContext function, above.</param>
            <param name="identity">Identity handle to authenticate.</param>
            <param name="policy">Optional policy to apply to the authentication</param>
            <param name="logonFlags">lags controlling the authentication.</param>
            <returns>Upon success, the given identity handle will possess the appropriate authentication state based on the credentials
            presented. Service tokens are requested with Ex version. the service tokens will be put in cache, use AuthIdentityToService
            with SERVICE_TOKEN_FROM_CACHE flag to retrieve from cache</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.MoveAuthUIContext(System.Int32,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Allows a hosting application to change the size of an authentication UI context that has already been created. This
            is most useful to handling error flows, etc. where the size returned by GetPreferredAuthUIContextSize indicates a different
            size would be more appropriate. The authentication context is resized.
            </summary>
            <param name="authContext">Authentication context to resize and/or move</param>
            <param name="position"></param>
            <param name="newSize">New size for the authentication context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetWebAuthUrl(System.IntPtr,System.String,System.String,System.String,System.String,Microsoft.AnalysisServices.MsoID.MsoIDCRL.MD5Data@)">
            <summary>
            Get Url and post data for web authentication. E.g. for hotmail inbox.
            * NOTES :Calling application must set the following header:
            * Content-Type: application/x-www-form-urlencoded
            * for the POST request to be accepted by the login server.
            </summary>
            <param name="identity">Identity handle created previously</param>
            <param name="targetService">Reserved</param>
            <param name="policy">Reserved</param>
            <param name="additionalParams">Other params required for the call the coreparams computed by the API. For MD5, these include: ru, kv, svc, rru,
            id and sid.</param>
            <param name="sourceService">Service name used earlier to authenticate the user</param>
            <param name="md5data">This struct contains webAuthUrl Output param that holds the URL to post the data
            and pszPostData: Post data to be sent with the request, it includes the additional post params specified in szAdditionalPostParams</param>
            <returns>Upon success, the API will give a URL with a blob of data that can be POSTed to the URL for authentication</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.HasPersistedCredentials(System.IntPtr,System.String)">
            <summary>
            Returns whether or not the specified identity has a persisted credential of the specified type.
            </summary>
            <param name="identity">the identity to check persisted credentials of</param>
            <param name="CredType">the credential type to check for persistence</param>
            <param name="hasPersistedCred">Whether or not there is a persistent credential.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportFreeMemory(System.IntPtr)">
            <summary>
            Frees buffers allocated and returned by the client runtime library.
            </summary>
            <param name="buffer">memory location to Deallocated</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetIdentityProperty(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.PassportIdentityProperty,System.String)">
            <summary>
            Sets the specified property on the identity. Note that not all properties may be settable.
            </summary>
            <param name="identity">Passport Idenityt Property</param>
            <param name="iProperty"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetExtendedError(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.IDCRL_ERROR_CATEGORY@,System.UInt32@,System.String@)">
            <summary>
            Gives extended error information for certain IDCRL error conditions.
            Its functionality is similar to GetLastError system API at the identity handle scope.
            </summary>
            <param name="identity">Identity handle.</param>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetExtendedError(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.ExtendedError@)">
            <summary>
            Gives extended error information for certain IDCRL error conditions.
            Its functionality is similar to GetLastError system API at the identity handle scope.
            </summary>
            <param name="identity">Identity handle.</param>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CacheAuthState(System.IntPtr,System.String)">
            <summary>
            CacheAuthState - caches auth state for a virtual application. 
            Writes auth state block in cred manager for that virtual application.
            The Native API also takes a flag which is reserved for now. 
            This is a managedWrapper overload doesnot take have the flag as an input parameter but passes the default flag = 0 to the native API.
            the CacheAuthState API with input flag parameter can be used. The possbile Err
            </summary>
            <param name="identity">identity handle</param>
            <param name="virtualAppName">the name of the virtual application - suggest GUID</param>
            <param name="ErrorCodes ReturnedReturned">E_INVALIDARG
            PPCRL_E_NO_MEMBER_NAME_SET
            PPCRL_E_UNABLE_TO_RETRIEVE_SERVICE_TOKEN
            PPCRL_E_AUTHBLOB_TOO_LARGE (64 * 256 bytes)</param>
            <returns>successful hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CacheAuthState(System.IntPtr,System.String,System.UInt32)">
            <summary>
            CacheAuthState - caches auth state for a virtual application. 
            Writes auth state block in cred manager for that virtual application.
            The Native API also takes a flag which is reserved for now.
            </summary>
            <param name="identity">identity handle</param>
            <param name="virtualAppName">the name of the virtual application - suggest GUID</param>
            <param name="flags">reserved</param>
            <param name="ErrorCodes ReturnedReturned">E_INVALIDARG
            PPCRL_E_NO_MEMBER_NAME_SET
            PPCRL_E_UNABLE_TO_RETRIEVE_SERVICE_TOKEN
            PPCRL_E_AUTHBLOB_TOO_LARGE (64 * 256 bytes)</param>
            <returns>successful hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.RemoveAuthStateFromCache(System.String,System.String,System.UInt32)">
            <summary>
            Remove cached auth state for a virtual application.
            Its writes auth state block in cred manager under the virutal application
            </summary>
            <param name="username">identity handle - can be NULL, when NULL, user name is not checked, and all users removed under the same virtual app</param>
            <param name="virtualAppName">the name of the virtual application - can be NULL, when NULL, virtual app name is not checked, and all removed</param>
            <param name="ErrorCodes returnedreturned">PPCRL_E_AUTHBLOB_NOT_FOUND</param>
            <param name="flags">reserved</param>
            <returns>success hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.RemoveAuthStateFromCache(System.String,System.String)">
            <summary>
            Remove cached auth state for a virtual application.
            Its writes auth state block in cred manager under the virutal application. The reserve flag in the Native API is reserved.
            This is a managedWrapper overload doesnot take have the flag as an input parameter but passes the default flag = 0 to the native API.
            </summary>
            <param name="username">identity handle - can be NULL, when NULL, user name is not checked, and all users removed under the same virtual app</param>
            <param name="virtualAppName">the name of the virtual application - can be NULL, when NULL, virtual app name is not checked, and all removed</param>
            <param name="ErrorCodes returnedreturned">PPCRL_E_AUTHBLOB_NOT_FOUND</param>
            <returns>success hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CreateIdentityHandleFromCachedAuthState(System.String,System.String,System.UInt32,System.IntPtr@)">
            <summary>
            creates an identity handle, and import the authtoken blob into cache
            </summary>
            <param name="username">the name of the user - NULL, any user</param>
            <param name="virtualAppName">the name of the virtual app - NULL, any app</param>
            <param name="flags">IDENTITY_FLAG</param>
            <param name="identity">This is an out param. The identity handle, this should be closed by: CloseIdentityHandle</param>
            <param name="ErrorCodes returnedreturned">E_INVALIDARG
            E_POINTER  -- when pihIdentity is NULL
            PP_E_CRL_ILLEGAL_IDENTITY_FLAG - 
            PP_E_CRL_NOT_INITIALIZED</param>
            <returns>successful hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CreateIdentityHandleFromCachedAuthState(System.String,System.UInt32,System.IntPtr@)">
            <summary>
            creates an identity handle, and import the authtoken blob into cache
            </summary>
            <param name="virtualAppName">the name of the virtual app - NULL, any app</param>
            <param name="flags">IDENTITY_FLAG</param>
            <param name="identity">This is an out param. The identity handle, this should be closed by: CloseIdentityHandle</param>
            <param name="ErrorCodes returnedreturned">E_INVALIDARG
            E_POINTER  -- when pihIdentity is NULL
            PP_E_CRL_ILLEGAL_IDENTITY_FLAG - 
            PP_E_CRL_NOT_INITIALIZED</param>
            <returns>successful hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.CreateIdentityHandleFromAuthState(System.String,System.UInt32,System.IntPtr@)">
            <summary>
            create an identity handle, and import  the authtoken blob. 
            Exception Thrown :
            E_INVALIDARG
            E_POINTER  -- when pihIdentity is NULL
            PP_E_CRL_ILLEGAL_IDENTITY_FLAG - 
            PP_E_CRL_NOT_INITIALIZED
            </summary>
            <param name="authToken">the auth token</param>
            <param name="flags">IDENTITY_FLAG</param>
            <param name="identity">the identity handle, this should be closed by: CloseIdentityHandle</param>
            <returns>success hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetWebAuthUrlEx(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.WebAuthOptions,System.String,System.String,System.String,Microsoft.AnalysisServices.MsoID.MsoIDCRL.SHA1@)">
            <summary>
            Get Url and post data for web authentication. E.g. for hotmail inbox.
            * NOTES :Calling application must set the following header:
            * Content-Type: application/x-www-form-urlencoded
            * for the POST request to be accepted by the login server.
            </summary>
            <param name="identity">Identity handle created previously</param>
            <param name="targetService">name of the target service</param>
            <param name="policy">policy for the service ticket</param>
            <param name="additionalParams">Other params required for the call the core params computed by the API. </param>
            <param name="pszWebAuthUrl">Output param that holds the URL to post the data  </param>
            <param name="pszPostData">Post data to be sent with the request, it includes the additional post params specified in szAdditionalPostParams</param>
            <returns>Upon success, the API will give a URL with a blob of data that can be POSTed to the URL for authentication, this is using PSHA1AuthE_INVALIDARG</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.ExportAuthState(System.IntPtr,System.UInt32,System.String@)">
            <summary>
            Export AuthToken into a blob. Export authenticate token and its session key into an xml blob
            </summary>
            <param name="identity">identity handle</param>
            <param name="flags">reserved</param>
            <param name="authToken">returns AuthToken into a blob. should be free'ed with PassportFreeMemory</param>
            <param name="ErrorCodes ReturnedReturned">PPCRL_E_NO_MEMBER_NAME_SET
            E_INVALIDARG
            PPCRL_E_UNABLE_TO_RETRIEVE_SERVICE_TOKEN
            PP_E_CRL_NOT_INITIALIZED</param>
            <returns>success hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.ExportAuthState(System.IntPtr,System.String@)">
            <summary>
            Export AuthToken into a blob. Export authenticate token and its session key into an xml blob
            This is a managedWrapper overload doesnot take have the flag as an input parameter but passes the default flag = 0 to the native API.
            </summary>
            <param name="identity">identity handle</param>
            <param name="flags">reserved</param>
            <param name="authToken">returns AuthToken into a blob. should be free'ed with PassportFreeMemory</param>
            <param name="ErrorCodes ReturnedReturned">PPCRL_E_NO_MEMBER_NAME_SET
            E_INVALIDARG
            PPCRL_E_UNABLE_TO_RETRIEVE_SERVICE_TOKEN
            PP_E_CRL_NOT_INITIALIZED</param>
            <returns>success hr</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetExtendedProperty(System.String)">
             <summary>
             GetExtendedProperty - get the value for a given property name - per windows logon property
             wszPropertyName: name of the property
             <param name="ErrorCodes returnedreturned">
             E_INVALIDARG
             E_OUTOFMEMORY
             PP_E_CRL_NOT_INITIALIZED
             Error from registry access API:RegOpenKeyEx RegGetValueEx</param>
             </summary>
             <param name="propertyName">name of the property</param>
             <returns>Property Value :value of the property, IDCRL allocates the buffer, and it 
            should be freed with PassportFreeMemory call</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetExtendedProperty(System.String,System.String)">
            <summary>
            SetExtendedProperty - set name value pair [per windows logon property]
            </summary>
            <param name="propertyName">name of the property</param>
            <param name="propertyValue">value of the property</param>
            <returns>
            Operation status.
            ErrorCodes returned:
              E_INVALIDARG - Error from registry access API:RegOpenKeyEx RegGetValueEx
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetUserExtendedProperty(System.String,System.String)">
            <summary>
            GetUserExtendedProperty - get the value for a given name - per windows logon property
            <param name="ErrorCodes returnedreturned">
            E_INVALIDARG
            Error from registry access API:RegOpenKeyEx RegGetValueEx
            PPCRL_E_USER_NOTFOUND</param>
            </summary>
            <param name="userName">memebername</param>
            <param name="property">name of the property</param>        
            <returns>property value</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SetUserExtendedProperty(System.String,System.String,System.String)">
            <summary>
            SetExtendedProperty - set name value pair - per windows logon property
            wszPropertyName: name of the property
            <param name="ErrorCodes returnedreturned">
            E_INVALIDARG
            Error from registry access API:RegOpenKeyEx RegGetValueEx</param>
            </summary>
            <param name="propertyName">name of the property</param>
            <param name="propertyValue">value of the property, NULL or empty string will delete an existing value</param>
            <returns>success code. Currently no successcode is returned</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.GetServiceConfig(System.String)">
            <summary>
            GetServiceConfig - get config urls in the config xml
            </summary>
            <param name="valueName">name of the service</param>
            <param name="ErrorCodes returnedreturned">E_INVALIDARG
            S_FALSE : not found</param>
            <returns>Service Url</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.EncryptWithSessionKey(System.IntPtr,System.String,System.UInt32,System.UInt32,System.String,System.IntPtr@,System.UInt32@)">
            <summary>
             Call this to encrypt data blob with session key in the service token to the encrypted data to be sent to the target service
            </summary>
            <param name="identity">identity Handle</param>
            <param name="serviceName">service name of the session key to be used</param>
            <param name="algIdEncrypt">Algorithm ID for encryption</param>
            <param name="algIdHash">Algorithm Hash to be used for Encryption</param>
            <param name="data">data to be encrypted</param>
            <param name="cipherPtr">This out param is the pointer to the encrypted data</param>
            <param name="cipherSize">This out param will hold the size of the encrypted data</param>
            <returns>Suceessful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.DecryptWithSessionKey(System.IntPtr,System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.String@,System.UInt32@)">
            <summary>
             Call this to encrypt data blob with session key in the service token to the encrypted data to be sent to the target service
            </summary>
            <param name="hIdentity">identity Handle</param>
            <param name="serviceName">service name of the session key to be used</param>
            <param name="algIdEncrypt">Algorithm ID for encryption</param>
            <param name="algIdHash">Algorithm Hash to be used for Encryption</param>
            <param name="cipherPtr">Pointer to the encrypted data</param>
            <param name="cipherSize">Size of the encrypted data</param>
            <param name="data">This out parameter will hold the decrypted data</param>
            <param name="dataSize">This out paramter will hold the size of the decrypted data</param>
            <returns>Suceessful HResult</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.MigratePersistedCredentials(System.Guid@,System.Boolean,System.UInt32@)">
            <summary>
            Initialize : Must be called before and return successfully before any other client runtime library functions are called.
            </summary>
            <param name="appGuid">guid: the GUID of the app</param>
            <param name="keepOldCreds">If true, IDCRL will NOT delete old credentials after migrating to Credman store. 
            This is application for scenarios where a user may want to downgrade to a previous version of the app.
            Note: It is a security risk to preserve old credentials and apps should make the decision to keep or delete them carefully.</param>
            <param name="migrateUserCount">Number of users migrated.</param>
            <returns>Suceessful HResult</returns>        
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.SaveTweenerCreds(System.String,System.String)">
            <summary>
            Stores, updates and/or deletes stored tweener credentials.The persistent credential store is updated based on the
            credentials stored on the identity.
            </summary>
            <param name="strUserName">Name of user taht needs to be stored in credman .</param>
            <param name="strEncPwd">Password for user.</param>
            <param name="dwlen">Out paramaeter - Length of encrypted password</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.DeleteTweenerCreds(System.String)">
            <summary>
            Stores, updates and/or deletes stored tweener credentials.The persistent credential store is updated based on the
            credentials stored on the identity.
            </summary>
            <param name="strUserName">Username to be deleted from credman.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsoID.MsoIDCRL.OpenAuthenticatedBrowser(System.IntPtr,Microsoft.AnalysisServices.MsoID.MsoIDCRL.WebAuthOptions,System.String,System.String,System.String)">
            <summary>
            Get Url and post data for web authentication.
            E.g. for hotmail inbox.Similar to GetWebAuthUrlEx, except it also opens the IE window
            </summary>
            <param name="identity">Identity handle created previously</param>
            <param name="targetService">name of the target service</param>
            <param name="policy">policy for the service ticket</param>
            <param name="additionalParams">Other params required for the call the core params computed by the API. </param>
            <returns>Upon success, the API will give a URL with a blob of data that can be POSTed to the URL for authentication, this is using PSHA1AuthE_INVALIDARG</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.MsoID.IDCRLException">
            <summary>
            IDCRLException Class wrappers errors returned by NativeMethod. The class returns Failed HR and the Name of the NativeMethod which 
            failed. 
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.StreamSizes">
            <summary>
            Structure corresponds to SecPkgContext_StreamSizes structure
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.StreamSizes.cbHeader">
            <summary>
            Specifies the size, in bytes, of the header portion. If zero, no header is used.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.StreamSizes.cbTrailer">
            <summary>
            Specifies the maximum size, in bytes, of the trailer portion. If zero, no trailer is used.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.StreamSizes.cbMaxMessage">
            <summary>
            Specifies the size, in bytes, of the largest message that can be encapsulated.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.StreamSizes.cBuffers">
            <summary>
            Specifies the number of buffers to pass.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.StreamSizes.cbBlockSz">
            <summary>
            Specifies the preferred integral size of the messages. 
            For example, eight indicates that messages should be of size zero mod eight for optimal performance. 
            Messages other than this block size can be padded.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.SecurityContextMode">
            <summary>
            TLS mode for security context, see TLS RFC.
            
            For backward compatibility both modes need to be tried. 
            Stream Mode is tried first. This mode is implemented in AS Engine verion released at the beginning of 2015.
            Block (Connection) mode is tried if Stream Mode fails to initialize. It means AS Engine is of older version.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.AadAuthParams">
            <summary>
            Holds param values for AAD authentication.
            
            The parameters can be loaded from three places:
             1. from IdentityProvider connection property
                 * see method #ExtractAuthParamsFromIdentityProvider for details
             2. from local security config file 
                 * see var #LocalSecurityConfigName for details
             3. from remote security config file
                 * see var #RemoteSecurityConfigUrl for details
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AadAuthParams.Authority">
            <summary>
            Authority format if the following:
            [authority] := [instance][tenant][protocol-specific-path]
            
            E.g.:
             - [instance] := “https://login.windows.net/”
             - [tenant] := "72f988bf-86f1-41af-91ab-2d7cd011db47" | "microsoft.com" | "common"
             - [protocol-specific-path] := “/oauth2/token?api-version=1.0”
             - the whole [authority] := "https://login.windows.net/microsoft.com/oauth2/token?api-version=1.0"
            
            Most likely [protocol-specific-path] will be empty for ADAL (but it is not guaranteed), so authority will look like:
            - https://login.windows.net/microsoft.com
            - https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47
            - https://login.windows.net/common - for multi-tenant support
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AadAuthParams.IsCommonTenant">
            <summary>
            Checks whether authority tenant is "common". See Authority property description.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.IsSameInstance(System.String,System.String)">
            <summary>
            Compares only instance part of authorities. See Authority property description.
            </summary>
            <param name="authority1">first authority to compare</param>
            <param name="authority2">second authority to compare</param>
            <returns>true if authorities have the same instance</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.FindMatchingAuthParams(System.String,System.Uri)">
            <summary>
            Finds matching auth params based on data source and other connection params.
            The method tries to find auth params in the following places (in specififed order):
             1. extract auth params from identity provider connection parameter
             2. find auth params in the local secutiy config file
             3. find auth params in the remote security config file
            
            If params are found the search is stopped immediately and params are returned.
            </summary>
            <param name="identityProvider">identity provider</param>
            <param name="dataSourceUri">data source URI</param>
            <returns>AAD auth params if found, throws exception if params not found</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.IsSame(Microsoft.AnalysisServices.AadAuthParams)">
            <summary>
            Compare Authority and Application Id with values from other AadAuthParams
            </summary>
            <param name="other">other AadAuthParams</param>
            <returns>true if both are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.Copy">
            <summary>
            Returns a copy of the AadAuthParams object
            </summary>
            <returns>Copy of current AadAuthParams object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.ExtractAuthParamsFromIdentityProvider(System.String)">
            <summary>
            Tries to extract auth params from Identity Provider. There are 4 possible cases:
             - identityProvider is null -> return null
             - identityProvider is equal "authority" -> return auth params with "authority" and default application id
             - identityProvider is equal "authority,applicationId" -> return auth params with "authority" and "applicationId" (both from Identity Provider value)
             - identityProvider is not null and it is not valid authority value (see 2 cases above) -> throw validation exception
            </summary>
            <param name="identityProvider">Identity Provider value</param>
            <returns>auth params value based on the specified rules</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.FindAuthParams(System.Uri,Microsoft.AnalysisServices.AadAuthParams[])">
            <summary>
            Finds auth params in the params list. 
            An auth params with the longest matched domain postfix will be chosen.
            </summary>
            <param name="uri">current data source URI which is going to be connected</param>
            <param name="authParams">list of auth params to search</param>
            <returns>auth params if found, null if not found</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AadAuthParams.ExtractTenant(System.String)">
            <summary>
            This method extract tenant which is basically the first segment of the authoriy URI path (see Authority property description).
            This method assumes that authority is valid (validated by ValidateAuthority(string) method).
            </summary>
            <param name="authority"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.AdalRuntimeLibrary">
            <summary>
            Singleton wrapper around ADAL library to load it in runtime (via reflection).
            It loads ADAL DLLa and necedssary class types, methods and properties.
            
            Every code which uses this library should call #BeforeAdalUsage() method first 
            and call #AfterAdalUsage() method after the usage. 
            To simplify the usage there is the internal "Usage" class which implements IDisposable method 
            (it calls appropriate methods in the constructor and in the Dispose() method).
            Therefore the usage pattern for AdalRuntimeLibrary should be like this:
            
            using (new AdalRuntimeLibrary.Usage())
            {
                // use class here
            }
            
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AdalRuntimeLibrary.AdalAssemblyNames">
            <summary>
            List of assembly file names which should be loaded in runtime
            Primary assembly should go first.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AdalRuntimeLibrary.AdalAssembliesDictionary">
            <summary>
            Keeps loaded assemblies (so assemblies are loaded only once).
            Dictionary: full assembly name -> assembly
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AdalRuntimeLibrary.Instance">
            <summary>
            Returns thread-safe lazy loaded singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AdalRuntimeLibrary.BeforeAdalUsage">
            <summary>
            Subscribes to assembly resolve notifications to be able to load ADAL lib properly.
            
            ADAL consists of 2 assemblies: ActiveDirectory.dll and ActiveDirectory.WindowsForms.dll.
            Every library is loaded via Assembly.Load(byte[]) method. This method does not register this library in the app domain,
            therefore one library cannot "see" another library be default. It is needed to subscribe to AssemblyResolve event specifically and 
            return the required assembly when it is requested.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AdalRuntimeLibrary.AfterAdalUsage">
            <summary>
            Unsubscribes from assembly resolve notifications.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AdalRuntimeLibrary.#ctor">
            <summary>
            Loads ADAL library and required ADAL types.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AdalRuntimeLibrary.LoadAdalAssembly">
            <summary>
            Loads assemblies with ADAL library and required classes from the assemblies. 
            The assemblies are loaded from the embedded resources.
            </summary>
            <returns>primary ADAL assembly which contains "entry point" to ADAL</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.AdalRuntimeLibrary.CacheLocalStorage">
            <summary>
            Class handles ADAL cache storage.
            It stores the cache into user app local folder (see the variable #AdalCacheFilePath). 
            The cache file is encrypted with .NET Cryptography API for the current user only.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AdalRuntimeLibrary.CacheLocalStorage.cache">
            <summary>
            Instance of TokenCache class (from ADAL)
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AdalRuntimeLibrary.CacheLocalStorage.cleanCacheInProgress">
            <summary>
            This flag is used in BeforeWriteNotification() method.
            The intention is to always keep only one record in the cache. 
            Unfortunately ADAL does not offer this functionality out of the box.
            To achieve that we alwasy clean up the cache before something is going to be added there (in BeforeWriteNotification() method).
            
            However BeforeWriteNotification() method is called during the cache clean up itself, 
            so it will be an infinite resursion in BeforeWriteNotification() by default. 
            To "break" the recursion this flag is used. It is set to "true" before the cache clean up is called and reset to "false" afterwards.
            
            See method BeforeWriteNotification() for usage details.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AdalRuntimeLibrary.CacheLocalStorage.BeforeWriteNotification(System.Object)">
            <summary>
            Each time before it is going to write anything to cache - delete all cache records.
            The idea is to always keep only one cache record (or zero).
            
            This method is called during the cache delete operation as well, 
            but that is OK that we are cleaning it up, as it is the intention of the delete operation anyway.
            </summary>
            <param name="args">TokenCacheNotificationArgs object</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.AdalRuntimeLibrary.Usage">
            <summary>
            Disposable wrapper to simplify usage of AdalRuntimeLibrary class, so it can be used with using directive. 
            See the main comment to AdalRuntimeLibrary how to use it.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MDXMLAProp">
            <summary>
            Schema Information
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility">
            <summary>
            Utility class for classes and methods to handle AS Azure connection scenarious.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.AsAzureProtocolScheme">
            <summary>
            Data source URI protocol scheme which clearly identifies
            whether the connection is to AS Azure instances or not
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.AsAzureUriScheme">
            <summary>
            Uri scheme for AS Azure server uris
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.PbiDatasetProtocolScheme">
            <summary>
            Possible Uri protocol and endpoints for Power BI dataset connection
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.LinkReferenceUriPort">
            <summary>
            Port in link reference URI.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.PbiDedicatedRolloutUriFormat">
            <summary>
            PBI Dedicated rollout URI format
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.PbiDedicatedProtocolScheme">
            <summary>
            Data source URI protocol scheme which clearly identifies
            whether the connection is to PBI dedicated instances or not
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.PbiPublicXmlaProtocolScheme">
            <summary>
            Data source URI protocol scheme which clearly identifies
            whether the connection is a public connection to PBI Premium instances via public XMLA endpoint or not
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.LinkScheme">
            <summary>
            Data source URI protocol scheme which clearly identifies
            whether the data source is a reference link file or not
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.XmlaExecutionUriPath">
            <summary>
            URI path to the primary endpoint which is used for all XMLA connections
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.NameResolutionUriPath">
            <summary>
            URI path to the endpoint which resolves server name and returns the actual server cluster.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.DefaultPbiTenant">
            <summary>
            The default PBI tenant
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ASAzureUtility.SCS_32BIT_BINARY">
            <summary>
            binary type
            to be consistent with C++ implementation. ref: https://msdn.microsoft.com/en-us/library/windows/desktop/aa364819(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.HandlePbiDefaultTenant(System.String)">
            <summary>
            Special handling for myorg as default PBI tenant
            "myorg" will be translated to null
            </summary>
            <param name="tenant">The input tenenat</param>
            <returns>The translated tenant</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ExtractPbiPublicXmlaTenantAndWorkspace(System.String,System.String@,System.String@)">
            <summary>
            Extracts PBI premium tenant from PBI Premium data source URI to public XMLA endpoint.
            Uri is in the format of <c>powerbi://[host]/[version]/[tenant]/[workspace]</c> format. Tenant and workspace are optional
            So returned tenant is default (null) or 2nd segment of the uri
            Returned workspace is the remaining segments
            </summary>
            <param name="dataSource">The input data source</param>
            <param name="tenant">The output tenant</param>
            <param name="workspace">The output workspace</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.IsLinkProtocolScheme(System.String)">
            <summary>
            Data source URI can start with "link://", which indicates the value is a reference file.
            The content of the file will represent one single AS Azure server full URI
            </summary>
            <param name="dataSourceUri">data source URI</param>
            <returns>whether data source URI starts with "link://" or not</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ResolveServerBasedOnLinkReference(System.String)">
            <summary>
            Resolves AS Azure server based on link reference.
            1) Sends HTTP GET request to get reference file content, which represents AS Azure full server URI
            2) Validates that reference file content has 'asazure://' uri scheme.
            </summary>
            <param name="dataSourceUri">data source URI</param>
            <returns>AS Azure full server URI</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.IsValidAsAzureUri(System.String)">
            <summary>
            Whether the AS Azure server uri is valid
            </summary>
            <param name="asAzureServerUri">The AS Azure server uri to be validated</param>
            <returns>True or false it is a valid AS Azure uri</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.DataSourceUriWithOnlyServerName(System.String,System.String@)">
             <summary>
             Checks if the data source URI contains the path with only one segment and extract it.
             In such case the one path segment will be considered as AS Azure server name.
            
             For examples, this is the data source with one path segment: https://westus.asazure.windows.net/server1
             In the example "server1" will be used as a server name.
            
             Here is the example of the data source with more than one path segment:
             https://westus.asazure.windows.net/servers/server1
             For such case the method will return false.
            
             If the data source URI has empty path (e.g. like that: https://westus.asazure.windows.net/)
             the method will return false.
             </summary>
             <param name="dataSourceUri">data source URI</param>
             <param name="serverName">out param which will be populated with a server name if this method returns true</param>
             <returns>true if the data source URI contains path with one segment, false otherwise</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ConstructAsAzureSecureServerConnUri(System.String)">
             <summary>
             The secure AS Azure URL has absolute path "/webapi/xmla" and HTTPS protocol schema
             This method takes the host from the passed URL and constuct a new HTTPS URI with "/webapi/xmla" path.
            
             E.g. passed URI may look like: asazure://westus.asazure.windows.net/server1
             then the resulting URI will be: https://westus.asazure.windows.net/webapi/xmla
             </summary>
             <param name="dataSourceUri">connection URI</param>
             <returns>new URI with absolute path /webapi/xmla</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ConstructPbiPremiumServerConnUri(System.String)">
             <summary>
             The secure AS Azure URL has absolute path "/webapi/xmla" and HTTPS protocol schema
             This method takes the rollout FQDN from input and constuct a new HTTPS URI with "/webapi/xmla" path.
            
             E.g. passed FQDN may look like: westus.asazure.windows.net
             then the resulting URI will be: https://westus.asazure.windows.net/webapi/xmla
             </summary>
             <param name="rolloutFqdn">The PBI Dedicated rollout FQDN</param>
             <returns>new URI with absolute path /webapi/xmla</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ResolvePaaSConnectionEndpointDetail(Microsoft.AnalysisServices.AsInstanceType,System.Uri,System.String,System.String,System.Boolean,Microsoft.AnalysisServices.TimeoutUtils.TimeLeft@,Microsoft.AnalysisServices.TimeoutUtils.OnTimeoutAction,System.Guid)">
            <summary>
            Resolve the actual PaaS infrastructure cluster URI + core server and saves it in the cache.
            The cache value will be use until it is invalidated.
            </summary>
            <param name="asInstanceType">AS instance type</param>
            <param name="dataSourceUri">data soource URI</param>
            <param name="paasInfrastructureServerName">The PaaS infrastructure server name to connect to</param>
            <param name="restrictDatabaseName">[PBI dedicated only, otherwise null] the database to restrict to</param>
            <param name="premiumPublicXmlaEndpoint">If to resolve a PBI Premium capacity</param>
            <param name="timeLeft">connection timeout in seconds, this value will be updated at the end of execution.
            Actually 'ref' is not required, but it makes it more obvious that the value has an updated value after the method execution.</param>
            <param name="timeoutAction">action which will be called if left time pass (method takes more time than left time)</param>
            <param name="parentActivityId">parent acvitiy id for correlation</param>
            <returns>a tuple of: (1) new data source URI to an actual AS cluster, (2) server to use in that cluster</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility.NameResolutionRequest">
            <summary>
            Request object to send for name resolution endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility.NameResolutionResult">
            <summary>
            Response which is returned by name resolution endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility.ASPaaSError">
            <summary>
            ASPaaS Error
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility.PaaSConnectionDetailCache">
             <summary>
             Caches requested [data source URI + AS server name] to an URI to an actual AS cluster.
            
             E.g. the requested data source URI and AS server name may look like that:
             https://rollout1.asazure.windows.net/webapi/xmla and server1
             the resolved actual cluster URI may look like that:
             https://cluster2-rollout1.asazure.windows.net/webapi/xmla
            
             This class maintains cache dictionary:
             https://rollout1.asazure.windows.net/webapi/xmla + server1 -> https://cluster2-rollout1.asazure.windows.net/server1
            
             The cache is stored on the App Domain level,
             so it is shared across multiple XMLA libraries loaded into one application.
            
             The cache is invalidated only in case of HTTP redirect error.
             This should be a very rare case when AS server is moved to another cluster. That can happen in such scenario:
              step 1. server is created in cluster 1
              step 2. server is deleted
              step 3. server with the same name is created again, but is put to a different cluster.
             In case of such redirect the user will get an error and will need to reconnect to AS
             (see how HttpStream.GetResponseStream() method handles redirect).
             </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ASAzureUtility.PaaSConnectionDetailCache.PaaSConnectionDetail">
            <summary>
            This type is different across AdomdClient, AMO and XmlaClient since they are defined in different namespaces.
            That means we can't cache these as one type in AppDomain and load it back as a different type in different dll in same process.
            Hence, they are converted to object[] type before being saved and retrieved from AppDomain cache.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.GetExtendedErrorInfo(System.Net.HttpWebResponse)">
            <summary>
            Returns technical details information to be appeneded to the Xmla error from AS Azure server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.ThrowConnectionException(System.Net.WebException,Microsoft.AnalysisServices.AsInstanceType)">
            <summary>
            Throw Amo/Adomd/Xmla ConnectionException to wrap WebException
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.PostHttpJsonData``2(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String},``0,System.Int32)">
            <summary>
            Utility method to make HTTP GET query, load JSON data and deserialize it into an object of type T.
            </summary>
            <typeparam name="TRequest">type of request object</typeparam>
            <typeparam name="TResult">type of target object</typeparam>
            <param name="uri">URI which will be called</param>
            <param name="headers">custom headers</param>
            <param name="requestObject">Request object</param>
            <param name="timeoutMs">connection timeout in milliseconds</param>
            <returns>deserialized result</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.GetHttpDataAsString(System.Uri)">
            <summary>
            Utility method to make HTTP GET query, load data as string.
            </summary>
            <param name="uri">URI which will be called</param>
            <returns>response data as string</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.GetAppDomainLock(System.String)">
             <summary>
             This method is thread-safe within one assembly.
             However it is not thread-safe across multiple assemblies (multiple XMLA libs) within one app domain.
            
             There is extremely rare scenario when 2 different XMLA libs (e.g. AdomdClient and TOM) will be loaded into one application
             and this code will be executed in those libararies at the same exact time.
            
             That is the risk which we accept.
             </summary>
             <param name="name">name of the lock</param>
             <returns>lock object shared within app domain across multiple assemblies</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ASAzureUtility.GetGeneralInfoHeaderValue(Microsoft.AnalysisServices.UseAdalCacheType,System.String,System.Boolean)">
            <summary>
            Returns general info header value in a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.CheckBinaryType">
             <summary>
             Utility class Checking if the Current Process is 64-bit.
            
             Environment.Is64BitProcess is only available since .NET 4.0
             Here's an alternative approach, as some older version of the .NET framework are used
             </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.CacheContent">
            <summary>
            CacheContent is to load/save cache from/to an XML file. The content of this file looks like this(simplified):
            <root>
                <DataSource>asazure://aspaasstable.asazure-int.windows.net/taiyi0908</DataSource>
                <CacheDataAsString>encrypted cache data</CacheDataAsString>
            </root>
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CacheContent.DataSource">
            <summary>
            Specify the data source
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CacheContent.CacheDataAsString">
            <summary>
            Specify the encrypted data
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ColumnXmlReader.#ctor(System.String)">
            <summary>
            Constructed on top of the string, so not exceptions expected to wrap/map...
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ConnectionType">
            <summary>
            Defines how the Server object connects to the ConnectionString property.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.Native">
            <summary>
            Connection is defined as proprietary for remote connections.
            </summary>
            <!-- direct TCP (using TcpStream) -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.Http">
            <summary>
            Connects using HTTP protocol.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.LocalServer">
            <summary>
            Connection is defined as proprietary for local server.
            </summary>
            <!-- server context in stored procedures (using LocalServerStream) -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.LocalCube">
            <summary>
            Connection is defined as proprietary for local cubes.
            </summary>
            <!-- local cube file (using LocalServerStream) -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.Wcf">
            <summary>
            Connects using Wcf type.
            </summary>
            <!-- Legacy (Pre-O15) - WCFTransport -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.LocalFarm">
            <summary>
            ???
            </summary>
            <!-- Workbook inside the current (O15+) SharePoint farm -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionType.OnPremFromCloudAccess">
            <summary>
            Connection to open On-prem model from cloud
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ProtectionLevel">
            <summary>
            Enumerates the protection level associated with opening a connection to a SSAS Server.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtectionLevel.None">
            <summary>
            Requires no authentication, no signatures, and no encryption.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtectionLevel.Connection">
            <summary>
            Requires authentication, but messages are sent in clear text without signatures.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtectionLevel.Integrity">
            <summary>
            Requires authentication and uses signature to detect any tampering of the data which may have occurred between the two end points of a communication.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtectionLevel.Privacy">
            <summary>
            Requires authentication, encrypts and signs the messages being transferred between the two end points of a communication. This is the maximum level of protection.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TransportCompression">
            <summary>
            Defines the TransportCompression enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TransportCompression.Default">
            <summary>
            The compression is Default.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TransportCompression.None">
            <summary>
            The compression is None.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TransportCompression.Compressed">
            <summary>
            The compression is Compressed.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TransportCompression.Gzip">
            <summary>
            The compression is Gzip.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ProtocolFormat">
            <summary>
            Enumerates the analysis service protocol format.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtocolFormat.Default">
            <summary>
            The default protocol format.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtocolFormat.Xml">
            <summary>
            The protocol format is XML.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProtocolFormat.Binary">
            <summary>
            The protocol format is binary.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.IntegratedSecurity">
            <summary>
            Defines the type of integrated security used.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.IntegratedSecurity.Sspi">
            <summary>
            Windows Integrated Security is used to verify credentials
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.IntegratedSecurity.Basic">
            <summary>
            Username and password are used to verify credentials.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.IntegratedSecurity.Federated">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.IntegratedSecurity.ClaimsToken">
            <summary>
            Claims based tokens are used to verify credentials.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.IntegratedSecurity.Unspecified">
            <summary>
            An unspecified method is used to verify credentials.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpersonationLevel">
            <summary>
            Indicates the level of impersonation that the server can use when impersonating the client.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationLevel.Anonymous">
            <summary>
            The client is anonymous to the server. The server process cannot obtain identification information about the client and cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationLevel.Identify">
            <summary>
            The server can obtain the identity of the client. The server can impersonate the client for ACL checking but cannot access system objects as the client.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationLevel.Impersonate">
            <summary>
            The server process can impersonate the security context of the client when acting on behalf of the client. This information is obtained when the connection is established, not on every call.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationLevel.Delegate">
            <summary>
            The process can impersonate the security context of the client when acting on behalf of the client. The server process can also make outgoing calls to other servers when acting on behalf of the client.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.UseAdalCacheType">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UseAdalCacheType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UseAdalCacheType.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UseAdalCacheType.ADTranslation">
            <summary>
            ADTranslation.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.IdentityTransferToken">
            <summary>
            Represents an identity transfer token, with an optional signer.
            </summary>
            <remarks>Do not reference this member directly in your code. It supports the Analysis Services infrastructure and will be hidden in a future release.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Translation class using the specified provider and identity.
            </summary>
            <param name="identityProviderName">The name of the identity provider.</param>
            <param name="identityName">The name of the identity.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.#ctor(System.String,System.String,Microsoft.AnalysisServices.TokenSigner)">
            <summary>
            Initializes a new instance of the Translation class using the specified provider, identity and signer.
            </summary>
            <param name="identityProviderName">The name of the identity provider.</param>
            <param name="identityName">The name of the identity.</param>
            <param name="signer">The token's signer.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.TokenSigner)">
            <summary>
            Initializes a new instance of the Translation class using the specified provider and identity.
            </summary>
            <param name="identityProviderName">The name of the identity provider.</param>
            <param name="identityName">The name of the identity.</param>
            <param name="assumeDbAdmin">An indication if the identity is assumed to be an admin.</param>
            <param name="signer">The token's signer.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.#ctor(System.String,System.String,System.DateTime,System.Boolean,Microsoft.AnalysisServices.TokenSigner)">
            <summary>
            Initializes a new instance of the Translation class using the specified provider and identity.
            </summary>
            <param name="identityProviderName">The name of the identity provider.</param>
            <param name="identityName">The name of the identity.</param>
            <param name="issueDate">The token's issue date.</param>
            <param name="assumeDbAdmin">An indication if the identity is assumed to be an admin.</param>
            <param name="signer">The token's signer.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.IdentityTransferToken.IdentityProviderName">
            <summary>
            Gets the name of the identity provider.
            </summary>
            <value>The provider's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.IdentityTransferToken.IdentityName">
            <summary>
            Gets the name of the identity.
            </summary>
            <value>The identity's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.IdentityTransferToken.IssueDate">
            <summary>
            Get's the token issue date.
            </summary>
            <value>The token's issue date.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.IdentityTransferToken.AssumeDbAdmin">
            <summary>
            Gets an indication if DB scoping is in place, signals that the identity should be treated as DB admin of the scoped database.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.IdentityTransferToken.Signer">
            <summary>
            Gets the optional signer (the generated token is unsigned if not set)
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.GetTokenXml">
            <summary>
            Returns the token XML as a string.
            </summary>
            <returns>A string with the token.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.IdentityTransferToken.GetBlobForSigning">
            <summary>
            Returns a canonicalized token blob for signing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ConnectionInfo">
            <summary>
            Parses a connection string and exposes several properties associated with the connection. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.excelSessionId">
            <summary>
              An Excel-specific identifier corresponding to an active session.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.dataSourceVersion">
            <summary>
            The data source version (in SharePoint). Should match the SharePoint UIVersion,
            e.g. 2.3 (or just the integer 3, if major/minor versioning not enabled).
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.redirectorAddress">
            <summary>
            The redirector address in the form http://server/_vti_bin/PowerPivot/redirector.svc
            Only applicable when connecting to sandbox files.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.sandboxPath">
            <summary>
            The relative sandbox file path, for example "/finance/models/jul2007/sales.sbm".
            Only applicable when connecting to sandbox files.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.allowAutoRedirect">
            <summary>
            Allows auto redirect, default value is true.
            AutoRedirect does not pass "Authorization" header during the redirect
            and the request fails as unauthorized, so it is useful to be able to disable auto redirects.
            Specifically it is used for AS Azure instances.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.allowPrompt">
            <summary>
            Allows to display AAD authentication UI dialog (by ADAL) if it is required for authentication.
            If prompt is not allowed, but required for authentication, then authentication error will be thrown to the user.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.useAdalCache">
            <summary>
            Specifies whether ADAL library cache should be used.
            ADAL is used for AS Azure connections (ClaimsToken IS).
            If the user want to bypass the cache, UseADALCache connection string property can be specified.
            Cache is useful for single user applications as it is stored for a specific user.
            In case the library is used in the server, the cache should be disabled, otherwise all users will get access to the cache.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.isUseAdalCacheSpecifiedOnConnectionString">
            <summary>
            Specifies if UseADALCache connection string property was explicitly set in the connection string.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionInfo.paasInfrastructureServerName">
            <summary>
            Name of the PaaS infrastructure server to connect to.
            This property is used only during PaaS infrastructure connections.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionInfo class using a connection string.
            </summary>
            <param name="connectionString">A String that contains the connection information. </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.#ctor(Microsoft.AnalysisServices.ConnectionInfo,System.Boolean)">
            <summary>
            Copy constructor.
            </summary>
            <param name="connectionInfo">The ConnectionInfo to copy from.</param>
            <param name="noTimeout">If true, it will set the Timeout property to 0, otherwise will copy the Timeout property from the specified ConnectionInfo.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ValidateSpecifiedEffectiveUserName(System.String)">
            <summary>
            Validates the specified EffectiveUserName property. Currently this checks to see if it is not the same
            as the user opening the connection.
            </summary>
            <param name="effectiveUserName">The effective user name property value</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.CloneListDictionary(System.Collections.Specialized.ListDictionary)">
            <summary>
            Creates a copy of the dictionary. Does not clone neither keys nor values.
            </summary>
            <param name="original">list dictionary to clone</param>
            <returns>clone of the original list dictionary</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.GetOnPremConnectionString(System.String@)">
            <summary>
            Extract the external connection strings
            </summary>
            <param name="externalServiceConfiguration"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsForRedirector">
            <summary>
            Returns true if the data source is a sandbox file, so the
            connection string is to a redirector service.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsEmbedded">
            <summary>
            Returns true if the data source is IMBI embedded.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ConnectionType">
            <summary>
            Gets the connection type associated with the ConnectionInfo object.
            </summary>
            <value>A connection of type HTTP, Native Connection, or Local Cube.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Server">
            <summary>
            Gets the server name associated with a ConnectionInfo object.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.InstanceName">
            <summary>
            Gets the instance name associated with the ConnectionInfo object.
            </summary>
            <value>The name of an Analysis Services instance.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Port">
            <summary>
            Gets the port number associated with the ConnectionInfo object.
            </summary>
            <value>The port number in String format.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Location">
            <summary>
            Gets the location associated with the ConnectionInfo object.
            </summary>
            <value>The location property.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Timeout">
            <summary>
            Gets the timeout value associated with the ConnectionInfo object.
            </summary>
            <value>The Integer timeout value.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ConnectTimeout">
            <summary>
            Gets the connection timeout information associated with the ConnectionInfo object.
            </summary>
            <value>An Integer representing the number of seconds before timeout.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Catalog">
            <summary>
            Gets a catalog of databases associated with the ConnectionInfo object.
            </summary>
            <value>A database catalog.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsLightweightConnection">
            <summary>
            Gets or sets whether the connecting to the server
            should be as lightweight as possible, without additional discovers or other heavy calls.
            This flag will be set to True in case if someone is trying to connect to the AS server
            for the purpose of issuing Cancel or Trace command. This is because it must be possible
            to connect to any session (even busy session) for the purpose of cancelling the operation
            or getting the info about the progress of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.AllowPrompt">
            <summary>
            Gets an indication for the status of allow-prompt property of the ConnectionInfo object.
            </summary>
            <value>true if AllowPrompt; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.UserID">
            <summary>
            Gets the user identifier associated with the ConnectionInfo object.
            </summary>
            <value>A String with the user identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Password">
            <summary>
            Gets the password associated with the ConnectionInfo object.
            </summary>
            <value>A String with the password.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ProtectionLevel">
            <summary>
            Gets the protection level associated with a ConnectionInfo object.
            </summary>
            <value>A ProtectionLevel with the level.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ProtocolFormat">
            <summary>
            Gets the protocol format for the ConnectionInfo object.
            </summary>
            <value>A ProtocolFormat with the information.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.TransportCompression">
            <summary>
            Gets the TransportCompression associated with a ConnectionInfo object.
            </summary>
            <value>A TransportCompression with the information.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.CompressionLevel">
            <summary>
            Gets the compression level associated with the ConnectionInfo object.
            </summary>
            <value>An Integer compression level value.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IntegratedSecurity">
            <summary>
            Gets the integrated security status for the ConnectionInfo object.
            </summary>
            <value>An IntegratedSecurity with the status.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.EncryptionPassword">
            <summary>
            Gets the encryption password associated with the ConnectionInfo object.
            </summary>
            <value>The encryption password.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ImpersonationLevel">
            <summary>
            Gets the impersonation level associated with a ConnectionInfo object.
            </summary>
            <value>An ImpersonationLevel with the level.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Sspi">
            <summary>
            Gets the name of the SSPI package to use during the authentication process of the connection.
            </summary>
            <value>A string with the following possible values:Negotiate.The SSPI package is to be negotiated between the client and the service.This is the default value.KerberosKerberos is the authentication package defined to authenticate to this server.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.UseExistingFile">
            <summary>
            Gets an indication for the status of use existing file property of the ConnectionInfo object.
            </summary>
            <value>true if UseExistingFile; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.CharacterEncoding">
            <summary>
            Gets the character encoding value associated with the ConnectionInfo object.
            </summary>
            <value>The encoding scheme applied.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.PacketSize">
            <summary>
            Gets the packet size in bytes associated with a ConnectionInfo object.
            </summary>
            <value>Number of bytes.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ClientCertificateThumbprint">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ClientActivityID">
            <summary>
            Client Activity ID: defined as outermost trusted activity context.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.CurrentActivityID">
            <summary>
            Current Activity ID: Operational context (e.g. ECS SPCorrelationID) for client library.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ServiceToServiceToken">
            <summary>
            ServiceToServiceToken that needs to be added as header to HTTPRequest (For Analyze in XL connection to PBI Service Dataset).
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.Certificate">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.AuthenticationScheme">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ExtAuthInfo">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IdentityProvider">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.BypassAuthorization">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.RestrictCatalog">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.AccessMode">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.RestrictUser">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.RestrictRoles">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IntendedUsage">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ExtendedProperties">
            <summary>
            Gets the extended properties associated with the ConnectionInfo object.
            </summary>
            <value>A list of the properties.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.DataSource">
            <summary>
            Returns an original data source (which was passed in the connection string).
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.LinkReferenceRawDataSource">
            <summary>
            Returns an original value of link reference data source.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.UserIdentity">
            <summary>
            Property describing the source of the User Identity (ie where to use the WindowsIdentity or interpret the CurrentPrincipal)
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.DedicatedAdminConnection">
            <summary>
            Property indicating whether this is a dedicated admin connection
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ContextualIdentity">
            <summary>
            Property indicating contextual identity for the connection
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ConnectionActivityId">
            <summary>
            Property indicating connection activity id
            This correlation id is passed down as a candidate of x-ms-parent-activity-id for the HTTP requests that are issued during connection creation.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.GetRedirectorUrlForDatabase">
            <summary>
            Returns the url for the GetDatabase method of redirector.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.GetRedirectorUrlForRedirect(System.String,System.Boolean)">
            <summary>
            Returns the url for the RedirectRequest method of redirector.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.DatasourceUriInitializeHelper">
            <summary>
            Initialize datasource uri from existed connection info (ex. Datasource or Server).
            This function won't handle the connection for redirector. Please see OpenHttpConnection in XmlaClient.
            </summary>
            <returns>Uri of datasource</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.AcquireAADTokenAndResolveHTTPConnectionPropertiesForPaaSInfrastructure(System.Uri@,System.String@)">
            <summary>
            Acquire AAD token by Adal and resolve datasource uri and paas core server name to open http connection.
            </summary>
            <param name="dataSourceUri">(ref) datasource uri (could be generated by CloudDatasourceUriInitializeHelper</param>
            <param name="paasCoreServerName">(out) paas core server name</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.GetCloudConnectionAuthenticationPropertiesForPaaSInfrastructure(Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties@)">
            <summary>
            Get cloud connection authentication properties for public api without using Adal to get AAD token.
            </summary>
            <param name="cloudConnectionAuthenticationProperties">(out) cloud connection authentication properties</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ResolveHTTPConnectionPropertiesForPaaSInfrastructure(System.Uri@,System.Boolean,System.Boolean,System.String@,Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties@)">
            <summary>
            Resolve datasource uri and paas core server name to open http connection.
            If acquireAADToken is true, AadTokenHolder will be setup and acquire AAD token by Adal.
            If returnCloudConnectionAuthenticationProperties is true, we will prepare properties for OAuth.
            </summary>
            <param name="dataSourceUri">(ref) datasource uri (could be generated by CloudDatasourceUriInitializeHelper</param>
            <param name="acquireAADToken">acquire AAD token or not</param>
            <param name="returnCloudConnectionAuthenticationProperties">return cloud connection authentication properties or not</param>
            <param name="paasCoreServerName">(out) paas core server name</param>
            <param name="cloudConnectionAuthenticationProperties">(out) cloud connection authentication properties</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ParseStringKeyValue(System.String,Microsoft.AnalysisServices.ConnectionInfo.KeyValueCallback)">
            <devdoc>  This function parses the connection string into the passed Hashtable.  It
                    will immediately throw an exception if an invalid key is found in the string, or
                    if the string is improperly formatted.
            </devdoc>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.SkipWhiteSpace(System.String,System.Int32@)">
            <devdoc>  This function updates the passed variable 'index' to be the location of the
                    first non-space character in the passed string 'conString', starting from the
                    initial value of 'index'.  It skips tabs as well
            </devdoc>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ParseValue(System.String,System.String@,System.Int32@,System.Int32@)">
            <devdoc>  This function parses 'conString' for the first value in the string, and
                    sets the passed string, 'value', equal to it.  The value of index is updated also.
                    The value of valueIndex is also filled in - indicating the index of the value.
            </devdoc>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.InsertKeyValueIntoHash(System.String,System.String)">
            <devdoc>  This function inserts the key/value pair into the passed values Hashtable.  It will
                    throw in case of a failure.
            </devdoc>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsServerLocal">
            <summary>
            Returns 'true' if the Server part from the DataSource is local server ('.', 'local' or '(local)').
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsAsAzure">
            <summary>
            true if it is connection to AS Azure instances
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsPbiDedicated">
            <summary>
            true if it is connection to PBI dedicated instances
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsPbiPublicXmla">
            <summary>
            true if it is public XMLA connection to PBI Premium instances
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsPbiDataset">
            <summary>
            true if it is Analyze in XL connection to PBI Service Dataset
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsLinkReference">
            <summary>
            true is the data source string starts with link://
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.IsPaaSInfrastructure">
            <summary>
            true if it is connection to PaaS infrastructure instances (AS Azure or PBI dedicated or PBI Premium)
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Utility to parse a GUID.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ClientActivityIDInThreadContext">
            <summary>
            Fetch the client activity ID set in the TLS by ECS. ECS gets this from front-end services like Scheduled Data Refresh. This will be empty
            unless the ECS operation is triggered by another trusted front-end service.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.CurrentActivityIDInThreadContext">
            <summary>
            Fetch the current activity ID set in the TLS by ECS. This ID is same as SPCorrelationID.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionInfo.ActivityIDInThreadContext">
            <summary>
            Fetch the root activity ID set in the TLS by ECS. This ID is same as SPCorrelationID.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ParseShortcutForm">
            <summary>
            Tries to parse the shortcut form of a connection string (when the data source is specified directly; for AMO and XMLA, but not ADOMD.NET).
            </summary>
            <returns>True if the conenction string is the shortcut form, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.ParseBool(System.String)">
             <summary>
             If the value is set to any string value starting with the characters "Y", "y", "T", or "t",
             or any string value that can be converted to a numeric value other than 0, then it returns true.
            
             If the value is set to any other string value, including an empty string (""),
             or any string value that can be converted to a numeric value equal to 0, then it returns false.
             </summary>
             <param name="value">string value</param>
             <returns>bool value based on the rules described above</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionInfo.IsProcessWithUserInterface">
            <summary>
            Identifies whether the currect process has an user interface.
            </summary>
            <returns>true if user interface if available</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties">
            <summary>
            Class used to pass the properties of cloud connection authentication.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties.Authority">
            <summary>
            Gets or sets the authentication authority.
            </summary>
            <value>A string with the authority.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties.ResourceId">
            <summary>
            Gets or sets the authentication resource id.
            </summary>
            <value>A string with the resource id.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties.IsCommonTenant">
            <summary>
            Gets or sets is commom tenant.
            </summary>
            <value>A boolean if use common tenant.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.CloudConnectionAuthenticationProperties.ManagedTenantNameOrId">
            <summary>
            Gets or sets the managed tenant name or id.
            </summary>
            <value>A string with managed tenant name or id.</value>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaConstants.SequenceAttribute">
            <summary>
            If you ever use this property when reading/parsing xml, make sure the value is added to the name table (inside XmlaConstants class). 
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaConstants.VersionElement">
            <summary>
            If you ever use this property when reading/parsing xml, make sure the value is added to the name table (inside XmlaConstants class). 
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DimeReader">
            <summary>
            Reads DIME messages from a stream as a series of DIME records.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a DimeMessageReader object 
            </summary>
            <param name="stream">Must be an open readable stream.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeReader.ReadRecord">
            <summary>
            EXCEPTIONS: IOException, SocketException
            Returns the next record in the DIME message in read-only mode. If the DimeReader is closed then
            an InvalidOperationException will occur. When the end of
            the message is reached ReadRecord will return null. ReadRecord is a blocking i/o call in that the 
            DIME record header is read before the method returns.
            </summary>
            <returns>
            A read-only DimeRecord, or null if it's the end of the DIME message. If the record has TNF=None
            and it is the last record in the message null is also returned.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeReader.Close">
            <summary>
            EXCEPTIONS: IOException, SocketException
            Close discards the remaining records in the message before closing.
            Close is a blocking call if all records haven't been read since it will
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DimeRecord">
            <summary>
            Represents the header and payload of a DIME record. DimeRecord is not directly creatable, they are
            created by DimeReader and DimeWriter when reading and writing DIME messages. 
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.#ctor(System.IO.Stream)">
            <summary>
             Creates a read-only DimeRecord object.  
            </summary>
            <param name="stream">Must be an open and readable stream.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.#ctor(System.IO.Stream,System.Uri,System.String,Microsoft.AnalysisServices.TypeFormatEnum,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a write-only DimeRecord object.
            </summary>
            <param name="stream">stream must be open and writeable.</param>
            <param name="id">id must be null or a valid URI.</param>
            <param name="type">type must be a valid URI or a media type.</param>
            <param name="typeFormat">type format</param>
            <param name="beginOfMessage">beginOfMessage marks this record as the first record in a message.</param>
            <param name="contentLength">contentLength is the length of the records content.  If contentLength equals -1, chunking is used.</param>
            <param name="chunkSize">chunk size</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeRecord.ChunkSize">
            <summary>
            Specifies the minimum size of a chunk when writing chunked payload DIME records.
            Essentially this is the amount of buffering that will occur before the chunked 
            payload is written to the underlying stream, the actual chunk size may be
            greater. The default value for ChunkSize is specified by DimeWriter.DefaultChunkSize.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeRecord.EndOfMessage">
            <summary>
            When reading a record this property indicates that this record is the last one 
            in the message. When writing a record the message end flag is automatically set
            when the DimeWriter is closed.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeRecord.Type">
            <summary>
            Specifies the type of the data in the payload. The TypeFormat property should be used
            to interpret the Type property. For example if TypeFormat is TypeFormatEnum.MediaType
            then a valid Type would be "plain/text; charset=utf-8" or "image/jpeg".
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeRecord.Options">
            <summary>
            Returns DIME options structure that was read or the one that will be written in the output
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeRecord.TypeFormat">
            <summary>
            Specifies what format the Type property is so that the format of the payload can be 
            understood.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.Close">
            <summary>
            Closes the record. If writing a chunked record then any buffered
            data will be written out. DimeReader and DimeWriter will automatically
            close a record when starting to read or write the next one, or if
            DimeReader.Close() or DimeWriter.Close() is called.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.Close(System.Boolean)">
            <summary>
            EXCEPTIONS: IOException, SocketException
            </summary>
            <param name="endOfMessage"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.ReadHeader">
            <summary>
            Reads the header's properties from a stream
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.ReadBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            EXCEPTIONS: IOException, SocketException
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeRecord.WriteHeader(System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Writes the header to the stream.
            </summary>
            <param name="endOfRecord">end of record</param>
            <param name="endOfMessage">end of message</param>
            <param name="contentLength">content length</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.TransportCapabilities">
            <summary>
            DIME options structure
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TransportCapabilities.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TransportCapabilities.ContentTypeNegotiated">
            <summary>
            Content type negotiated flag (bit 0):
            Set by client:
            	0: clear text conversation
            	1: normal server behavior 
            Set by server (silent copying client's setting)
            	0: clear text conversation
            	1: normal server behavior
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TransportCapabilities.RequestBinary">
            <summary>
            Use binary XML for requests (bit 1)
            Never set by client
            Set by server:
            	0: binary XML for requests is not allowed
            	1: binary XML for requests is allowed
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TransportCapabilities.RequestCompression">
            <summary>
            Use compression for requests (bit 2)
            Never set by client
            Set by server:
            	0: compressed requests are not allowed
            	1: compressed requests are allowed
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TransportCapabilities.ResponseBinary">
            <summary>
            Binary XML for responses (bit 3)
            Set by client:
            	0: do not use binary XML for responses
            	1: use binary XML for responses if possible
            Set by server:
            	0: binary XML will not be used because it is disabled or it was not requested by client
            	1: binary XML will be used as it is allowed and it was requested by client
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TransportCapabilities.ResponseCompression">
            <summary>
            Responses compression (bit 4)
            Set by client:
            	0: do not compress responses
            	1: compress responses if possible
            Set by server:
            	0: compression will not be used because it is disabled or it was not requested by client
            	1: compression will be used as it is allowed and it was requested by client
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DimeWriter">
            <summary>
            Writes a DIME message as a series of DIME records to a stream.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a DimeWriter to write a DIME message to the given stream.
            </summary>
            <param name="stream">stream must be an open writeable stream</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeWriter.CreateRecord(System.Uri,System.String,Microsoft.AnalysisServices.TypeFormatEnum,System.Int32)">
            <summary>
            EXCEPTIONS: IOException, SocketException
            Returns the next record to write in the DIME message. If the length of the payload data is not
            known upfront then use contentLength==-1 to specify chunked records. Otherwise the amount of data
            written to the record must match the content length specified. When the DimeWriter is closed then the
            message end flag is automatically set on the last record. If writing in non-chunked mode then
            an empty terminating record with TNF=TypeFormatEnum.None will be automatically sent when the
            DimeWriter is closed.
            WARNING: can throw IOException.
            </summary>
            <param name="id">The unique identifier of the record in the form of a URI.</param>
            <param name="type">The type of payload data in the record. The format of this type is 
            specified by the typeFormat parameter. For example, if typeFormat is TypeFormatEnum.MediaType
            then a valid type is "plain/text; charset=utf-8"</param>
            <param name="typeFormat">The format of the type parameter.</param>
            <param name="contentLength">The count of bytes to be written to the DIME record, or -1 to specify
            writing a chunked payload record.
            </param>
            <returns>A write-only DimeRecord.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.DimeWriter.DefaultChunkSize">
            <summary>
            Specifies the default chunk size in bytes when writing chunked payload DIME records. The default
            value for the DefaultChunkSize is 1024 bytes.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.DimeWriter.Close">
            <summary>
            EXCEPTIONS: IOException, SocketException
            Closes the DIME message. If writing chunked payloads then any buffered data is written to
            the underlying stream and the chunked record and message end flags are set. If writing
            non-chunked then a terminating empty record with TNF=TypeFormatEnum.None is written to 
            end the DIME message..
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ConnectionExceptionCause">
            <summary>Information not available for this release.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionExceptionCause.Unspecified">
            <summary>Information not available for this release.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionExceptionCause.IncompatibleVersion">
            <summary>Information not available for this release.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ConnectionExceptionCause.AuthenticationFailed">
            <summary>Information not available for this release.</summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaException.Results">
            <summary>
            Gets the set of results associated with the operation.
            </summary>
            <value>The collection of results.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaException.Message">
            <summary>
            Gets the error message that explains the reason for the exception.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.HttpStream">
            <summary>
            Custom NetworkStream used for sending/receiving XML/A messages.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.IsAsAzure">
            <summary>
            Is the current connection being used to connect to
            AS Azure server from an external client application.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.IsPbiDedicated">
            <summary>
            Is the current connection being used to connect to
            PBI dedicated server from an external client application.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.IsPaaSInfrastructure">
            <summary>
            Is the current connection being used to connect to
            PaaS infrastructure server (AS Azure or PBI dedicated) from an external client application.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.IsPbiPremium">
            <summary>
            true if it is public connection to PBI Premium instances
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.RootActivityID">
             <summary>
             [PaaS infrastructure Internal Only]
             Not to be used by Amo/Xmla/Adomd/Tom clients when connecting to PaaS infrastructure server from outside.
             Applicable only for the internal communication of PaaS infrastructure,
             like for example: frontend calling backend service of PaaS infrastructure.
            
             Fetch the Root Activity ID set in the TLS by PaaS infrastructure service.
             </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.ParentActivityID">
             <summary>
             [PaaS infrastructure Internal Only]
             Not to be used by Amo/Xmla/Adomd/Tom clients when connecting to PaaS infrastructure server from outside.
             Applicable only for the internal communication of PaaS infrastructure,
             like for example: frontend calling backend service of PaaS infrastructure.
            
             Fetch the Parent Activity ID set in the TLS by PaaS infrastructure service.
             </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStream.Dispose">
            <summary>
            Closes the stream without Flushing the data.
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStream.WriteSoapActionHeader(System.String)">
            <summary>
            Writes SOAP Action header
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStream.GetExtendedErrorInfo">
            <summary>
            Returns technical details information to be appeneded to the Xmla error from AS Azure server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStream.Skip">
            <summary>
            Reads and skips the data for the current XML/A message received from the server.
            Always call this method when you are done with a server's response. Even if you entirely read
            the response or not, you still need to call this method.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.CanTimeout">
            <summary>
            Specify that this stream can timeout
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.HttpStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            This is the value that will be set in the HttpWebRequest timeout property when a new request is created.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.HttpStreamTracer">
            <summary>
            This class is responsible for tracing all the request and response
            along with headers happening via http transport in Managed code.
            This will help improve Azure debugging all over the board.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.requestFileStream">
            <summary>
            We have a file stream created for http request.
            Every time a request has been closed, we close the file
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.responseFileStream">
            <summary>
            We have a dedicated file stream for http response.
            Every time a response has been closed, we flush and close the file
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.requestHeaderSetOnce">
            <summary>
            This flag get's set once the http header has been written for request
            to the file. It's been reset every time a new request stream
            has been created.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.responseHeaderSetOnce">
            <summary>
            This flag get's set once the http header has been written for response.
            It's been reset every time a new response stream has been created.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.compressedResponse">
            <summary>
            This flag indicates whether we are dealing with compressed response.
            This also get's reset every time a new response stream has been created.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.serial">
            <summary>
            Serial indicates the number of request and it's corresponding response
            on a given http stream.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.baseFolder">
            <summary>
            This member stores the base folder all the files are written.
            This is normally c:\xmla_http_debug similar to xmla_debug
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.baseHttpStream">
            <summary>
            This member holds the base stream we are operating on
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.compressedStream">
            <summary>
            This member stores the compressed stream which is used
            for decompression the response.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.HttpStreamTracer.disposed">
            <summary>
            This property indicates whether we have disposed the component
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.#ctor(Microsoft.AnalysisServices.HttpStream)">
            <summary>
            Ctor. It stores the base http stream which will help
            us get useful information such as http web request
            and http web response
            </summary>
            <param name="baseHttpStream"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CreateHttpTraceRequestFile">
            <summary>
            This method creates the trace file for http web request
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CreateHttpTraceResponseFile">
            <summary>
            This method creates trace file for http web response
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.WriteHttpTraceResponse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is called whenever http trace response needs to be written.
            In case of compressed response. We will accumulate and then decompress
            once. 
            </summary>
            <param name="buffer">Byte Array</param>
            <param name="offset">Offset</param>
            <param name="size">Size of the content to be written</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.WriteHttpTraceError(System.Net.WebException)">
            <summary>
            This method writes the http response by capturing appropriate details
            from Web Exception.
            </summary>
            <param name="webException"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.WriteHttpTraceRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method writes the http trace request.
            </summary>
            <param name="buffer">Bytes to write</param>
            <param name="offset">offset in array</param>
            <param name="size">size of the contents to write from byte array</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CloseHttpTraceFiles">
            <summary>
            This method closes both request and response trace files
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CloseHttpTraceRequestFile">
            <summary>
            This method closes http trace request file
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CloseHttpTraceResponseFile">
            <summary>
            This method closes http trace response file
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.PrepareHttpTraceFolder">
            <summary>
            This method prepares the base debug folder.
            I'm using timestamp and instead of number, it gives more information about
            when the transaction happened.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.DecompressResponseAndWrite">
            <summary>
            This method decompresses response and write to stream
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CreateHttpTraceFile(System.Boolean)">
            <summary>
            This method creates http trace file for a given http web request or
            http web response.
            </summary>
            <param name="request">True indicates, we are dealing with httpWebRequest
            False indicates, we are dealing with httpWebResposne</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.HttpStreamTracer.CloseHttpTraceFile(System.Boolean)">
            <summary>
            This method closes the http trace file. It also flushes and closes the stream
            </summary>
            <param name="request">True indicates we are working with request stream otherwise it's response stream</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaClient">
            <summary>
            Sends and received XML/A messages. Used to comunicate with the Yukon server.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaClient.HttpStreamBufferSize">
            <summary>
            Returns the buffered size of http stream request.
            Default value is 128 KB. This can be overriden on
            the app.config by specifying the size in KB
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaClient.writer">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaClient.reader">
            <summary>For internal use.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaClient.logEntry">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.#ctor">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadSettingsFromConfiguration">
            <summary>
            This method tries to read values
            from configuration value of app.config to override default values.
            For now, I'm changing it for http stream buffer size, we
            can do the same for tcp as well or other properties.
            Note: We are reading from the application which loads the dll
            and so doesn't matter whether the dll is in GAC or copied locally
            it will work.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.TryGetConfigValue``1(System.String,``0@,System.Predicate{``0})">
            <summary>
            A generic private helper that retrieves a configuration value from the app.config
            If the return value isn't true, the result value has an undefined behavior.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <param name="configName">The requested configuration key</param>
            <param name="result">The configuration value as an out parameter</param>
            <param name="validationFunc">An optional validation method</param>
            <returns>True if configuration value was retrieved successfully, false otherwise</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaClient.IsConnected">
            <summary>
            Returns true if the XMLAClient instance has a connection opened to the server.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaClient.SessionID">
            <summary>
            Returns the ID of the session opened with the server. This is a GUID string.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaClient.ConnectionInfo">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.CheckForError(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResult,System.Boolean)">
            <summary>
            Checks, parses and returns the error (if any) from the current position in an XML/A response.
            </summary>
            <param name="reader">The XmlReader based on the XMLAStream used to receive the server responses.</param>
            <param name="xmlaResult">TO DO</param>
            <param name="throwIfError">Throw exception if errors were read.</param>
            <returns>The XMLAError if any is found at the current position, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.CheckAndGetHttpStreamSoapFault">
            <summary>
            If we are NOT HttpStream in error the function just returns.
            If we are HttpStream in error the function will check that:
             - soap fault is returned, and if yes -> read it and throw XmlaError 
               [if soap fault is invalid UNKNOWN_SERVER_RESPONSE_EXCEPTION will be thrown]
             - if returned stream is not soap fault -> original HttpStreamException will be propagated as
               CONNECTION_EXCEPTION.
            </summary>
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException"></exception>
            <exception cref="T:Microsoft.AnalysisServices.OperationException"></exception>
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException"></exception>
            <exception cref="T:System.IO.IOException">Could throw all the usual IO etc. exceptions. Regular exception handling is needed by caller.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(Microsoft.AnalysisServices.ConnectionInfo,System.Boolean)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.OpenConnection(Microsoft.AnalysisServices.ConnectionInfo,System.Boolean@)">
            <summary>
              Open a connection based on the ConnectionType property.
              Code within this function is also responsible for dealing with the identity as Authentication and Authorization are performed as part of Open***Connection.
              The relevant properties for this are RevertToProcessAccountForConnection and UseCurrentPrincipal
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(Microsoft.AnalysisServices.ConnectionInfo,System.String)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.OpenOnPremFromCloudAccessConnection(Microsoft.AnalysisServices.ConnectionInfo,System.Boolean@)">
            <summary>
            OpenOnPremFromCloudAccessConnection : Opens a connection to the external data channel using OPDA framework.
            </summary>
            <param name="connectionInfo"></param>
            <param name="isSessionTokenNeeded"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.GetHttpResponse(System.String,System.String,System.String,System.String)">
            <summary>
            Opens an HttpWebRequest to the specified url, gets the HttpWebResponse 
            and checks for errors (soap:Faults) in the response body.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.SendExtAuth(Microsoft.AnalysisServices.ConnectionInfo)">
            <summary>
            Calls the engine's xmla ExtAuth method. This will perform 2nd pass of authentication the server supports.
            </summary>
            <param name="connectionInfo">Contains all connection info (as the name says)</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Disconnect(System.Boolean)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.CloseAll">
            <summary>
            Closes and frees all objects used for the comunication with the server. This is usually
            called from CloseSession method.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.StartMessage(System.String)">
            <summary>
            Starts a new XML/A message (that will either be sent to server or saved to log).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.StartMessage(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts a new XML/A message (that will either be sent to server or saved to log).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.EndMessage">
            <summary>
            Ends the current message (that will either be sent to server or saved to log).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteStatement(System.String)">
            <summary>
            Writes (directly to the server or in the log) the statement part of the command
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteStartCommand(System.Collections.IDictionary@)">
            <summary>
            Writes (directly to the server or in the log) the beginning of a new XML/A Command.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteProperties(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteXmlaProperty(System.Collections.DictionaryEntry)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteParameters(System.Data.IDataParameterCollection)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteRestrictions(System.Collections.IDictionary)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteStartDiscover(System.String,System.String)">
            <summary>
            Writes the beginning of a Discover call. This calls are directly sent to server, they cannot
            be captured in the log.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteEndDiscover(System.Collections.Specialized.ListDictionary)">
            <summary>
            Writes the end of the current Discover call. This is written directly to the server, cannot
            be captured in the log.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteEndDiscover(System.Collections.Specialized.ListDictionary,System.Collections.IDictionary)">
            <summary>
            Writes the end of the current Discover call. This is written directly to the server, cannot
            be captured in the log.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadToXmlaResponse(System.Xml.XmlReader)">
            <summary>
            Check if there are errors in the response and read the Fault contents, and read up to the ExecuteResponse/DiscoverResponse otherwise.
            </summary>
            <returns>
            XmlaResult with the Fault element contents, or null
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.SendExecuteAndReadResponse(System.Boolean,System.Boolean,System.Boolean)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadExecuteResponsePrivate(System.Xml.XmlReader,System.Boolean,Microsoft.AnalysisServices.XmlaResultCollection,Microsoft.AnalysisServices.XmlaResult)">
            <summary>
            Does NOT wrap exceptions.
            </summary>
            <param name="reader"></param>
            <param name="skipResults"></param>
            <param name="results"></param>
            <param name="xmlaResult"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.IsMultipleResult(System.Xml.XmlReader)">
            <summary>
            Does NOT wrap exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.IsAffectedObjects(System.Xml.XmlReader)">
            <summary>
            Does NOT wrap exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadMultipleResults(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResultCollection,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadRoot(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResult,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadEmptyRoot(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResult,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.IsEndElement(System.Xml.XmlReader,System.String,System.String)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.CheckAndSkipXsdSchema(System.Xml.XmlReader)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadRowsetRoot(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResult,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadDatasetRoot(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaResult,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.CancelCommand(System.String)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.PopulateActivityIDAndRequestIDIntoProperties(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Populate activityID and requestID into properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.SendMessage(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sends a previously composed message to the server.
            </summary>
            <returns>An XmlTextReader used to parse the server response.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.ReadUptoRoot(System.Xml.XmlReader)">
            <summary>
            Reads the response upto the Root tag.
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <param name="reader"></param>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.XmlaException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.EndReceival">
            <summary>
            Ends the receiving of a server response.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.EndReceival(System.Boolean)">
            <summary>
            Ends the receiving of a server response.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.GetTokenFromEnvelopeHeader(System.Xml.XmlReader)">
            <summary>
            This method retrieves the embedded blob from the Token Response.
            If the token is not right format then it will be returned as as empty.
            </summary>
            <param name="reader"></param>
            <returns>Session Token, if there is any error it returns empty</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaClient.CommandFormat">
            <summary>
            Format in which command text can be passed to XmlaClient
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaClient.CaptureXml">
            <summary>
            If set to true, the all messages except Discover calls will be saved to the CaptureLog rather than
            being sent to server.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaClient.CaptureLog">
            <summary>
            The log for messages. To save messages in this log, set to true the CaptureXML property.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(System.String)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(System.String,System.Boolean)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(System.String,System.String)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Connect(Microsoft.AnalysisServices.ConnectionInfo)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Disconnect">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.Reconnect">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteProperties(System.String,System.Boolean)">
            <summary>WARNING: this doesn't wrap exceptions.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.BinaryImageLoad(System.String,System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Image load using binary xml
            </summary>
            <param name="databaseName">database name</param>
            <param name="databaseId">database ID</param>
            <param name="sourceAbfStream">abf stream for image load</param>
            <param name="allowOverwrite">allow overwrite flag</param>
            <param name="readWriteMode">read write mode</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteContent(System.IO.Stream,System.Byte[],System.String,Microsoft.AnalysisServices.BinaryXmlTokenType)">
            <summary>
            Write content into the xmla stream. This is used for binary xml generation
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteAbfContent(System.IO.Stream,System.Byte[],System.IO.Stream,Microsoft.AnalysisServices.BinaryXmlTokenType)">
            <summary>
            Write abf content into the xmla stream. This is used for binary xml generation
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteLength(System.IO.Stream,System.UInt64)">
            <summary>
            Write length of content into the xmla stream. This is used for binary xml generation
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.WriteStartToken(System.IO.Stream,Microsoft.AnalysisServices.BinaryXmlTokenType)">
            <summary>
            Write the token byte based on the type into the xmla stream. This is used for binary xml generation
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaClient.GetCommandFormat(System.String)">
            <summary>
            Gets the format of the given command (XML vs JSON)
            </summary>
            <param name="commandText">Command text</param>
            <returns>Format of the command</returns>
            <remarks>
            This method takes a decision based on first non-whitespace character in the string.
            </remarks>
        </member>
        <member name="T:Microsoft.AnalysisServices.WcfStream">
            <summary>
            Custom NetworkStream used for sending/receiving XML/A messages.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.WcfStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>        
        </member>
        <member name="M:Microsoft.AnalysisServices.WcfStream.WriteSoapActionHeader(System.String)">
            <summary>
            Writes SOAP Action header
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.AnalysisServices.WcfStream.Skip">
            <summary>
            Reads and skips the data for the current XML/A message received from the server.
            Always call this method when you are done with a server's response. Even if you entirely read 
            the response or not, you still need to call this method.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.MemoryXmlaStream">
            <summary>
            This is a simple implementation of In Memory Xmla Stream
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.MemoryXmlaStream.baseStream">
            <summary>
            This is the base memory stream which holds the content.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.MemoryXmlaStream.streamDataType">
            <summary>
            This property stores the type of stream we are dealing with
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MemoryXmlaStream.#ctor(Microsoft.AnalysisServices.DataType)">
            <summary>
            This property disposes memory xmla stream
            </summary>
            <param name="streamDataType">Stream Data Type</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MemoryXmlaStream.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.RowsetFormatter">
            <summary>
            Summary description for RowsetFormatter.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RowsetFormatter.PopulateDataset(System.Xml.XmlReader,System.String,System.String,Microsoft.AnalysisServices.InlineErrorHandlingType,System.Data.DataTable)">
            <summary>
            Caller must be prepared to handle exceptions.... and call Disconnect or EndReceival on xmlaClient accordingly.
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.ReadRowsetProperty(System.Xml.XmlReader,System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.CheckException(System.Xml.XmlReader)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.ReadDataSetProperty(System.Xml.XmlReader,System.Type)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetElementType(System.Xml.XmlReader)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetElementType(System.Xml.XmlReader,System.String,System.Type)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetElementType(System.Xml.XmlReader,System.String,System.Data.DataColumn)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetColumnType(System.Data.DataColumn)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.SetColumnType(System.Data.DataColumn,System.Type)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetColumnNamespace(System.Data.DataColumn)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.SetColumnNamespace(System.Data.DataColumn,System.String)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetColumnXsdTypeName(System.Data.DataColumn)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.SetColumnXsdTypeName(System.Data.DataColumn,System.String)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetColumnCaptionFromSchemaElement(System.Xml.Schema.XmlSchemaElement)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetConvertToLocalTime(System.Data.DataColumn)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.SetConvertToLocalTime(System.Data.DataColumn,System.Boolean)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.GetSchemaElementTypeAndName(System.Xml.Schema.XmlSchemaElement,System.Type@,System.String@)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.IsNestedRowsetColumn(System.Xml.Schema.XmlSchemaElement)">
            <summary>
            No connection related exception expected.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.LoadSchema(System.Xml.XmlReader,Microsoft.AnalysisServices.FormattersHelpers.ColumnDefinitionDelegate)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.FormattersHelpers.LoadSchema(System.Xml.XmlReader,Microsoft.AnalysisServices.FormattersHelpers.ColumnDefinitionDelegate,System.Boolean)">
            <summary>
            Caller should be prepared to handle some exceptions and call Disconnect(false) or EndReceival on the XmlaClient.]
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="T:Microsoft.AnalysisServices.SecurityProtocolTypeExtensions">
            <summary>
            SSL protocol extension for TLS 1.1 and 1.2
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.SecurityProtocolTypeExtensions.Tls12">
            <summary>
            Add TLS 1.2 definition for SSL Protocol
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.SecurityProtocolTypeExtensions.Tls11">
            <summary>
            Add TLS 1.1 definition for SSL Protocol
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SecurityProtocolTypeExtensions.EnableStrongSecurityProtocol">
            <summary>
            Enable higher protocols depending on what's already set.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TcpStream">
            <summary>
            Custom stream over TCP used for sending/receiving XML/A messages.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpStream.Skip">
            <summary>
            Reads and skips the data for the current XML/A message received from the server.
            Always call this method when you are done with a server's response. Even if you entirely read 
            the response or not, you still need to call this method.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TcpSecureStream.streamSizes">
            <summary>
            In TLS Stream mode this data will be used for encryption/decryption.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpSecureStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpEncryptedStream.CleanSecurityBuffers(Microsoft.AnalysisServices.SecurityBufferClass[])">
            <remarks>method is static to not reference instance variables accidentally</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpEncryptedStream.ReturnAvailableDecryptedData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Method should be invoked if decrypted data from previous calls was accumulated in TLS Stream mode.
            
            In this case method will propagate buffer and return number of bytes written.
            
            It also keeps track of decrypted buffers.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TcpEncryptedStream.ExtractDecryptedAndExtraData(Microsoft.AnalysisServices.SecurityBufferClass[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Go over securityBuffers returned after successfull call to SSPIWrapper.DecryptMessage and
            save decripted and extra data into internal class instance variables.
            
            IMPORTANT:
            Method changes state of the class instance
            </summary>
            <returns>number of bytes decrypted and copied into readBuffer</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.TimeoutUtils">
            <summary>
            Utility clas which incapsulates classes and methods to handle timeouts
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TimeoutUtils.TimeLeft">
            <summary>
            Wrapper class to keep time left information.
            If time is set to 0 during the instance creation, it is treated as infinite time 
            and the time left value is never updated anymore.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TimeoutUtils.TimeLeft.Infinite">
            <summary>
            Whether left time is infinite or not
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TimeoutUtils.TimeRestrictedMonitor">
            <summary>
            This class restricts the code execution by timeout.
            If the code execution takes more time than the specified timeout OnTimeoutAction will be thrown at the end.
            This class does not interrupt the code execution and it will throw exception only at the end.
            
            It always updates TimeLeft object with the correct time left at the end.
            
            The usage pattern is:
            
            using (new TimeRestrictedMonitor(timeLeft, timoutAction) {
               // do stuff
            }
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TypeFormatEnum">
            <summary>
            Specifies possible Type formats as defined in the DIME specification. For example,
            if the type format is TypeFormatEnum.MediaType then a valid Type would be
            "plain/text; charset=utf-8" or "image/jpeg".
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TokenSigner">
            <summary>
            TokenSigner contains a private key to sign the Identity Transfer tokens,
            as well as the hash algorithm to use for signing.
            It encapsulates all there is to know in order to sign the token.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TokenSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.AnalysisServices.SignatureHashAlgorithm)">
            <summary>
            Initializes a new instance of the TokenSigner class with a specified certificate and signature algorithm information.
            </summary>
            <param name="certificate">The certificate to use.</param>
            <param name="hashAlgorithm">The algorithm to use.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.TokenSigner.#ctor(Microsoft.AnalysisServices.SigningKey,Microsoft.AnalysisServices.SignatureHashAlgorithm)">
            <summary>
            Initializes a new instance of the TokenSigner class with a specified key and signature algorithm information.
            </summary>
            <param name="key">The key to use.</param>
            <param name="hashAlgorithm">The algorithm to use.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.TokenSigner.CertificateThumbprint">
            <summary>
            Signing certificate thumbprint as byte array
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TokenSigner.DigestMethod">
            <summary>
            Hash algorithm name used for signing
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.TokenSigner.Sign(System.Byte[])">
            <summary>
            Signs the provided blob and returns a signature.
            </summary>
            <param name="data">The data to sign.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.SigningKey">
            <summary>
            Represents the private key used in token signing.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SigningKey.CreateFromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a SigningKey instance based on the provided certificate.
            </summary>
            <param name="certificate">The certificate to use for signing.</param>
            <returns>The SigningKey created.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.SigningKey.KeyHandle">
            <summary>
            Native CNG NCrypt key handle
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.SigningKey.Certificate">
            <summary>
            X509 certificate which has the associated private key
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.SigningKey.CertificateThumbprint">
            <summary>
            Certificate thumbprint as byte array
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SigningKey.Sign(System.Byte[],Microsoft.AnalysisServices.SignatureHashAlgorithm)">
            <summary>
            Signs the data blob using the specified hash algorithm
            </summary>
            <param name="data">The data to sign.</param>
            <param name="hashAlgorithm">The algorithm to use.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.RsaSigningKey">
            <summary>
            SigningKey implementation for the RSA family of algorithms.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DsaSigningKey">
            <summary>
            SigningKey implementation for the DSA/ECDSA family of algorithms.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.SignatureHashAlgorithm">
            <summary>
            Describes a signature hash algorithm and serves as a factory of HashAlgorithm instances.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.SignatureHashAlgorithm.Name">
            <summary>
            Algorithm name (SHA256, SHA384, SHA512, etc).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SignatureHashAlgorithm.CreateSha256">
            <summary>
            Creates a factory for SHA256 algorithms.
            </summary>
            <returns>The SignatureHashAlgorithm created.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.SignatureHashAlgorithm.CreateSha384">
            <summary>
            Creates a factory for SHA384 algorithms.
            </summary>
            <returns>The SignatureHashAlgorithm created.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.SignatureHashAlgorithm.CreateSha512">
            <summary>
            Creates a factory for SHA512 algorithms.
            </summary>
            <returns>The SignatureHashAlgorithm created.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.SafeCryptKeyHandle">
            <summary>
            Wraps the CNG NCrypt key handle as a safe handle.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.CertUtils">
            <summary>
            Certificate utils.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.CertUtils.LoadCertificateByThumbprint(System.String,System.Boolean)">
            <summary>
            Loads the certificate given its thumbprint.
            </summary>
            <param name="thumbprint">the thumbrint of the certificate.</param>
            <param name="requirePrivateKey">An indication if a private key is required.</param>
            <returns>The X509Certificate2 created.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.CngNative">
            <summary>
            P/Invoke for the CNG API.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.IXmlaDataReaderOwner">
            <summary>
            Callback interface invoked by XmlaDataReader
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.#ctor(Microsoft.AnalysisServices.XmlaDataReader)">
            <summary>
            Not excpected to produce any connection related exceptions...
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.#ctor(Microsoft.AnalysisServices.XmlaDataReader,Microsoft.AnalysisServices.XmlaDataReader)">
            <summary>
            Not excpected to produce any connection related exceptions...
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.CollectTopLevelAttributes">
            <summary>
            Collect attributes from the toplevel element (results, root, AffectedObjects)
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.EnsureResultForNewRowset">
            <summary>
            This is called whenever the reader starts a new rowset: that means a new
            XmlaResult, unless this is an embedded reader, in which case all messages
            go into the parent collection, and unless we are reading AffectedObjects
            element, in which case there is just one result (even though there may
            be many rowsets.)
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.CheckForMessages">
            <summary>
            If the reader is at the Messages element, read those and add them to the current result
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.InternalNextResult(System.Boolean)">
            <summary>
            Start reading the next 'root' element containing the result of a
            single Batch statement.
            </summary>
            <param name="first">Whether this is the internal NextResult() call
            done from the reader initialization code.</param>
            <returns>False if there are no more results to read</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.InternalInitialize(System.Xml.XmlReader,System.Data.CommandBehavior,Microsoft.AnalysisServices.IXmlaDataReaderOwner)">
            <summary>
            Should not throw any connection related exceptions....
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.GetOrdinalFromXmlName(System.String)">
            <summary>
            Should not throw any connection related exceptions....
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.GetRowXmlValues(System.Object[])">
            <summary>
            Wraps/maps exceptions
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.SequentialReadXmlValue(System.Int32)">
            <summary>
            Wraps/maps exceptions
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.ReadColumnValue(System.Int32)">
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.XmlaException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.ThrowIfInlineError(System.Object)">
            <exception cref="T:Microsoft.AnalysisServices.OperationException">Inline error from the server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.BeginNewRow">
            <summary>
            Wraps/maps exceptions
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.CompletePreviousRow">
            <summary>
            Wraps/maps exceptions
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.CreateSchemaTable">
            <summary>
            Should not throw any connection related exceptions....
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.GenerateSchemaForEmptyResult">
            <summary>
            Generate a schema table to return when the reader is at an empty result:
            in that case we pretend that the reader is looking at an empty rowset with
            no columns.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.LoadResponseSchema">
            <summary>
            Load the top level schema -- stops at the 'row' complexType,  which describes the
            top level columns
            </summary>
            <exception cref="T:System.IO.IOException">Meaning connection is broken.</exception> 
            <exception cref="T:System.Xml.XmlException">Meaning parsing failed and server response is considered invalid.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.XmlaException">Meaning server sent an error in response.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ConnectionException">Connection broken or failed.</exception> 
            <exception cref="T:Microsoft.AnalysisServices.ResponseFormatException">Invalid response from server.</exception> 
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.ColumnDef(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.Object,System.String)">
            <summary>
            Only called from LoadResponseSchema...
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.InternalRead">
            <summary>
            Wraps/maps exceptions
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.ResetCurrentRowCache">
            <summary>
            Should not throw any connection related exceptions....
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaDataReader.ReOpen">
            <summary>
            Should not throw any connection related exceptions....
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaReader.#ctor(System.Xml.XmlReader,Microsoft.AnalysisServices.XmlaClient,Microsoft.AnalysisServices.NamespacesMgr)">
            <summary>
            
            </summary>
            <param name="client">XmlaClient that uses this reader. Can be null.</param>
            <param name="namespacesManager"></param>
            <param name="baseReader"></param>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaReader.MaskEndOfStream">
            <summary>
            get -- will get whether we are set to mask the end of stream [after closing root].
            set -- will set the flag to mask the end of stream.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaReader.ReturnReader(System.Boolean)">
            <summary>
            will call EndReceival as the reader returned.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaReader.ClientLocaleHelper">
            <summary>
            Internal class to update ThreadUILocale to get the resource string in correct locale.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaResult">
            <summary>
            Represent the result of a single XMLA command.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaResult.Value">
            <summary>
            Gets the specified value.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaResult.Messages">
            <summary>
            Gets the set of messages.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaMessage">
            <summary>
            Represents a base class for XMLA messages.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessage.Description">
            <summary>
            Gets the description of the message.
            </summary>
            <value>A String with the description.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>A String with the source.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessage.HelpFile">
            <summary>
            Gets the help-file associated with the message.
            </summary>
            <value>A string with the help file.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessage.Location">
            <summary>
            Gets the location information associated with the message.
            </summary>
            <value>An XmlaMessageLocation object with the location information.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaError">
            <summary>
            Represents an error returned by Analysis Services server (in XML/A protocol).
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaError.ErrorCode">
            <summary>
            Gets the identification code for the error represeted by the XmlaError object.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaError.CallStack">
            <summary>
            Gets the call stack of the current error.
            </summary>
            <value>A String with the call stack.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaError.ErrorType">
            <summary>
            Gets the type of the error.
            </summary>
            <value>An integer with the type of the error.</value>
            <remarks>The value of 0 indicates there is no current classification for this error,
            the value of 1 indicates that the error is caused by incorrect usage and value of 2 indicates the error is caused by unexpected server behavior.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaError.IsPrimary">
            <summary>
            Gets an indication if the current error is the primary error.
            </summary>
            <value>True if the current error is the primary error; False otherwise.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaMessageLocation">
            <summary>
            Represents the location associated with an XMLA message.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.StartLine">
            <summary>
            Gets the line number for the starting point in the XMLA command that the message refers to.
            </summary>
            <value>An Int32 with the line number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.StartColumn">
            <summary>
            Gets the column number for the starting point in the XMLA command that the message refers to.
            </summary>
            <value>An Int32 with the column number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.EndLine">
            <summary>
            Gets the line number for the ending point in the XMLA command that the message refers to.
            </summary>
            <value>An Int32 with the line number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.EndColumn">
            <summary>
            Gets the column number for the ending point in the XMLA command that the message refers to.
            </summary>
            <value>An Int32 with the column number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.LineOffset">
            <summary>
            Gets the number of characters from the beginning of the stream to the beginning of the Start line.
            </summary>
            <value>An Int32 with the offset.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.TextLength">
            <summary>
            Gets the number of characters in the message location, between Start and End.
            </summary>
            <value>An Int32 with the length.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.SourceObject">
            <summary>
            Gets the object that has the error.
            </summary>
            <value>An XmlaLocationReference with the source object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.DependsOnObject">
            <summary>
            Gets the object on which the SourceObject depends in the case of a dependency error.
            </summary>
            <value>An XmlaLocationReference with the depends-on object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageLocation.RowNumber">
            <summary>
            Gets the number of rows in which the error occurred is provided.
            </summary>
            <value>An Int32 with the number of rows.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaLocationReference">
            <summary>
            Represents the XMLA location reference of an entity.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.Dimension">
            <summary>
            Gets the dimension that is referenced.
            </summary>
            <value>A String with the dimension.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.Hierarchy">
            <summary>
            Gets the hierarchy that is referenced.
            </summary>
            <value>A String with the hierarchy.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.Attribute">
            <summary>
            Gets the attribute that is referenced.
            </summary>
            <value>A String with the attribute.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.Cube">
            <summary>
            Gets the cube structure that is referenced.
            </summary>
            <value>A String with the hierarchy.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.MeasureGroup">
            <summary>
            Gets the measure-group that is referenced.
            </summary>
            <value>A String with the group.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.MemberName">
            <summary>
            Gets the name of the member that is referenced.
            </summary>
            <value>A String with the hierarchy.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.Role">
            <summary>
            Gets the role that is referenced.
            </summary>
            <value>A String with the role.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.TableName">
            <summary>
            Gets the name of the table that is referenced.
            </summary>
            <value>A String with the table's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.ColumnName">
            <summary>
            Gets the name of the column that is referenced.
            </summary>
            <value>A String with the column's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.PartitionName">
            <summary>
            Gets the name of the partition that is referenced.
            </summary>
            <value>A String with the partition's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.MeasureName">
            <summary>
            Gets the name of the measure that is referenced.
            </summary>
            <value>A String with the measure's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.CalculationItemName">
            <summary>
            Gets the name of the calculation item that is referenced.
            </summary>
            <value>A String with the calculation item's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaLocationReference.RoleName">
            <summary>
            Gets the name of the role that is referenced.
            </summary>
            <value>A String with the role's name.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaWarning">
            <summary>
            Represents a warning returned by Analysis Services server (in XML/A protocol).
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaWarning.WarningCode">
            <summary>
            Gets the identification code for the warning represeted by the XmlaWarning object.
            </summary>
            <value>The warning code.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaMessageCollection">
            <summary>
            Represents a collection of XmlaMessage objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageCollection.Count">
            <summary>
            Gets the number of messages contained in the collection.
            </summary>
            <value>The messages' count.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaMessageCollection.Item(System.Int32)">
            <summary>
            Gets the message at the specified index.
            </summary>
            <value>The XmlaMessage at the specified index.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaResultCollection">
            <summary>
            Represents a collection of XmlaResult objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaResultCollection.Count">
            <summary>
            Gets the number of results contained in the collection.
            </summary>
            <value>The results' count.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaResultCollection.Item(System.Int32)">
            <summary>
            Gets the result at the specified index.
            </summary>
            <value>The XmlaResult at the specified index.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaResultCollection.ContainsErrors">
            <summary>
            Gets an indication if the set of results contains one or more errors.
            </summary>
            <value>A Boolean with the indication.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaStream">
            <summary>
            Custom NetworkStream used for sending/receiving XML/A messages.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaStream.disposed">
            <summary>
            This field should be set to 'true' by the 'Dispose' method; 'Write', 'Read', 'Skip' and 
            'WriteEndOdmessage' methods should throw 'ObjectDisposedException' when 'true'.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaStream.isCompressionEnabled">
            <summary>
            This flag indicates whether compression is enabled.
            Currently it is used only for http stream.
            If it is enabled, gzip flag has been set
            on the header and gzip buffered stream has been used.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaStream.isSessionTokenNeeded">
            <summary>
            This flag indicates whether the stream requires
            Session Token
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaStream.SessionID">
            <summary>
            This property tells the SessionID we are operating on.
            Session ID will be set after Beginsession call.
            We send this SessionID as part of http header and it is currently
            used only in http header
            If SessionID is changed for the stream, http stream will read it
            from the property before sending it
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaStream.IsSessionTokenNeeded">
            <summary>
            This property indicates whether Session Token
            is needed if so http transport layer will
            add corresponding header to the http transport
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaStream.IsCompressionEnabled">
            <summary>
            This property indicates whether the stream
            has to be compressed. It is currently used only
            in http stream. As soon this flag has been
            set we enable it on the http header and perform
            gzip compression.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.LocalServerStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.LibraryHandle.GetDelegate(System.String,System.Type)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.SetDelegates">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDOpenLocal(System.String,Microsoft.AnalysisServices.MsmdlocalWrapper.OpenFlags,System.String,System.String)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDCloseHandle(System.IntPtr)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDOpenRequest(System.IntPtr,Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDLOCAL_REQUEST_ENCODING,System.UInt32)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDSendRequest(System.IntPtr)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDWriteDataEx(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDReceiveResponse(System.IntPtr)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.MsmdlocalWrapper.MSMDReadDataEx(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.LocalCubeStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.SetDelegates">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.CompressInit(System.Int32,System.Int32)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.Compress(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.CompressClose(System.IntPtr)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.DecompressInit">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.Decompress(System.IntPtr,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.XpressMethodsWrapper.DecompressClose(System.IntPtr)">
            <exception cref="T:System.ComponentModel.Win32Exception">Win32Exception</exception>
        </member>
        <member name="T:Microsoft.AnalysisServices.CompressedStream">
            <summary>
            Use CompressedStream instead of CompressedReaderStream
            Any public method of stream can throw XmlaStreamException
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CompressedStream.IsCompressionEnabled">
            <summary>
            This method sets whether compression has been enabled on the base stream
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CompressedStream.SessionID">
            <summary>
            This method sets the session id to the base stream
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.CompressedStream.SetBaseXmlaStream(Microsoft.AnalysisServices.XmlaStream)">
            <exception cref="T:Microsoft.AnalysisServices.XmlaStreamException">in case of any error.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.CompressedStream.Dispose">
            <summary>
            Closes the stream without Flushing the data. 
            This method SHOULD NOT THROW non-critical exceptions (like IOException, SocketException, Win32Exception).
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Hosting.IHostableComponent">
            <summary>
            Represents an interface for the hostable components.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Hosting.IHostableComponent.Host">
            <summary>
            Gets or sets the host for IHostableComponent.
            </summary>
            <value>The host for IHostableComponent.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.Hosting.IHostConfigurationSettings">
            <summary>
            Represents a host configuration settings.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostConfigurationSettings.SetSetting(System.String,System.Object,System.String[])">
            <summary>
            Sets the configuration setting.
            </summary>
            <param name="settingName">The name of the setting.</param>
            <param name="settingValue">The setting value.</param>
            <param name="indexes">An array of indexes.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostConfigurationSettings.GetSetting(System.String,System.String[])">
            <summary>
            Retrieves a configuration setting.
            </summary>
            <param name="settingName">The name of the setting.</param>
            <param name="indexes">An array of indexes.</param>
            <returns>A configuration setting.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Hosting.IHostMaterializationService">
            <summary>
            Provides a host materialization service.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostMaterializationService.MaterializeComponent(System.ComponentModel.IComponent,System.Object)">
            <summary>
            Materializes the component in the service.
            </summary>
            <param name="component">The component.</param>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostMaterializationService.DematerializeComponent(System.ComponentModel.IComponent,System.Object)">
            <summary>
            Dematerializes the component in the service.
            </summary>
            <param name="component">The component.</param>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostMaterializationService.UpdateMaterialization(System.ComponentModel.IComponent,System.Boolean)">
            <summary>
            Updates the materialization service.
            </summary>
            <param name="component">The component.</param>
            <param name="updatePermanently">true to update permanently; otherwise, false.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.Hosting.IHostMaterializationService.SitingBlocked">
            <summary>
            Gets whether the siting is blocked.
            </summary>
            <value>true if the siting is blocked; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.Hosting.IHostOnDemandLoader">
            <summary>
            Represents an on-demand host loader.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IHostOnDemandLoader.LoadCollectionOnDemand(System.Object,System.Object)">
            <summary>
            Loads requested objects in the collection.
            </summary>
            <param name="loadableCollection">A collection of loadable objects.</param>
            <param name="context">The loading context.</param>
            <returns>An indication of the loading result.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Hosting.IOnDemandLoadableCollection">
            <summary>
            Displays a collection of on demand loadable objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Hosting.IOnDemandLoadableCollection.Loaded">
            <summary>
            Gets whether the collection is loaded.
            </summary>
            <value>true if the collection is loaded; otherwise, false.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Hosting.IOnDemandLoadableCollection.BlockOnDemandLoad(System.Boolean)">
            <summary>
            Blocks the on demand load that is associated with IOnDemandLoadableCollection.
            </summary>
            <param name="block">true to block; otherwise, false.</param>
            <returns>The object to block.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.AmoDataAdapter">
            <summary>
            Represents a set of SQL commands and a database connection that are used to fill the DataSet and update an Analysis Services database.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataAdapter.#ctor(Microsoft.AnalysisServices.AmoDataReader)">
            <summary>
            Initializes a new instance of an AmoDataAdapter object.
            </summary>
            <param name="reader">Specifies an instance of an AmoDataReader object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataAdapter.Fill(System.Data.DataSet)">
            <summary>
            Adds or refreshes rows in a specified range in the DataSet to match those in the data source.
            </summary>
            <param name="dataSet">Represents an in-memory cache of data.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.AmoDataReader">
            <summary>
            Represents an object that retrieves a read-only, forward-only stream of data from an Analysis Services database.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.RowsetName">
            <summary>
            Gets the name of the current rowset.
            </summary>
            <value>The name of the rowset.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.Results">
            <summary>
            Gets the collection of results for the current object, containing warnings and informational messages.
            </summary>
            <value>The collection of results for the current object.</value>
            <remarks>
            In case of parsed results or root element, it has the same format as the collection
            returned from Server.Execute(): one result per rowset, each result contains the messages
            from the corresponding rowset. If AffectedObjects element was parsed, then there
            will be exactly one result.
            This property may be used only after the data reader has finished parsing the output.
            </remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.TopLevelAttributes">
            <summary>
            Gets the top level attributes for this property.
            </summary>
            <value>The top level attributes for this property.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.Dispose">
            <summary>
            Releases all unmanaged resources that are used by the site collection object.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.Depth">
            <summary>
            Gets the depth of nesting for the current row.
            </summary>
            <value>The level of nesting.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>The number of columns in the current row.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.IsClosed">
            <summary>
            Gets a value that indicates whether the AmoDataReader is closed.
            </summary>
            <value>true if the AmoDataReader is closed; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>The number of rows changed, inserted, or deleted.</value>
            <!--
            The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.
            -->
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.Close">
            <summary>
            Closes a AmoDataReader object.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the AmoDataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.NextResult">
            <summary>
            Advances the data reader to the next result.
            </summary>
            <returns>true if there are more result sets; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.Read">
            <summary>
            Determines a value that indicates whether the AmoDataReader advances to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format given the column ordinal.
            </summary>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the specified column in its native format.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetData(System.Int32)">
            <summary>
            Retrieves the data of the current object.
            </summary>
            <param name="ordinal">The zero-based ordinal position of the column to find.</param>
            <returns>The data of the current object.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.AmoDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column in its native format given the column name.
            </summary>
            <param name="columnName">The name of the column.</param>
            <returns>The value of the specified column in its native format.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a byte.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataIndex">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferIndex">The index within the buffer where the write operation is to start.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataIndex">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of characters.</param>
            <param name="bufferIndex">The index within the buffer where the write operation is to start.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type name for the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <returns>The data type name for the specified index.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="ordinal">The ordinal of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>he value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type information corresponding to the type of Object.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The Type information corresponding to the type of Object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified ordinal.
            </summary>
            <param name="ordinal">The specified ordinal</param>
            <returns>The single-precision floating point number of the specified object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally unique identifier (GUID).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the column</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a string.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of the specified column as a TimeSpan object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetValue(System.Int32)">
            <summary>
            Retrieves the value of the specified column in its native format.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column in its native format.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.IsDBNull(System.Int32)">
            <summary>
            Determines whether the column contains non-existent or missing values.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>true if the specified column value is equivalent to DBNull; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoDataReader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Annotation">
            <summary>
            Defines extensions to the Analysis Services Scripting Language (ASSL) schema. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.Annotation.theValue">
            <summary>
            The content of the annotation inside Value tag.
            Serializer supports two XmlNode subclasses: XmlText and XmlElement.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Annotation.#ctor">
            <summary>
            Initializes a new instance of the Annotation class using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Annotation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Annotation class using a name.
            </summary>
            <param name="name">A String that contains the name of the Annotation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Annotation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of Annotation using a name and a value.
            </summary>
            <param name="name">A String that contains the name of the Annotation.</param>
            <param name="value">A String that contains the actual value of the Annotation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Annotation.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of Annotation using a name and a value as an XmlNode.
            </summary>
            <param name="name">A String that contains the name of the Annotation.</param>
            <param name="value">The contents of the annotation wrapped in an XmlNode.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.Annotation.Name">
            <summary>
            Gets or sets the name associated with an Annotation.
            </summary>
            <value>The name of the Annotation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Annotation.Visibility">
            <summary>
            Gets or sets the visibility of an Annotation element.
            </summary>
            <value>An enumeration that indicates whether visibility is on or off.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Annotation.Value">
            <summary>
            Gets or sets the XmlNode that contains the actual value of an Annotation.
            </summary>
            <value>The value associated with the annotation.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Annotation.Clone">
            <summary>
            Creates a new, full copy of an Annotation object.
            </summary>
            <returns>The cloned Annotation object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.TranslationCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.Translation" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.TranslationCollection.ItemsType">
            <summary>
            Gets the <see cref="T:System.Type" /> of objects that can be contained in the collection.
            </summary>
            <value>A <see cref="T:System.Type" /> with the type of objects.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.TranslationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.AnalysisServices.Translation" />, at the specified index, from the collection.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to be returned.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.Translation" /> at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Add(Microsoft.AnalysisServices.Translation)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Translation" /> has been added to the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The language of the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is not valid in the collection.</description></item>
            <item><description>The name of the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is not valid in the collection.</description></item>
            <item><description>The compatibility-level of the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is not valid in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Add(System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.Translation" /> object using the specified language, adds it to the end of the collection and returns the new Translation created.
            </summary>
            <param name="language">The language for the new <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</returns>
            <exception cref="T:System.InvalidOperationException">The specified language is not valid in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Insert(System.Int32,Microsoft.AnalysisServices.Translation)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Translation" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The language of the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is not valid in the collection.</description></item>
            <item><description>The compatibility-level of the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is not valid in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.Translation" /> object using the specified language, inserts it to the collection at the specified index and returns the new Translation created.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Translation" /> is inserted.</param>
            <param name="language">The language for the new <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.InvalidOperationException">The specified language is not valid in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Remove(Microsoft.AnalysisServices.Translation)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> from the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be removed.</param>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Remove(Microsoft.AnalysisServices.Translation,System.Boolean)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> from the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be removed.</param>
            <param name="cleanUp">True, if referencing objects are to be deleted; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <remarks>This API supports the product infrastructure and is not intended to be used directly from your code.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.Translation" /> with the specified language from the collection.
            </summary>
            <param name="language">The language of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to be removed.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Remove(System.Int32,System.Boolean)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.Translation" /> with the specified language from the collection.
            </summary>
            <param name="language">The language of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to be removed.</param>
            <param name="cleanUp">True, if referencing objects are to be deleted; otherwise, false.</param>
            <remarks>This API supports the product infrastructure and is not intended to be used directly from your code.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves a <see cref="T:Microsoft.AnalysisServices.Translation" /> in the collection from the current position to a new one.
            </summary>
            <param name="fromIndex">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to be moved.</param>
            <param name="toIndex">The zero-based index to which to move the <see cref="T:Microsoft.AnalysisServices.Translation" /> specified by fromIndex.</param>
            <returns>The <see cref="T:Microsoft.AnalysisServices.Translation" /> that was moved.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item><description>The specified fromIndex is not a valid value (less than zero or bigger then the total number of elements).</description></item>
            <item><description>The specified toIndex is not a valid value (less than zero or bigger then the total number of elements).</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Move(Microsoft.AnalysisServices.Translation,System.Int32)">
            <summary>
            Moves the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> to a new position in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be moved.</param>
            <param name="toIndex">The zero-based index to which to move the specified <see cref="T:Microsoft.AnalysisServices.Translation" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            <item><description>The specified <see cref="T:Microsoft.AnalysisServices.Translation" /> does not exist the collection.</description></item>
            <item><description>The specified toIndex is not a valid value (less than zero or bigger then the total number of elements).</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Contains(Microsoft.AnalysisServices.Translation)">
            <summary>
            Indicates whether the collection contains the specified <see cref="T:Microsoft.AnalysisServices.Translation" />.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to be located.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is found in the collection, otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Contains(System.Int32)">
            <summary>
            Indicates whether the collection contains a <see cref="T:Microsoft.AnalysisServices.Translation" /> with the specified language.
            </summary>
            <param name="language">The language of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to be located.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> is found in the collection, otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The specified language is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.IndexOf(Microsoft.AnalysisServices.Translation)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.Translation" /> and returns the zero-based index of it in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Translation" /> to locate in the collection.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Translation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.IndexOf(System.Int32)">
            <summary>
            Searches for a <see cref="T:Microsoft.AnalysisServices.Translation" /> with the specified language and returns the zero-based index of it in the collection.
            </summary>
            <param name="language">The language of the <see cref="T:Microsoft.AnalysisServices.Translation" /> to locate in the collection.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Translation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.GetByLanguage(System.Int32)">
            <summary>
            Obtain the Translation with the specified language.
            </summary>
            <param name="language">The locale identifier (LCID) of the AttributeTranslation to be located.</param>
            <returns>The Translation, with the language specified by language, if found in the collection; otherwise, a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.FindByLanguage(System.Int32)">
            <summary>
            Searches for a Translation with the specified language.
            </summary>
            <param name="language">The locale identifier (LCID) of the Translation to be located.</param>
            <returns>The Translation, with the language specified by language, if found in the collection; otherwise, a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.TranslationCollection.Add(System.Int32,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.Translation" /> object using the specified DimensionID, adds it to the end of the collection and returns the new Translation created.
            </summary>
            <param name="language">The language for the new <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</param>
            <param name="caption">The caption for the new <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.Translation" /> object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.BackupLocationCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupLocationCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupLocationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.Add(Microsoft.AnalysisServices.BackupLocation)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.Contains(Microsoft.AnalysisServices.BackupLocation)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.IndexOf(Microsoft.AnalysisServices.BackupLocation)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.Insert(System.Int32,Microsoft.AnalysisServices.BackupLocation)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.Remove(Microsoft.AnalysisServices.BackupLocation)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.BackupLocation" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreFolderCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreFolderCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreFolderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.Add(Microsoft.AnalysisServices.RestoreFolder)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.Contains(Microsoft.AnalysisServices.RestoreFolder)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.IndexOf(Microsoft.AnalysisServices.RestoreFolder)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.Insert(System.Int32,Microsoft.AnalysisServices.RestoreFolder)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.Remove(Microsoft.AnalysisServices.RestoreFolder)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RestoreFolder" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreLocationCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocationCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.Add(Microsoft.AnalysisServices.RestoreLocation)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.Contains(Microsoft.AnalysisServices.RestoreLocation)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.IndexOf(Microsoft.AnalysisServices.RestoreLocation)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.Insert(System.Int32,Microsoft.AnalysisServices.RestoreLocation)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.Remove(Microsoft.AnalysisServices.RestoreLocation)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RestoreLocation" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationErrorCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.ValidationError" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationErrorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationErrorCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Add(Microsoft.AnalysisServices.ValidationError)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Contains(Microsoft.AnalysisServices.ValidationError)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.IndexOf(Microsoft.AnalysisServices.ValidationError)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Insert(System.Int32,Microsoft.AnalysisServices.ValidationError)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Remove(Microsoft.AnalysisServices.ValidationError)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.ValidationError" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Add(Microsoft.AnalysisServices.IModelComponent,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object using the specified source and error information and adds it to the end of the collection.
            </summary>
            <param name="source">The source for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="error">The error message for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> has been added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Add(Microsoft.AnalysisServices.IModelComponent,System.String,Microsoft.AnalysisServices.ErrorPriority)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object using the specified source and error information and adds it to the end of the collection.
            </summary>
            <param name="source">The source for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="error">The error message for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="priority">The error priority for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> has been added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Add(Microsoft.AnalysisServices.IModelComponent,System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object using the specified source and error information and adds it to the end of the collection.
            </summary>
            <param name="source">The source for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="error">The error message for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="errorCode">The error code for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> has been added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationErrorCollection.Add(Microsoft.AnalysisServices.IModelComponent,System.String,Microsoft.AnalysisServices.ErrorPriority,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object using the specified source and error information and adds it to the end of the collection.
            </summary>
            <param name="source">The source for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="error">The error message for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="priority">The error priority for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <param name="errorCode">The error code for the new <see cref="T:Microsoft.AnalysisServices.ValidationError" /> object.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ValidationError" /> has been added to the collection.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpactDetailCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetailCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetailCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.Add(Microsoft.AnalysisServices.ImpactDetail)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.Contains(Microsoft.AnalysisServices.ImpactDetail)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.IndexOf(Microsoft.AnalysisServices.ImpactDetail)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.Insert(System.Int32,Microsoft.AnalysisServices.ImpactDetail)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.Remove(Microsoft.AnalysisServices.ImpactDetail)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ImpactDetail" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.GetInvalidObjects">
            <summary>
            Returns the list of objects marked as invalid in the ImpactDetailCollection.
            </summary>
            <returns>The list of objects marked as invalid.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpactDetailCollection.GetUnprocessedObjects">
            <summary>
            Returns the list of objects marked as unprocessed in the ImpactDetailCollection.
            </summary>
            <returns>The list of objects marked as unprocessed.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ClrAssemblyFileCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Add(Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Contains(Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.IndexOf(Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Insert(System.Int32,Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.Remove(Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFileCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ClrAssemblyFile" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.RoleMemberCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.RoleMember" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.RoleMemberCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RoleMemberCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.Add(Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.Contains(Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.IndexOf(Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.Insert(System.Int32,Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.Remove(Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.RoleMember" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMemberCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.RoleMember" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ExternalRoleMemberCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Add(Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the set of specified elements to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <list type="bullet">
            <item><description>The specified collection is a null reference (Nothing in Visual Basic).</description></item>
            <item><description>The specified collection has one or more items that are null reference (Nothing in Visual Basic).</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><description>The specified collection has items that are duplicate.</description></item>
            <item><description>The specified collection has one or more items that already esist in the collection.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Contains(Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.IndexOf(Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Insert(System.Int32,Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item already esists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.Remove(Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMemberCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ExternalRoleMember" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.AnnotationCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.Annotation" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AnnotationCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.AnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.Annotation" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid.</exception>
        </member>
        <member name="P:Microsoft.AnalysisServices.AnnotationCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> element with the specified name.
            </summary>
            <param name="name">The name of the element to get.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.Annotation" /> element with the specified name.</value>
            <exception cref="T:Microsoft.AnalysisServices.AmoException">An element with the specified name does not exists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Add(Microsoft.AnalysisServices.Annotation)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Annotation" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Annotation" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item's name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The specified item belongs to another collection.</description></item>
            <item><description>The collection already contains an item with the same name as the specified item.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Add(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object using the name and value provided, adds it to the collection and returns the new Annotation object created.
            </summary>
            <param name="name">The Name for the new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</param>
            <param name="value">The Value for the new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The specified name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The collection already contains an item with the same name as the specified name.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Contains(Microsoft.AnalysisServices.Annotation)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Annotation" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Contains(System.String)">
            <summary>
            Determines whether an <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name exists in the collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> whose existence is checked.</param>
            <returns>True, if an <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.CopyTo(Microsoft.AnalysisServices.AnnotationCollection)">
            <summary>
            Copies the elements from this collection to another.
            </summary>
            <param name="col">The destination collection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Find(System.String)">
            <summary>
            Searches for the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name and returns it.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> to find.</param>
            <returns>The <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name, if found; otherwise, a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.IndexOf(Microsoft.AnalysisServices.Annotation)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Annotation" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name and returns its zero-based index within the collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Insert(System.Int32,Microsoft.AnalysisServices.Annotation)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Annotation" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Annotation" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item's name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The specified item belongs to another collection.</description></item>
            <item><description>The collection already contains an item with the same name as the specified item.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object using the name and value provided, inserts it to the collection at the specified index, and returns the new Annotation object created.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.Annotation" /> is inserted.</param>
            <param name="name">The Name for the new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</param>
            <param name="value">The Value for the new <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.Annotation" /> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The collection already contains an item with the same name as the specified name.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Remove(Microsoft.AnalysisServices.Annotation)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.Annotation" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.Annotation" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified Name from this collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.Annotation" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.GetText(System.String)">
            <summary>
            Gets the value of the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified name.
            </summary>
            <param name="name">The name of the annotation.</param>"
            <returns>The value of the annotation, if found; otherwise a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.SetText(System.String,System.String,System.Boolean)">
            <summary>
            Sets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified name, to the specified <see cref="T:System.String" /> value. Can also be used to remove a named annotation if it is set to a null reference.
            </summary>
            <param name="name">The name of the annotation.</param>"
            <param name="text">The value to be set on the <see cref="T:Microsoft.AnalysisServices.Annotation" /> identified by the name.</param>"
            <param name="removeIfNull">If set to true, removes the Annotation specified in name from the collection if text is set to a null reference (Nothing in Visual Basic); if false, no removal is made.</param>"
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.SetText(System.String,System.String)">
            <summary>
            Sets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified name, to the specified <see cref="T:System.String" /> value.
            </summary>
            <param name="name">The name of the annotation.</param>"
            <param name="text">The value to be set on the <see cref="T:Microsoft.AnalysisServices.Annotation" /> identified by the name.</param>"
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.SetText(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified name, to the specified <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="name">The name of the annotation.</param>"
            <param name="value">The value to be set on the <see cref="T:Microsoft.AnalysisServices.Annotation" /> identified by the name.</param>"
        </member>
        <member name="M:Microsoft.AnalysisServices.AnnotationCollection.SetText(System.String,System.Int32)">
            <summary>
            Sets the <see cref="T:Microsoft.AnalysisServices.Annotation" /> with the specified name, to the specified <see cref="T:System.Int32" /> value.
            </summary>
            <param name="name">The name of the annotation.</param>"
            <param name="value">The value to be set on the <see cref="T:Microsoft.AnalysisServices.Annotation" /> identified by the name.</param>"
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerPropertyCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerPropertyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The current number of elements.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerPropertyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> element at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid.</exception>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerPropertyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> element with the specified name.
            </summary>
            <param name="name">The name of the element to get.</param>
            <value>The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> element with the specified name.</value>
            <exception cref="T:Microsoft.AnalysisServices.AmoException">An element with the specified name does not exists in the collection.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Add(Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Adds the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to be added.</param>
            <returns>The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> has been added to the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item's name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The specified item belongs to another collection.</description></item>
            <item><description>The collection already contains an item with the same name as the specified item.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Add(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object using the name and value provided, adds it to the collection and returns the new ServerProperty object created.
            </summary>
            <param name="name">The Name for the new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</param>
            <param name="value">The Value for the new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The specified name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The collection already contains an item with the same name as the specified name.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Contains(Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> exists in the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> whose existence is checked.</param>
            <returns>True, if the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name exists in the collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> whose existence is checked.</param>
            <returns>True, if a <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.CopyTo(Microsoft.AnalysisServices.ServerPropertyCollection)">
            <summary>
            Copies the elements from this collection to another.
            </summary>
            <param name="col">The destination collection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Find(System.String)">
            <summary>
            Searches for the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name and returns it.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to find.</param>
            <returns>The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name, if found; otherwise, a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.IndexOf(Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> and returns its zero-based index within the collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name and returns its zero-based index within the collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to locate.</param>
            <returns>The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Insert(System.Int32,Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Inserts the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> is inserted.</param>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified item is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified item's name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">
            <list type="bullet">
            <item><description>The specified item already esists in the collection.</description></item>
            <item><description>The specified item belongs to another collection.</description></item>
            <item><description>The collection already contains an item with the same name as the specified item.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object using the name and value provided, inserts it to the collection at the specified index, and returns the new ServerProperty object created.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> is inserted.</param>
            <param name="name">The Name for the new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</param>
            <param name="value">The Value for the new <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</param>
            <returns>The newly created <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not a valid value (less than zero or bigger then the total number of elements).</exception>
            <exception cref="T:System.ArgumentNullException">The specified name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The collection already contains an item with the same name as the specified name.</exception>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Remove(Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Removes the specified <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> from this collection.
            </summary>
            <param name="item">The <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> with the specified Name from this collection.
            </summary>
            <param name="name">The Name of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerPropertyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.AnalysisServices.ServerProperty" /> to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.Assembly">
            <summary>
            Represents a COM or .NET library that can contain several classes with several methods; all of which are potential stored procedures.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.Database">
            <summary>
            Represents a Microsoft Analysis Services database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.CopyTo(Microsoft.AnalysisServices.MajorObject,System.Boolean)">
            <summary>
            Copies the object to the specified destination. Do not reference this member directly in your code. It supports the Analysis Services infrastructure and will be hidden in a future release.
            </summary>
            <param name="destination">The object to be copied to.</param>
            <param name="forceBodyLoading">true if to force body loading; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.GetModelType">
            <summary>
            Database override default ModelComponent behaviour
            </summary>
            <remarks>
            This method return effective model type of database.
            If server is present and ServerMode is defined (not Default) methods return appropriate ModelType.
            Otherwise returns database ModelType.
            </remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.DismissedValidationRules">
            <summary>
            Gets a collection of DismissedValidationRule associated with the Database.
            </summary>
            <value>A collection of DismissedValidationRule associated with the Database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.DismissedValidationResults">
            <summary>
            Gets a collection of DismissedValidationResult associated with the Database.
            </summary>
            <value>A collection of DismissedValidationResult associated with the Database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.LastUpdate">
            <summary>
            Gets or sets the time of last update for a Database.
            </summary>
            <value>The time of last update.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Visible">
            <summary>
            Gets or sets the Boolean visibility property associated with a Database.
            </summary>
            <value>true if visibility is turned on; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Language">
            <summary>
            Gets or sets the language value for a Database.
            </summary>
            <value>An Integer representation of language used.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Collation">
            <summary>
            Gets or sets the collation type for a Database.
            </summary>
            <value>A String witn the collation type.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Translations">
            <summary>
            Gets the collection of translations associated with a Database.
            </summary>
            <value>A collection of translations.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ReadWriteMode">
            <summary>
            Gets or sets the ReadWriteMode of the database.
            </summary>
            <value>A ReadWriteMode enumeration with the read-write mode information of the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.DbStorageLocation">
            <summary>
            Gets or sets the database storage location.
            </summary>
            <remarks>
            The DbStorageLocation property is read-only in online mode (because the best practice for changing the storage location of a database is with Detach-Attach).
            But in offline project mode (in BI Dev Studio), we allow setting it and we dynamically add the TypeConverter and Editor attributes in DatabaseDesigner.PreFilterProperties(...) method (see the "Design\DatabaseDesigner.cs" file).
            </remarks>
            <!-- We used 'DbStorageLocation' instead of 'DBStorageLocation' to be consistent with the existing properties 'DbSchemaName' and 'DbTableName' from the TableBinding class. -->
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.OnStorageLocationChange(System.String)">
            <summary>
            ???
            </summary>
            <param name="storageLocation">???</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
            <value>A String with the image path.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ImageUniqueID">
            <summary>
            Gets or sets the image unique identifier.
            </summary>
            <value>A String with the image unique identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ImageVersion">
            <summary>
            Gets or sets the version of the image in the database.
            </summary>
            <value>A String with the version of the image in the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ImageUrl">
            <summary>
            Gets or sets the URL path to an image to display for the database.
            </summary>
            <value>A String with the URL path to an image to display for the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.StorageEngineUsed">
            <summary>
            Gets or sets the storage engine used in the current database.
            </summary>
            <value>A StorageEngineUsed enumeration describing the storage engine used.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.ModelType">
            <summary>
            Gets or sets the type of model from which the database was deployed. Expected values include Default (same as multidimensional), Multidimensional, or Tabular.
            </summary>
            <value>A ModelType enumeration with the type of the model.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.CompatibilityLevel">
            <summary>
            Gets or sets the compatibility level for the database.
            </summary>
            <value>The compatibility level of the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.CompatibilityMode">
            <summary>
            Gets or sets the compatibility level for the database.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.OnCompatibilityLevelChange(System.Int32,System.Int32)">
            <summary>
            Invoked when the compatibility level of the database changes.
            </summary>
            <param name="newCompatLevel">The new compatibility level.</param>
            <param name="currentCompatLevel">The current compatibility level.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.OnCompatibilityLevelRestore(System.Int32)">
            <summary>
            Invoked when the compatibility level of the database is [potentially] being restored.
            </summary>
            <param name="originalCompatibilityLevel">The original compatibility level.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.OnCompatibilityModeChange(Microsoft.AnalysisServices.CompatibilityMode,Microsoft.AnalysisServices.CompatibilityMode)">
            <summary>
            Invoked when the server mode of the database changes.
            </summary>
            <param name="newMode">The new server mode.</param>
            <param name="currentMode">The current server mode.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Version">
            <summary>
            Gets or sets the database version.
            </summary>
            <value>The database version.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.EstimatedSize">
            <summary>
            Gets or sets the read-only estimated size, in bytes, of the parent Database.
            </summary>
            <value>A 64-bit signed integer representation of size in bytes.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.CanProcess(Microsoft.AnalysisServices.ProcessType)">
            <summary>
            Indicates whether the cube can perform the specified processing.
            </summary>
            <param name="processType">The type of processing expected to be performed.</param>
            <returns>true if the cube can perform the specified processing; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.GetReferences(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Gets the objects that the database references.
            </summary>
            <param name="references">The Hashtable to append references to.</param>
            <param name="forMajorChildrenAlso">true to get references for major children; otherwise, false.</param>
            <returns>The references Hashtable with objects that the dimension references appended.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.GetConnectedParentServer">
            <summary>
            Obtains the parent server to connect with the database object.
            </summary>
            <returns>A parent server to connect with the database object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String)">
            <summary>
            Provides programmatic access to Backup operations for a Database with the specified file.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String,System.Boolean)">
            <summary>
            Provides programmatic access to Backup operations for a Database with the specified file and AllowOverWrite indication.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
            <param name="allowOverwrite">True if overwrite is allowed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String,System.Boolean,System.Boolean)">
            <summary>
            Provides programmatic access to Backup operations for a Database with the specified file, AllowOverWrite indication, and BackupRemotePartitions indication.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
            <param name="allowOverwrite">True if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if remote partitions are subject to backup; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[])">
            <summary>
            Provides programmatic access to backup operations for a Database with the specified file, AllowOverWrite indication, BackupRemotePartitions indication, and locations information.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
            <param name="allowOverwrite">True if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if remote partitions are subject to backup; otherwise, false.</param>
            <param name="locations">If locations is specified, then remote partitions are backed up on their servers using the file name defined in this parameter.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[],System.Boolean)">
            <summary>
            Provides programmatic access to backup operations for a Database with the specified file, AllowOverWrite indication, BackupRemotePartitions indication, locations information, and ApplyCompression indication.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
            <param name="allowOverwrite">True if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if remote partitions are subject to backup; otherwise, false.</param>
            <param name="locations">If locations is specified, then remote partitions are backed up on their servers using the file name defined in this parameter.</param>
            <param name="applyCompression">true if compression is to be used; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[],System.Boolean,System.String)">
            <summary>
            Provides programmatic access to backup operations for a Database with the specified file, AllowOverWrite indication, BackupRemotePartitions indication, locations information, ApplyCompression indication, and password.
            </summary>
            <param name="file">A file containing the parameters to be applied during backup of a Database.</param>
            <param name="allowOverwrite">True if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if remote partitions are subject to backup; otherwise, false.</param>
            <param name="locations">If locations is specified, then remote partitions are backed up on their servers using the file name defined in this parameter.</param>
            <param name="applyCompression">true if compression is to be used; otherwise, false.</param>
            <param name="password">The password to apply to the backup.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Backup(Microsoft.AnalysisServices.BackupInfo)">
            <summary>
            Provides programmatic access to Backup operations for a Database with BackupInfo information.
            </summary>
            <param name="backupInfo">Contains parameters to be applied during backup of a Database.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Detach">
            <summary>
            Detaches a database that is not in use.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.Detach(System.String)">
            <summary>
            Detaches a database with a specified password.
            </summary>
            <param name="password">The password to detach the database.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Database.AddToContainer(System.ComponentModel.IContainer)">
            <summary>
            Add the database to a container
            </summary>
            <param name="container">The container for which you are adding the specified object.</param>
            <remarks>Do not reference this member directly in your code. It supports the Analysis Services infrastructure and will be hidden in a future release.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.NameOnServer">
            <summary>
            Gets a name of the database as of last moment when database was in sync with the server
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Database.Parent">
            <summary>
            Gets the parent Server of a Database.
            </summary>
            <value>The Server object representing the parent of the database.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.IBinding">
            <summary>
            Serves as the base interface from which all bindings interfaces are derived.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.IQueryBinding">
            <summary>
            Represents a derived data type that defines the query binding.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.IQueryBinding.DataSourceID">
            <summary>
            Gets or sets the DataSource identifier for the current QueryBinding.
            </summary>
            <value>A String with the DataSource identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.IQueryBinding.QueryDefinition">
            <summary>
            Gets or sets the query definition.
            </summary>
            <value>A String with an opaque expression for a query associated with a DataSource object for the current QueryBindin.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.Trace">
            <summary>
            Represent the base class for Trace objects, which provide a mechanism to store event logs that can be later viewed or replayed. 
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Trace.Parent">
            <summary>
            Gets the parent Server of a Trace object.
            </summary>
            <value>The parent server of a trace.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.Role">
            <summary>
            Represents the level of security associated with a group of users.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Role.CopyTo(Microsoft.AnalysisServices.MajorObject,System.Boolean)">
            <summary>
            Copies the Role to a MajorObject to the specified destination.
            </summary>
            <param name="destination">The object you are copying to.</param>
            <param name="forceBodyLoading">true to force the body to load; otherwise, false.</param>
            <remarks>Do not reference this member directly in your code. It supports the Analysis Services infrastructure and will be hidden in a future release.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Role.Members">
            <summary>
            Gets the Members, all of which are Windows security principles (user or group accounts), associated with a Role.
            </summary>
            <value>A collection of members assigned to this Role.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Role.ExternalMembers">
            <summary>
            Gets the collection of external members associated with the role.
            </summary>
            <value>The collection of external role members associated with this instance.</value>
            <remarks>Internal only. This API is part of the Analysis Services infrastructure and is not intended to be called directly from your code.</remarks>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.Server">
            <summary>
            Represents the base class for an instance of Analysis Services and provides methods and members that enable to you to control that instance. 
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CopyTo(Microsoft.AnalysisServices.MajorObject,System.Boolean)">
            <summary>
            Copies a Server object to the specified destination.
            </summary>
            <param name="destination">The network Windows server name to which you are copying the Analysis Services server object.</param>
            <param name="forceBodyLoading">true to force the body to load; otherwise, false.</param>
            <remarks>Do not reference this member directly in your code. It supports the Analysis Services infrastructure and will be hidden in a future release.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ConnectionString">
            <summary>
            Gets the connection-string used to connect to an instance of Analysis Services.
            </summary>
            <value>A String containing the information required to make a connection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ConnectionInfo">
            <summary>
            Gets the information regarding the connection to the Server object.
            </summary>
            <value>A ConnectionInfo object with the information.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.SessionID">
            <summary>
            Gets the session ID for the server.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.CaptureXml">
            <summary>
            Gets or sets the CaptureLog property of the Server object, which indicates whether XML messages sent to an instance of Analysis Services should be logged.
            </summary>
            <value>true if commands are logged locally; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.CaptureLog">
            <summary>
            Gets a collection containing XMLA commands that were generated while CaptureXml property was set to true.
            </summary>
            <value>A collection containing XML messages.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.Connected">
            <summary>
            Gets an indication whether there is a connection to an instance of Analysis Services.
            </summary>
            <value>true if a connection exists; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.Version">
            <summary>
            Gets or sets the server version. This is read-only.
            </summary>
            <value>A String with the version of the server.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.Edition">
            <summary>
            Gets or sets the currently installed edition of Analysis Services. This is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.EditionID">
            <summary>
            Gets or sets the EditionID for the currently installed version of Analysis Services. This is read-only.
            </summary>
            <value>The identifier for the edition. For local cubes, the value is zero; otherwise, a non-zero number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ProductLevel">
            <summary>
            Gets or sets read-only access to the product level element. The product level itself is obtained from the stored install-specific string.
            </summary>
            <value>A product-level description.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ServerProperties">
            <summary>
            Gets a collection of server properties associated with a specific Server object.
            </summary>
            <value>A collection of server properties.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ProductName">
            <summary>
            Gets or sets read-only access to the name of the SQL Server product from which an instance of Analysis Services was installed.
            </summary>
            <value>A product name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.CompatibilityMode">
            <summary>
            Gets or sets the mode of the Analysis Services. This is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ServerMode">
            <summary>
            Gets or sets the mode the server is operating in. This is read-only.
            </summary>
            <value>A ServerMode enumeration with the mode of the server.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.DefaultCompatibilityLevel">
            <summary>
            Gets or sets a default compatiblity level to use whenever this value is unspecified. This is read-only.
            </summary>
            <value>The compatibility level.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.SupportedCompatibilityLevels">
            <summary>
            Get information regarding the set of compatibility levels, supported by the server.
            </summary>
            <value>A String containing a comma seperated list of supported compatibility levels.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.GetSupportedCompatibilityLevels">
            <summary>
            Obtain the set of compatibility levels supported by the server.
            </summary>
            <returns>An array of Int32 with the compatibility levels.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.Server.ServerLocation">
            <summary>
            Gets or sets the location of the server, which is either on-premises or in a Microsoft data center that provides internal hosting of tabular models for Microsoft's online services, (for example, Excel data models viewed in Office 365). This is read-only.
            </summary>
            <value>The location of the server.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CopyTo(Microsoft.AnalysisServices.Core.Server)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Connect(System.String,System.Boolean)">
            <summary>
            Connects the current instance of Server to the Analysis Services server using the specified connection string and properties-only indication.
            </summary>
            <param name="connectionString">The connection-string used to establish the connection.</param>
            <param name="propertiesOnly">An indication if to get only object properties during connect.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Connect(System.String)">
            <summary>
            Connects the current instance of Server to the Analysis Services server, using the specified connection string.
            </summary>
            <param name="connectionString">The connection-string used to establish the connection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Connect(System.String,System.String)">
            <summary>
            Connects the current instance of Server to the Analysis Services server, using the specified connection string and session identifier.
            </summary>
            <param name="connectionString">The connection-string used to establish the connection.</param>
            <param name="sessionId">The session to connect to.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Disconnect">
            <summary>
            Disconnects the Server object from the Analysis Services server.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Disconnect(System.Boolean)">
            <summary>
            Disconnects the specified session Server object from the Analysis Services server.
            </summary>
            <param name="endSession">An indication if the session should be ended.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Reconnect">
            <summary>
            Re-establishes the connection to the Analysis Services database.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.GetConnectionState(System.Boolean)">
            <summary>
            Gets the current state of the connection to the Analysis Services server.
            </summary>
            <param name="pingServer">true to indicate that an empty statement will be sent to the server to verify whether the connection is open; otherwise, false.</param>
            <returns>A ConnectionState enumeration describing the current state of the connection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Execute(System.String)">
            <summary>
            Executes the specified command on the Analysis Services server.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>An XmlaResultCollection containing the results of the command.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Execute(System.String,Microsoft.AnalysisServices.ImpactDetailCollection,System.Boolean)">
            <summary>
            Executes the specified command on the Analysis Services server, and provides support for impact analysis.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="impactResult">The collection to store impact information in.</param>
            <param name="analyzeImpactOnly">true to indicate that the command will only be analyzed for impact; otherwise, false. If set to false, the command will be executed and the impactResult collection will be populated.</param>
            <returns>An XmlaResultCollection containing the results of the command.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ExecuteCaptureLog(System.Boolean,System.Boolean)">
            <summary>
            Executes the contents of the capture log on the server, and indicates whether execution will be in a transactional and/or parallel mode. Affected objects will not be processed.
            </summary>
            <param name="transactional">true to indicate that the capture log will be executed within a transaction; otherwise, false.</param>
            <param name="parallel">true to indicate that the capture log entries will be executed in parallel; otherwise, false.</param>
            <returns>An XmlaResultCollection containing the results of the command(s).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ExecuteCaptureLog(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes the contents of the capture log on the server, indicates whether execution will be in a transactional and/or parallel mode, and indicates whether affected objects will be processed.
            </summary>
            <param name="transactional">true to indicate that the capture log will be executed within a transaction; otherwise, false.</param>
            <param name="parallel">true to indicate that the capture log entries will be executed in parallel; otherwise, false.</param>
            <param name="processAffected">true to indicate that the affected objects will be processed; otherwise, false.</param>
            <returns>An XmlaResultCollection containing the results of the command(s).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ExecuteCaptureLog(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes the contents of the capture log on the server, indicates whether execution will be in a transactional and/or parallel mode, indicates whether affected objects will be processed, and indicates whether to skip volatile objects.
            </summary>
            <param name="transactional">true to indicate that the capture log will be executed within a transaction; otherwise, false.</param>
            <param name="parallel">true to indicate that the capture log entries will be executed in parallel; otherwise, false.</param>
            <param name="processAffected">true to indicate that the affected objects will be processed; otherwise, false.</param>
            <param name="skipVolatileObjects">true to skip logging for volatile objects; otherwise, false.</param>
            <returns>An XmlaResultCollection containing the results of the command(s).</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ConcatenateCaptureLog(System.Boolean,System.Boolean)">
            <summary>
            Gets the capture log in a concatenated XML format, wrapped in an XMLA Batch element, and indicates whether to include the transaction attribute and XMLA Parallel element.
            </summary>
            <param name="transactional">true to indicate that the transaction attribute on the Batch element will be set to true or false; otherwise, false.</param>
            <param name="parallel">true to wrap all capture log entries in an XMLA Parallel element; otherwise, false.</param>
            <returns>A String containing the concatenated capture log.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ConcatenateCaptureLog(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the capture log in a concatenated XML format, wrapped in an XMLA Batch element, indicates whether to include the transaction attribute and XMLA Parallel element, and indicates whether affected objects will be processed.
            </summary>
            <param name="transactional">true to indicate that the transaction attribute on the Batch element will be set to true or false; otherwise, false.</param>
            <param name="parallel">true to wrap all capture log entries in an XMLA Parallel element; otherwise, false.</param>
            <param name="processAffected">true to indicate that the affected objects will be processed; otherwise, false. This parameter is reserved for future use.</param>
            <returns>A String containing the concatenated capture log.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.StartXmlaRequest(Microsoft.AnalysisServices.XmlaRequestType)">
            <summary>
            Starts an XML for Analysis (XMLA) request to the server.
            </summary>
            <param name="type">The type of request to start.</param>
            <returns>An XmlWriter to store the request into.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.EndXmlaRequest">
            <summary>
            Ends the last XML for Analysis (XMLA) request.
            </summary>
            <returns>The ended XMLA request.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.EndXmlaRequestAndGetResults">
            <summary>
            Ends the Xmla request and get the results from the Server.
            </summary>
            <returns>The specified results of the request.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.SendXmlaRequest(Microsoft.AnalysisServices.XmlaRequestType,System.IO.Stream)">
            <summary>
            Sends an XML for Analysis (XMLA) request of the specified type using the given stream.
            </summary>
            <param name="type">The type of request to send.</param>
            <param name="requestStream">A Stream containing the request.</param>
            <returns>An XmlReader containing the results of the request.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.SendXmlaRequest(Microsoft.AnalysisServices.XmlaRequestType,System.IO.TextReader)">
            <summary>
            ends an XML for Analysis (XMLA) request of the specified type using the given request.
            </summary>
            <param name="type">The type of request to send.</param>
            <param name="request">A TextReader containing the request.</param>
            <returns>An XmlReader containing the results of the request.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.EndXmlaRequestWithReader(Microsoft.AnalysisServices.XmlaResultCollection@)">
            <summary>
            Similar to EndXmlaRequest(), but returns an AmoDataReader instead of raw XmlReader.
            </summary>
            <param name="results">In case of an error, this will contain the error information. Otherwise the results should be obtained from the reader after it's finished parsing the output.</param>
            <returns>An AmoDataReader containing the result of the request.</returns>
            <remarks>
            Returned AmoDataReader object may be used to read the rowset data and informational/warning messages from the response. If an error occurs during request exection, OperationException will be thrown.
            Note that messages from the response will be available only after the reader object has finished reading data from the response; they may not be available immediately after EndXmlaRequestWithReader() call.
            </remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ExecuteReader(System.String,Microsoft.AnalysisServices.XmlaResultCollection@,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Executes given XMLA command and returns AmoDataReader
            </summary>
            <param name="command">XMLA command</param>
            <param name="results">Results of the command execution</param>
            <param name="properties">Optional command properties</param>
            <param name="wrapCommand">Whether the command needs to be wrapped into Execute and Command elements.</param>
            <returns>An AmoDataReader object, if command executed successfully. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.RenameTable(System.String,System.String,System.String,Microsoft.AnalysisServices.FixUpExpressions)">
            <summary>
            Execute a rename operation of a table.
            </summary>
            <param name="databaseId">The database containing the table.</param>
            <param name="tableId">The table being renamed.</param>
            <param name="name">The new name.</param>
            <param name="fixupExpressions">An indication if expressions will be adjusted to use the new name.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.RenameTableColumn(System.String,System.String,System.String,System.String,Microsoft.AnalysisServices.FixUpExpressions)">
            <summary>
            Execute a rename operation of a column.
            </summary>
            <param name="databaseId">The database containing the column.</param>
            <param name="tableId">The table containing the column.</param>
            <param name="columnId">The column being renamed.</param>
            <param name="name">The new name.</param>
            <param name="fixupExpressions">An indication if expressions will be adjusted to use the new name.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.RenameScriptMeasure(System.String,System.String,System.String,System.String,Microsoft.AnalysisServices.FixUpExpressions)">
            <summary>
            Execute a rename operation of a measure.
            </summary>
            <param name="databaseId">The database containing the measure.</param>
            <param name="tableId">The table containing the measure.</param>
            <param name="measureName">The measure being renamed.</param>
            <param name="name">The new name.</param>
            <param name="fixupExpressions">An indication if expressions will be adjusted to use the new name.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.GetSerializer(Microsoft.AnalysisServices.ObjectExpansion)">
            As part of TOM merge, they will provide their own serializer.
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelCommand">
            <summary>
            Cancels the command executing on the current connection and session (a new temporary connection is used). 
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelCommand(System.String)">
            <summary>
            Cancels the command executing in the specified session (a new temporary connection is used). 
            </summary>
            <param name="sessionId">The session identifier.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelSession">
            <summary>
            Cancels the current session (a new temporary connection is used). 
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelSession(System.String)">
            <summary>
            Cancels the specified session (a new temporary connection is used). 
            </summary>
            <param name="sessionId">The session identifier.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelSession(System.String,System.Boolean)">
            <summary>
            Cancels the specified session (a new temporary connection is used). 
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="cancelAssociated">true to indicate that the associated sessions will be canceled; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelSession(System.Int32)">
            <summary>
            Cancels the specified session (a new temporary connection is used). 
            </summary>
            <param name="sessionId">The session identifier.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelSession(System.Int32,System.Boolean)">
            <summary>
            Cancels the specified session (a new temporary connection is used). 
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="cancelAssociated">true to indicate that the associated sessions will be canceled; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelConnection(System.Int32)">
            <summary>
            Cancels the specified connection (a new temporary connection is used). 
            </summary>
            <param name="connectionId">The connection identifier to cancel.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.CancelConnection(System.Int32,System.Boolean)">
            <summary>
            Cancels the specified connection (a new temporary connection is used). 
            </summary>
            <param name="connectionId">The connection identifier to cancel.</param>
            <param name="cancelAssociated">true to indicate that the associated connections will be canceled; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String)">
            <summary>
            Restores an Analysis Services database from a backup file.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given an overwrite flag.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[])">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given an overwrite flag and multiple remote servers.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
            <param name="locations">An array of RestoreLocation objects, specifying multiple remote servers to restore to.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given an overwrite flag, multiple remote servers, and specifying security settings.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
            <param name="locations">An array of RestoreLocation objects, specifying multiple remote servers to restore to.</param>
            <param name="security">A RestoreSecurity object that specifies the security settings for the restore.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given an overwrite flag, multiple remote servers, and specifying security settings and password.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
            <param name="locations">An array of RestoreLocation objects, specifying multiple remote servers to restore to.</param>
            <param name="security">A RestoreSecurity object that specifies the security settings for the restore.</param>
            <param name="password">The password to use to decrypt the restoration file.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String,System.String)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given a password, an overwrite flag, multiple remote servers, specifying security settings, password, and storage location.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
            <param name="locations">An array of RestoreLocation objects, specifying multiple remote servers to restore to.</param>
            <param name="security">A RestoreSecurity object that specifies the security settings for the restore.</param>
            <param name="password">The password to use to decrypt the restoration file.</param>
            <param name="dbStorageLocation">The storage location for the file to restore.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String,System.String,Microsoft.AnalysisServices.ReadWriteMode)">
            <summary>
            Restores an Analysis Services database from a backup file to the specified database, given a password, an overwrite flag, multiple remote servers, specifying security settings, password, storage location, and read\write mode.
            </summary>
            <param name="file">The name and location of the file to restore.</param>
            <param name="databaseName">The database to restore to.</param>
            <param name="allowOverwrite">true to indicate that the database will be overwritten, if it exists; otherwise, false.</param>
            <param name="locations">An array of RestoreLocation objects, specifying multiple remote servers to restore to.</param>
            <param name="security">A RestoreSecurity object that specifies the security settings for the restore.</param>
            <param name="password">The password to use to decrypt the restoration file.</param>
            <param name="dbStorageLocation">The storage location for the file to restore.</param>
            <param name="readWriteMode">The read/write mode of the database.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Restore(Microsoft.AnalysisServices.RestoreInfo)">
            <summary>
            Restores an Analysis Services database from a backup file, using the options set on the provided RestoreInfo object.
            </summary>
            <param name="restoreInfo">The RestoreInfo object containing the options for performing the database restoration.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Synchronize(System.String,System.String)">
            <summary>
            Synchronizes the current object.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source to get the object with which database will be synchronized.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Synchronize(System.String,System.String,Microsoft.AnalysisServices.SynchronizeSecurity,System.Boolean)">
            <summary>
            Synchronizes the current object.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source to get the object with which database will be synchronized.</param>
            <param name="synchronizeSecurity">The synchorinize security definition.</param>
            <param name="applyCompression">true to apply compression; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Synchronize(Microsoft.AnalysisServices.SynchronizeInfo)">
            <summary>
            Synchronizes the current object.
            </summary>
            <param name="synchronizeInfo">The synchronize info.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ImageLoad(Microsoft.AnalysisServices.ImageLoadInfo)">
            <summary>
            ???
            </summary>
            <param name="imageLoadInfo">???</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ImageLoad(System.String,System.String,System.IO.Stream,Microsoft.AnalysisServices.ReadWriteMode)">
            <summary>
            ???
            </summary>
            <param name="databaseName">???</param>
            <param name="databaseId">???</param>
            <param name="sourceDbStream">???</param>
            <param name="databaseReadWriteMode">???</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ImageLoad(System.String,System.String,System.IO.Stream)">
            <summary>
            ???
            </summary>
            <param name="databaseName">???</param>
            <param name="databaseId">???</param>
            <param name="sourceDbStream">???</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ImageSave(Microsoft.AnalysisServices.ImageSaveInfo)">
            <summary>
            ???
            </summary>
            <param name="imageSaveInfo">???</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.ImageSave(System.String,System.IO.Stream)">
            <summary>
            ???
            </summary>
            <param name="databaseId">???</param>
            <param name="targetDbStream">???</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Attach(System.String)">
            <summary>
            Attaches a folder to the server.
            </summary>
            <param name="folder">A String containing the folder to attach.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Attach(System.String,Microsoft.AnalysisServices.ReadWriteMode)">
            <summary>
            Attaches a folder to the server with specified mode.
            </summary>
            <param name="folder">A String containing the folder to attach.</param>
            <param name="readWriteMode">The read/write mode.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Attach(System.String,Microsoft.AnalysisServices.ReadWriteMode,System.String)">
            <summary>
            Attaches a folder to the server with specified mode and password.
            </summary>
            <param name="folder">A String containing the folder to attach.</param>
            <param name="readWriteMode">The read/write mode.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Server and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Server.Validate(Microsoft.AnalysisServices.ValidationErrorCollection,System.Boolean,Microsoft.AnalysisServices.ServerEdition)">
            <summary>
            Indicates whether the Server object is valid.
            </summary>
            <param name="errors">A collection of validation errors.</param>
            <param name="includeDetailedErrors">true to indicate that detailed errors are included in the errors parameter; otherwise, false.</param>
            <param name="serverEdition">The server edition.</param>
            <returns>true if the object returns valid; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Core.ITransaction">
            <summary>
            Represents transaction started by the user (through BeginTransaction/CommitTransaction/Rollback APIs)
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Core.ITransaction.ModifiedDatabase">
            <summary>
            TM database that was modified during a transaction (Transaction is not allowed to modify more than 1 TM database)
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Utils.Trim(System.String)">
            <summary>
            	Similar to System.String.Trim() method, but returns null instead of
            	empty string "" when the spaces removal (from the beginning and 
            	ending of the string) leaves the string empty.
            </summary>
            <param name="str">
            	The string from which we'll remove the beginning and ending spaces.
            </param>
            <returns>
            	The string without the beginning and ending spaces, or null if 
            	space removal left it empty.
            </returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Utils.GetNewID(System.String,System.Type)">
            <summary>
            Generates new ID for provided component type
            </summary>
            <remarks>
            For internal use only
            </remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.Utils.CheckValidPath(System.String)">
            <summary>
            Throws ArgumentException if the specified path contains an invalid character.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.BeginTransaction">
            <summary>
            Executes a BeginTransaction command (composes the messages, sends it and parses the server response).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.RollbackTransaction">
            <summary>
            Executes a RollbackTransaction command (composes the messages, sends it and parses the server response).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.CommitTransaction">
            <summary>
            Executes a CommitTransaction command (composes the messages, sends it and parses the server response).
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.Rename(System.Collections.IDictionary,System.String,Microsoft.AnalysisServices.FixUpExpressions)">
            <summary>
            Private method that generates full SOAP Execute command for Rename
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.WriteRename(System.Xml.XmlWriter,System.Collections.IDictionary,System.String,Microsoft.AnalysisServices.FixUpExpressions)">
            <summary>
            Private method that generates the Rename command part only
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.SendMessageSkipResults">
            <summary>
            Sends a previously composed message to the server and returns the errors (if any).
            </summary>
            <returns>an array with the errors return by server if any (otherwise null)</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Core.AnalysisServicesClient.WriteEndCommand(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Writes (directly to the server or in the log) the current XML/A Command.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.CompatibilityMode">
            <summary>
            An enumeration of the compatibility modes supported by the various AnalysisServices services.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.CompatibilityMode.Unknown">
            <summary>
            Unknown Mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.CompatibilityMode.AnalysisServices">
            <summary>
            Basic AnalysisServices mode - used on SSAS and AAS.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.CompatibilityMode.PowerBI">
            <summary>
            Power BI mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.CompatibilityMode.Excel">
            <summary>
            Excel mode.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ObjectExpansion">
            <summary>
            This is internal as of now maps to XMLAclient object expansion value
            TODO: This should be exposed for connect options at some point
            also enums here in AMO need a NONE option for a better design (TODO for future)
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaRequestType">
            <summary>
            Specifies an enumeration of XMLA request type.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaRequestType.Undefined">
            <summary>
            Undefined request type.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaRequestType.Discover">
            <summary>
            Discover request type.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.XmlaRequestType.Execute">
            <summary>
            Execute request type.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.WriteBackTableCreation">
            <summary>
            Determines whether a writeback table is created during the Process operation.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.WriteBackTableCreation.Create">
            <summary>
            Creates a new writeback table, if one does not exist. If a writeback table already exists, an error occurs.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.WriteBackTableCreation.CreateAlways">
            <summary>
            Creates a new writeback table, overwriting any existing writeback table.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.WriteBackTableCreation.UseExisting">
            <summary>
            Uses the existing writeback table, if one already exists. If one does not exist, an error occurs.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.UpdateOptions">
            <summary>
            Defines how an object and related dependent objects are updated on the server after an update command.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateOptions.Default">
            <summary>
            Sends only the object properties and minor object collections to the server.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateOptions.ExpandFull">
            <summary>
            Sends the full object definition to the server. The full object definition includes properties, major objects, and minor objects.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateOptions.AlterDependents">
            <summary>
            Sends the full object definition to the server. The full object definition includes properties, major objects, and minor objects. Dependent objects are also fully expanded (eg: altering a dimension might require altering affected cubes).
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.UpdateMode">
            <summary>
            Specifies an enumeration of update mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateMode.Default">
            <summary>
            The Default mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateMode.Update">
            <summary>
            The Update mode.
            </summary>
            <!-- Alter AllowCreate='false' -->
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateMode.UpdateOrCreate">
            <summary>
            The UpdateOrCreate mode.
            </summary>
            <!-- Alter AllowCreate='true' -->
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateMode.Create">
            <summary>
            The Create mode.
            </summary>
            <!-- Create AllowOverwrite='false' -->
        </member>
        <member name="F:Microsoft.AnalysisServices.UpdateMode.CreateOrReplace">
            <summary>
            The CreateOrReplace mode.
            </summary>
            <!-- Create AllowOverwrite='true' -->
        </member>
        <member name="T:Microsoft.AnalysisServices.FixUpExpressions">
            <summary>
            Specifies the fixup expressions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.FixUpExpressions.Default">
            <summary>
            The default expression.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.FixUpExpressions.Enabled">
            <summary>
            The expression is enabled.
            </summary>
            <!-- Add FixUpExpressions='true' attribute to rename command -->
        </member>
        <member name="F:Microsoft.AnalysisServices.FixUpExpressions.Disabled">
            <summary>
            The expression is disabled.
            </summary>
            <!-- Add FixUpExpressions='false' attribute to rename command -->
        </member>
        <member name="T:Microsoft.AnalysisServices.DropOptions">
            <summary>
            Defines the behavior of the drop method on dependent objects.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DropOptions.Default">
            <summary>
            Specifies that the default drop option for that object is used,
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DropOptions.IgnoreFailures">
            <summary>
            Specifies that the drop process is continued on failures or errors.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DropOptions.AlterOrDeleteDependents">
            <summary>
            Specifies that the dependent objects are deleted and the affected ones are altered.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpactAnalysisType">
            <summary>
            Defines the state of the object if the operation is performed.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpactAnalysisType.Invalid">
            <summary>
            Will be invalid.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpactAnalysisType.Unprocessed">
            <summary>
            Will be in an unprocessed state.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpactAnalysisType.Processed">
            <summary>
            Will be in a processed state.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ErrorPriority">
            <summary>
            Defines the error priority.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ErrorPriority.High">
            <summary>
            Gives the error high priority.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ErrorPriority.Low">
            <summary>
            Gives the error low priority.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.RefreshType">
            <summary>
            Enumerates the refresh type options.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RefreshType.LoadedObjectsOnly">
            <summary>
            Refreshes the loaded objects only.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RefreshType.UnloadedObjectsOnly">
            <summary>
            Refreshes the unloaded objects only.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.KeyErrorAction">
            <summary>
            Defines how errors are handling on dimension keys during process operations.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.KeyErrorAction.ConvertToUnknown">
            <summary>
            Converts key to unknown value.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.KeyErrorAction.DiscardRecord">
            <summary>
            Discards the record.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.KeyErrorLimitAction">
            <summary>
            Defines what happens when the KeyErrorLimit is exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.KeyErrorLimitAction.StopProcessing">
            <summary>
            Stops processing.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.KeyErrorLimitAction.StopLogging">
            <summary>
            Stops logging errors.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ErrorOption">
            <summary>
            Defines error behavior during object processing.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ErrorOption.IgnoreError">
            <summary>
            Ignores the error and continues to process. Nothing is logged.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ErrorOption.ReportAndContinue">
            <summary>
            Ignores the error, continues to process. Logs according to the log options.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ErrorOption.ReportAndStop">
            <summary>
            Stops processing and logs the error.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ClrAssemblyFileType">
            <summary>
            Identifies the file type of a ClrAssembly.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ClrAssemblyFileType.Main">
            <summary>
            A CLR assembly that contains the publicly visible functions for users to call from stored procedures, MDX statements, or DMX statements.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ClrAssemblyFileType.Dependent">
            <summary>
            A CLR assembly that contains the helper functions for the publicly visible functions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ClrAssemblyFileType.Debug">
            <summary>
            A .pdb file with the debugging information.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.PermissionSet">
            <summary>
            Enumerates the permission set for the analysis services.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.PermissionSet.Safe">
            <summary>
            The safe permission.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.PermissionSet.ExternalAccess">
            <summary>
            The external access permission.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.PermissionSet.Unrestricted">
            <summary>
            The unrestricted permission.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TraceEventSuccess">
            <summary>
            Defines the TraceEventSuccess enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSuccess.NotAvailable">
            <summary>
            The event is NotAvailable.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSuccess.Failure">
            <summary>
            The event is Failure.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSuccess.Success">
            <summary>
            The event is Success.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSuccess.Unknown">
            <summary>
            The event is Unknown.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TraceStopCause">
            <summary>
            Specifies an enumeration of cause to stop the trace.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceStopCause.StoppedByUser">
            <summary>
            The cause of trace is stopped by the user.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceStopCause.Finished">
            <summary>
            The cause of trace to stop is finished.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceStopCause.StoppedByException">
            <summary>
            The cause of trace is stopped by exception.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.AnalysisState">
            <summary>
            Defines the processing state of a ProcessableMajorObject in Analysis Services.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AnalysisState.Processed">
            <summary>
            The object and all its contained processable objects are processed
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AnalysisState.PartiallyProcessed">
            <summary>
            At least one contained object is not processed
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AnalysisState.Unprocessed">
            <summary>
            The object and its child objects are not processed
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ProcessType">
            <summary>
            Describes the processing types available on the server.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessFull">
            <summary>
            Processes an Analysis Services object and all the objects contained within it.
            When Process Full is executed against an object that has already been processed, Analysis Services drops all data in the object,
            and then processes the object.
            Note that this type of processing is required when a structural change has been made to an object, for example, when an attribute
            hierarchy is added, deleted, or renamed. This processing option is supported for cubes, databases, dimensions, measure groups,
            mining models, mining structures, and partitions. Can be used for databases, dimensions, cubes, measure groups, partitions,
            mining structures, and mining models.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessAdd">
            <summary>
            Performs an incremental update. Can be used for dimensions and partitions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessUpdate">
            <summary>
            Forces a re-read of data and an update of dimension attributes. Flexible aggregations and indexes on related partitions will be dropped.
            For example, this processing option can add new members to a dimension and force a complete re-read of the data to update object attributes.
            This processing option is supported for dimensions and mining models. Can be used for dimensions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessIndexes">
            <summary>
            Creates or rebuilds indexes for all processed partitions. This option results in no operation on unprocessed objects.
            This processing option is supported for cubes, dimensions, measure groups, and partitions. Can be used for dimensions, cubes, measure groups, and partitions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessData">
            <summary>
            Processes data only without building aggregations or indexes. If there is data is in the partitions, it will be dropped before
            re-populating the partition with source data. This processing option is supported for cubes, measure groups, and partitions.
            Can be used for dimensions, cubes, measure groups, and partitions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessDefault">
            <summary>
            Detects the state of the object to be processed, and performs whatever type of processing (such as Full or Incremental) that is
            needed to return it to a fully processed state. This processing option is valid for databases, dimensions, cubes with measure groups
            and partitions, and mining structures with mining models.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessClear">
            <summary>
            Removes data, aggregations, and indexes. Can be used for databases, dimensions, cubes, measure groups, partitions, mining structures, and mining models.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessStructure">
            <summary>
            If the cube is unprocessed, Analysis Services will process, if necessary, all of the cube's dimensions. After that, Analysis Services
            will create only cube definitions. This allows users to start browsing the cube. If this option is applied to a mining structure, it
            populates the mining structure with source data. The difference between this option and the Process Full option is that this option
            does not iterate the processing down to the mining models themselves. This processing option is supported for cubes and mining structures.
            Can be used for cubes and mining structures.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessClearStructureOnly">
            <summary>
            Removes all training data from a mining structure. This processing option is supported for mining structures only. Can be used for mining structures.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessScriptCache">
            <summary>
            Rebuilds the MDX script cache if the cube is already processed. An error will be generated if the cube is not already processed. Can be used for cubes.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessRecalc">
            <summary>
            Specifies the type as ProcessRecalc.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ProcessType.ProcessDefrag">
            <summary>
            Applies to the entire measure group, not on individual partitions, to defragment internal dictionary structures.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerEdition">
            <summary>
            Specifies an enumeration of server edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Standard">
            <summary>
            The Standard edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Standard64">
            <summary>
            The Standard64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Enterprise">
            <summary>
            The Enterprise edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Enterprise64">
            <summary>
            The Enterprise64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Developer">
            <summary>
            The Developer edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Developer64">
            <summary>
            The Developer64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Evaluation">
            <summary>
            The Evaluation edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.Evaluation64">
            <summary>
            The Evaluation64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.LocalCube">
            <summary>
            The LocalCube edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.LocalCube64">
            <summary>
            The LocalCube64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.BusinessIntelligence">
            <summary>
            The BusinessIntelligence edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.BusinessIntelligence64">
            <summary>
            The BusinessIntelligence64 edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.EnterpriseCore">
            <summary>
            The EnterpriseCore edition.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerEdition.EnterpriseCore64">
            <summary>
            The EnterpriseCore64 edition.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.AnnotationVisibility">
            <summary>
            Defines and contains the allowed values for visibility for an Annotation.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AnnotationVisibility.SchemaRowset">
            <summary>
            The annotation is visible in the schema rowset.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.AnnotationVisibility.None">
            <summary>
            The annotation is not visible in the schema rowset.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerPropertyCategory">
            <summary>
            Defines the server property category.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerPropertyCategory.Basic">
            <summary>
            Specifies that the category of the server property is Basic and most likely appears on a property page in an administration tool.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerPropertyCategory.Advanced">
            <summary>
            Specifies that the category of the server property is Advanced.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpersonationMode">
            <summary>
            Defines the access mode to the data source that the service uses when it processes its objects, synchronizes the server, and for the Data Mining statement OPENQUERY (DMX).
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.Default">
            <summary>
            Uses the inherited value from the ImpersonationMode on the DataSourceImpersonationInfo object in the database.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.ImpersonateServiceAccount">
            <summary>
            The credentials of the service account are used.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.ImpersonateAnonymous">
            <summary>
            Currently not supported.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.ImpersonateCurrentUser">
            <summary>
            The current user is impersonated.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.ImpersonateAccount">
            <summary>
            This option is used when the service uses the account and (optionally) a password associated with the data source.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationMode.ImpersonateUnattendedAccount">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreSecurity">
            <summary>
            Enumerates the action to apply on Role objects during database restoration.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RestoreSecurity.CopyAll">
            <summary>
            All Role object are copied from backup to the restored database.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RestoreSecurity.SkipMembership">
            <summary>
            The server retains the membership information.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RestoreSecurity.IgnoreSecurity">
            <summary>
            The Role objects from the backup are not copied to restored database.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpersonationInfoSecurity">
            <summary>
            Defines password availability from data source.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationInfoSecurity.PasswordRemoved">
            <summary>
            Password has been removed.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ImpersonationInfoSecurity.Unchanged">
            <summary>
            Password is still available in data source.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreDataSourceType">
            <summary>
            An enumeration to describe the possible sources of the restore data.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RestoreDataSourceType.Remote">
            <summary>
            Indicates that the restore data comes from a remote device, probably connected through network access.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.RestoreDataSourceType.Local">
            <summary>
            Indicates that the restore data comes from a local device.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationOptions">
            <summary>
            Enumerates the validation options.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationOptions.None">
            <summary>
            Provide main errors only; no detailed validation results, no warnings, no messages, validate bindings.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationOptions.DoNotValidateBindings">
            <summary>
            Do not validate the bindings (KeyColumns, NameColumn etc).
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationOptions.AddDetails">
            <summary>
            Include detailed validation results; for example, if a Dimension has multiple key attributes defined, add an error for each attribute.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationOptions.AddWarnings">
            <summary>
            Add warnings (about best practices usually).
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationOptions.AddMessages">
            <summary>
            Add messages (about best practices usually).
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationRuleType">
            <summary>
            Enumerates the types of validation rule.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRuleType.Error">
            <summary>
            Specifies a validation rule that is an error type.
            </summary>
            <!-- represents a validation error (that would make an object un-deployable) -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRuleType.Warning">
            <summary>
            Specifies a validation rule that is a warning type.
            </summary>
            <!-- represents a validation warning (usually about best practices) -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRuleType.Message">
            <summary>
            Specifies a validation rule that is a message type.
            </summary>
            <!-- for future use, after AS2008 -->
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationRulePriority">
            <summary>
            Enumerates the validation rule priority of analysis services.
            </summary>
            <remarks>
            Main errors are marked as High, detailed errors as Medium; warnings (about best practices) are High, Medium or Low.
            ('main' vs 'detailed' errors: for example if a dimension has multiple key attributes defined, there is 1 'main' error for the
            dimension and multiple 'detailed' errors for each key attribute; the ValidationOptions.AddDetails controls if details are
            provided or not by the Validate method)
            </remarks>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRulePriority.High">
            <summary>
            The priority is set to high.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRulePriority.Medium">
            <summary>
            The priority is set to medium.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationRulePriority.Low">
            <summary>
            The priority is set to low.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ReadWriteMode">
            <summary>
            An enumeration that describes the read/write state of the database.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ReadWriteMode.ReadWrite">
            <summary>
            The state of the database is read/write enabled.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ReadWriteMode.ReadOnly">
            <summary>
            The state of the database is read-only.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ReadWriteMode.ReadOnlyExclusive">
            <summary>
            An exclusive read only mode.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.StorageEngineUsed">
            <summary>
            An enumeration of the different storage engine types allowed by the SSAS service.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.StorageEngineUsed.Traditional">
            <summary>
            The server is running in OLAP mode, which is known as the traditional SSAS mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.StorageEngineUsed.InMemory">
            <summary>
            Specifies that the storage mode is proprietary Analysis Services xVelocity in-memory analytics engine (VertiPaq).
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.StorageEngineUsed.Mixed">
            <summary>
            The server is running in a combination of modes.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.StorageEngineUsed.TabularMetadata">
            <summary>
            The server is running in the new Tabular-Metadata mode
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DirectQueryMode">
            <summary>
            Indicates whether a tabular model is enabled for use in Direct Query mode.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.DirectQueryMode.InMemory">
            <summary>
            Indicates that queries against the model should use only the in-memory data store.
            </summary>
            <!-- All queries go to IMBI storage -->
        </member>
        <member name="F:Microsoft.AnalysisServices.DirectQueryMode.InMemoryWithDirectQuery">
            <summary>
            Indicates that queries against the model should reference the xVelocity in-memory analytics engine (VertiPaq) cache first, and then the relational data source.
            </summary>
            <!-- Queries go to IMBI sorage by default, or directly to data source if specified in connection string -->
        </member>
        <member name="F:Microsoft.AnalysisServices.DirectQueryMode.DirectQueryWithInMemory">
            <summary>
            Indicates that queries against the model should reference primarily the relational data source but can use the cache if available.
            </summary>
            <!-- Queries go directly to data source by default, or to IMBI storage if specified in connection string -->
        </member>
        <member name="F:Microsoft.AnalysisServices.DirectQueryMode.DirectQuery">
            <summary>
            Indicates that queries against the model should reference only the relational data source.
            </summary>
            <!-- All queries go directly to data source -->
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerMode">
            <summary>
            Specifies the server mode used. For more information about server modes and how to set the server deployment mode, see Enable a Standalone VertiPAq Engine Instance.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerMode.Multidimensional">
            <summary>
            Classic OLAP and Data Mining mode.
            </summary>
            <!-- AS 2005 and AS 2008 -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerMode.SharePoint">
            <summary>
            SharePoint Integration mode.
            </summary>
            <!-- AS 2008 R2 -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerMode.Tabular">
            <summary>
            Specifies that the storage mode is proprietary Analysis Services xVelocity in-memory analytics engine (VertiPaq).
            </summary>
            <!-- IMBI -->
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerMode.Default">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ModelType">
            <summary>
            Specifies the type of model.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ModelType.Multidimensional">
            <summary>
            Specifies an Analysis Services OLAP data model, where model composition is based on cubes and dimensions.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ModelType.Tabular">
            <summary>
            Specifies an Analysis Services data model, where model composition is based on tables and relationship modeling constructs.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ModelType.Default">
            <summary>
            The default model type is multidimensional.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerLocation">
            <summary>
            Location of the analysis server
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerLocation.OnPremise">
            <summary>
            Server is an on-premise server
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.ServerLocation.Azure">
            <summary>
            Server is an Azure server
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.SynchronizeSecurity">
            <summary>
            Defines the synchronize security objects.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.SynchronizeSecurity.CopyAll">
            <summary>
            Specifies the copy all objects.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.SynchronizeSecurity.SkipMembership">
            <summary>
            Specifies the skip membership objects.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.SynchronizeSecurity.IgnoreSecurity">
            <summary>
            Specifies the ignored security objects.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TraceEventClass">
            <summary>
            Defines the type of trace event.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.NotAvailable">
            <summary>Type not available.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AuditLogin">
            <summary>Collects all new connection events since the trace was started, such as when a client requests a connection to a server running an instance of SQL Server.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AuditLogout">
            <summary>Collects all new disconnect events since the trace was started, such as when a client issues a disconnect command.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AuditServerStartsAndStops">
            <summary>Records service shut down, start, and pause activities.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AuditObjectPermission">
            <summary>Records object permission changes.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AuditAdminOperations">
            <summary>Records server backup/restore/synchronize/attach/detach/imageload/imagesave.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ProgressReportBegin">
            <summary>Progress report begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ProgressReportEnd">
            <summary>Progress report end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ProgressReportCurrent">
            <summary>Progress report current.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ProgressReportError">
            <summary>Progress report error.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QueryBegin">
            <summary>Query begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QueryEnd">
            <summary>Query end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CommandBegin">
            <summary>Command begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CommandEnd">
            <summary>Command end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.Error">
            <summary>Server error.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ServerStateDiscoverBegin">
            <summary>Start of Server State Discover.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ServerStateDiscoverData">
            <summary>Contents of the Server State Discover Response.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ServerStateDiscoverEnd">
            <summary>End of Server State Discover.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DiscoverBegin">
            <summary>Start of Discover Request.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DiscoverEnd">
            <summary>End of Discover Request.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.Notification">
            <summary>Notification event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.UserDefined">
            <summary>User defined Event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExistingConnection">
            <summary>Existing user connection.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExistingSession">
            <summary>Existing session.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.SessionInitialize">
            <summary>Session Initialize.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.Deadlock">
            <summary>Metadata locks deadlock.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.LockTimeout">
            <summary>Metadata lock timeout.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.LockAcquired">
            <summary>The locks were acquired by the transaction</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.LockReleased">
            <summary>The locks were released by the transaction</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.LockWaiting">
            <summary>The locks are held by another transaction and therefore this transaction is blocking until the locks are released</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QueryCubeBegin">
            <summary>Query cube begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QueryCubeEnd">
            <summary>Query cube end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CalculateNonEmptyBegin">
            <summary>Calculate non empty begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CalculateNonEmptyCurrent">
            <summary>Calculate non empty current.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CalculateNonEmptyEnd">
            <summary>Calculate non empty end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.SerializeResultsBegin">
            <summary>Serialize results begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.SerializeResultsCurrent">
            <summary>Serialize results current.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.SerializeResultsEnd">
            <summary>Serialize results end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExecuteMdxScriptBegin">
            <summary>Execute MDX script begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExecuteMdxScriptCurrent">
            <summary>Execute MDX script current. Deprecated.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExecuteMdxScriptError">
            <summary>An error occurred during MDX script execution.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExecuteMdxScriptEnd">
            <summary>Execute MDX script end.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QueryDimension">
            <summary>Query dimension.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QuerySubcube">
            <summary>Query subcube, for Usage Based Optimization.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.QuerySubcubeVerbose">
            <summary>Query subcube with detailed information. This event may have a negative impact on performance when turned on.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.GetDataFromAggregation">
            <summary>Answer query by getting data from aggregation. This event may have a negative impact on performance when turned on.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.GetDataFromCache">
            <summary>Answer query by getting data from one of the caches. This event may have a negative impact on performance when turned on.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.VertiPaqSEQueryBegin">
            <summary>VertiPaq SE Query</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.VertiPaqSEQueryEnd">
            <summary>VertiPaq SE Query</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ResourceUsage">
            <summary>Reports reads, writes, cpu usage after end of commands and queries.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.VertiPaqSEQueryCacheMatch">
            <summary>VertiPaq SE Query Cache Use</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.VertiPaqSEQueryCacheMiss">
            <summary>VertiPaq SE Query Cache Miss</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DirectQueryBegin">
            <summary>DirectQuery Begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DirectQueryEnd">
            <summary>DirectQuery End.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CalculationEvaluation">
            <summary>Information about the evaluation of calculations. This event will have a negative impact on performance when turned on.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.CalculationEvaluationDetailedInformation">
            <summary>Detailed information about the evaluation of calculations. This event will have a negative impact on performance when turned on.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXQueryPlan">
            <summary>DAX logical/physical plan tree for VertiPaq and DirectQuery modes.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXExtensionExecutionBegin">
            <summary>DAX extension function execution begin event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXExtensionExecutionEnd">
            <summary>DAX extension function execution end event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXExtensionTraceError">
            <summary>DAX extension function error trace event directly traced by extension authors.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXExtensionTraceInfo">
            <summary>DAX extension function informational/telemetry trace event directly traced by extension authors.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXExtensionTraceVerbose">
            <summary>DAX extension function verbose trace event directly traced by extension authors.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AggregateTableRewriteQuery">
            <summary>A query was rewritten according to available aggregate tables</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.AggregateTableRewriteInfo">
            <summary>Information about aggregation table matching.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.DAXQueryShape">
            <summary>Information about DAX query shape.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.FileLoadBegin">
            <summary>File Load Begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.FileLoadEnd">
            <summary>File Load End.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.FileSaveBegin">
            <summary>File Save Begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.FileSaveEnd">
            <summary>File Save End</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.PageOutBegin">
            <summary>PageOut Begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.PageOutEnd">
            <summary>PageOut End</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.PageInBegin">
            <summary>PageIn Begin.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.PageInEnd">
            <summary>PageIn End</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.WLGroupCPUThrottling">
            <summary>Workload Group is throttled on CPU usage</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.WLGroupExceedsMemoryLimit">
            <summary>Workload group exceeds the memory limit</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.WLGroupExceedsProcessingLimit">
            <summary>Workload group exceeds the processing limit</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventClass.ExecuteSourceQuery">
            <summary>Collection of all queries that are executed against the data source</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TraceEventSubclass">
            <summary>
            Specifies the subclass of trace event.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.NotAvailable">
            <summary>Subclass is not available.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InstanceShutdown">
            <summary>The InstanceShutdown subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InstanceStarted">
            <summary>The InstanceStarted subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InstancePaused">
            <summary>The InstancePaused subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InstanceContinued">
            <summary>The InstanceContinued subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Backup">
            <summary>The Backup subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Restore">
            <summary>The Restore subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Synchronize">
            <summary>The Synchronize subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Process">
            <summary>The Process subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Merge">
            <summary>The Merge subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Delete">
            <summary>The Delete subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DeleteOldAggregations">
            <summary>The DeleteOldAggregations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Rebuild">
            <summary>The Rebuild subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Commit">
            <summary>The Commit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Rollback">
            <summary>The Rollback subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CreateIndexes">
            <summary>The CreateIndexes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CreateTable">
            <summary>The CreateTable subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InsertInto">
            <summary>The InsertInto subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Transaction">
            <summary>The Transaction subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Initialize">
            <summary>The Initialize subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Discretize">
            <summary>The Discretize subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Query">
            <summary>The Query subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CreateView">
            <summary>The CreateView subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WriteData">
            <summary>The WriteData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ReadData">
            <summary>The ReadData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GroupData">
            <summary>The GroupData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GroupDataRecord">
            <summary>The GroupDataRecord subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildIndex">
            <summary>The BuildIndex subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Aggregate">
            <summary>The Aggregate subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildDecode">
            <summary>The BuildDecode subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WriteDecode">
            <summary>The WriteDecode subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildDataMiningDecode">
            <summary>The BuildDataMiningDecode subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ExecuteSql">
            <summary>The ExecuteSql subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ExecuteModifiedSql">
            <summary>The ExecuteModifiedSql subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Connecting">
            <summary>The Connecting subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildAggregationsAndIndexes">
            <summary>The BuildAggregationsAndIndexes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MergeAggregationsOnDisk">
            <summary>The MergeAggregationsOnDisk subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildIndexForRigidAggregations">
            <summary>The BuildIndexForRigidAggregations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildIndexForFlexibleAggregations">
            <summary>The BuildIndexForFlexibleAggregations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WriteAggregationsAndIndexes">
            <summary>The WriteAggregationsAndIndexes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WriteSegment">
            <summary>The WriteSegment subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DataMiningProgress">
            <summary>The DataMiningProgress subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ReadBufferFullReport">
            <summary>The ReadBufferFullReport subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCacheConversion">
            <summary>The ProactiveCacheConversion subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildProcessingSchedule">
            <summary>The BuildProcessingSchedule subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MdxQuery">
            <summary>The MdxQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DmxQuery">
            <summary>The DmxQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SqlQuery">
            <summary>The SqlQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Create">
            <summary>The Create subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Alter">
            <summary>The Alter subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DesignAggregations">
            <summary>The DesignAggregations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WBInsert">
            <summary>The WBInsert subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WBUpdate">
            <summary>The WBUpdate subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WBDelete">
            <summary>The WBDelete subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MergePartitions">
            <summary>The MergePartitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Subscribe">
            <summary>The Subscribe subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Batch">
            <summary>The Batch subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BeginTransaction">
            <summary>The BeginTransaction subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CommitTransaction">
            <summary>The CommitTransaction subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RollbackTransaction">
            <summary>The RollbackTransaction subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetTransactionState">
            <summary>The GetTransactionState subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Cancel">
            <summary>The Cancel subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Import80MiningModels">
            <summary>The Import80MiningModels subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Other">
            <summary>The Other subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverConnections">
            <summary>The DiscoverConnections subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverSessions">
            <summary>The DiscoverSessions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverTransactions">
            <summary>The DiscoverTransactions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverDatabaseConnections">
            <summary>The DiscoverDatabaseConnections subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverJobs">
            <summary>The DiscoverJobs subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverLocks">
            <summary>The DiscoverLocks subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverPerformanceCounters">
            <summary>The DiscoverPerformanceCounters subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverMemoryUsage">
            <summary>The DiscoverMemoryUsage subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverJobProgress">
            <summary>The DiscoverJobProgress subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverMemoryGrant">
            <summary>The DiscoverMemoryGrant subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaCatalogs">
            <summary>The SchemaCatalogs subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaTables">
            <summary>The SchemaTables subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaColumns">
            <summary>The SchemaColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaProviderTypes">
            <summary>The SchemaProviderTypes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaCubes">
            <summary>The SchemaCubes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaDimensions">
            <summary>The SchemaDimensions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaHierarchies">
            <summary>The SchemaHierarchies subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaLevels">
            <summary>The SchemaLevels subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMeasures">
            <summary>The SchemaMeasures subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaProperties">
            <summary>The SchemaProperties subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMembers">
            <summary>The SchemaMembers subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaFunctions">
            <summary>The SchemaFunctions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaActions">
            <summary>The SchemaActions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaSets">
            <summary>The SchemaSets subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverInstances">
            <summary>The DiscoverInstances subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaKpis">
            <summary>The SchemaKpis subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMeasureGroups">
            <summary>The SchemaMeasureGroups subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaCommands">
            <summary>The SchemaCommands subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningServices">
            <summary>The SchemaMiningServices subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningServiceParameters">
            <summary>The SchemaMiningServiceParameters subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningFunctions">
            <summary>The SchemaMiningFunctions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningModelContent">
            <summary>The SchemaMiningModelContent subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningModelXml">
            <summary>The SchemaMiningModelXml subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningModels">
            <summary>The SchemaMiningModels subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningColumns">
            <summary>The SchemaMiningColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverDataSources">
            <summary>The DiscoverDataSources subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverProperties">
            <summary>The DiscoverProperties subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverSchemaRowsets">
            <summary>The DiscoverSchemaRowsets subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverEnumerators">
            <summary>The DiscoverEnumerators subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverKeywords">
            <summary>The DiscoverKeywords subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverLiterals">
            <summary>The DiscoverLiterals subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverXmlMetadata">
            <summary>The DiscoverXmlMetadata subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverTraces">
            <summary>The DiscoverTraces subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverTraceDefinitionProviderInfo">
            <summary>The DiscoverTraceDefinitionProviderInfo subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverTraceColumns">
            <summary>The DiscoverTraceColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverTraceEventCategories">
            <summary>The DiscoverTraceEventCategories subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningStructures">
            <summary>The SchemaMiningStructures subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMiningStructureColumns">
            <summary>The SchemaMiningStructureColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverMasterKey">
            <summary>The DiscoverMasterKey subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaInputDataSources">
            <summary>The SchemaInputDataSources subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverLocations">
            <summary>The DiscoverLocations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverPartitionDimensionStat">
            <summary>The DiscoverPartitionDimensionStat subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverPartitionStat">
            <summary>The DiscoverPartitionStat subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverDimensionStat">
            <summary>The DiscoverDimensionStat subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCachingBegin">
            <summary>The ProactiveCachingBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCachingEnd">
            <summary>The ProactiveCachingEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.FlightRecorderStarted">
            <summary>The FlightRecorderStarted subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.FlightRecorderStopped">
            <summary>The FlightRecorderStopped subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ConfigurationPropertiesUpdated">
            <summary>The ConfigurationPropertiesUpdated subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SqlTrace">
            <summary>The SqlTrace subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ObjectCreated">
            <summary>The ObjectCreated subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ObjectDeleted">
            <summary>The ObjectDeleted subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ObjectAltered">
            <summary>The ObjectAltered subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCachingPollingBegin">
            <summary>The ProactiveCachingPollingBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCachingPollingEnd">
            <summary>The ProactiveCachingPollingEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.FlightRecorderSnapshotBegin">
            <summary>The FlightRecorderSnapshotBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.FlightRecorderSnapshotEnd">
            <summary>The FlightRecorderSnapshotEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProactiveCachingNotifiableObjectUpdated">
            <summary>The ProactiveCachingNotifiableObjectUpdated subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.LazyProcessingStartProcessing">
            <summary>The LazyProcessingStartProcessing subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.LazyProcessingProcessingComplete">
            <summary>The LazyProcessingProcessingComplete subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SessionOpenedEventBegin">
            <summary>The SessionOpenedEventBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SessionOpenedEventEnd">
            <summary>The SessionOpenedEventEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SessionClosingEventBegin">
            <summary>The SessionClosingEventBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SessionClosingEventEnd">
            <summary>The SessionClosingEventEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CubeOpenedEventBegin">
            <summary>The CubeOpenedEventBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CubeOpenedEventEnd">
            <summary>The CubeOpenedEventEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CubeClosingEventBegin">
            <summary>The CubeClosingEventBegin subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CubeClosingEventEnd">
            <summary>The CubeClosingEventEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetData">
            <summary>The GetData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ProcessCalculatedMembers">
            <summary>The ProcessCalculatedMembers subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PostOrder">
            <summary>The PostOrder subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SerializeAxes">
            <summary>The SerializeAxes subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SerializeCells">
            <summary>The SerializeCells subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SerializeSqlRowset">
            <summary>The SerializeSqlRowset subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SerializeFlattenedRowset">
            <summary>The SerializeFlattenedRowset subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CacheData">
            <summary>The CacheData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.NonCacheData">
            <summary>The NonCacheData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InternalData">
            <summary>The InternalData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SqlData">
            <summary>The SqlData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MeasureGroupStructuralChange">
            <summary>The MeasureGroupStructuralChange subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MeasureGroupDeletion">
            <summary>The MeasureGroupDeletion subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetDataFromMeasureGroupCache">
            <summary>The GetDataFromMeasureGroupCache subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetDataFromFlatCache">
            <summary>The GetDataFromFlatCache subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetDataFromCalculationCache">
            <summary>The GetDataFromCalculationCache subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.GetDataFromPersistedCache">
            <summary>The GetDataFromPersistedCache subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Detach">
            <summary>The Detach subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Attach">
            <summary>The Attach subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.AnalyzeEncodeData">
            <summary>The AnalyzeEncodeData subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CompressSegment">
            <summary>The CompressSegment subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.WriteTableColumn">
            <summary>The WriteTableColumn subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RelationshipBuildPrepare">
            <summary>The RelationshipBuildPrepare subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildRelationshipSegment">
            <summary>The BuildRelationshipSegment subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SchemaMeasureGroupDimensions">
            <summary>The SchemaMeasureGroupDimensions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Load">
            <summary>The Load subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MetadataLoad">
            <summary>The MetadataLoad subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DataLoad">
            <summary>The DataLoad subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PostLoad">
            <summary>The PostLoad subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MetadataTraversalDuringBackup">
            <summary>The MetadataTraversalDuringBackup subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SetAuthContext">
            <summary>The SetAuthContext subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ImageLoad">
            <summary>The ImageLoad subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ImageSave">
            <summary>The ImageSave subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TransactionAbortRequested">
            <summary>The TransactionAbortRequested subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqScan">
            <summary>The VertiPaqScan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularQuery">
            <summary>The TabularQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaq">
            <summary>The VertiPaq subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.HierarchyProcessing">
            <summary>The HierarchyProcessing subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqScanInternal">
            <summary>The VertiPaqScanInternal subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularQueryInternal">
            <summary>The TabularQueryInternal subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.SwitchingDictionary">
            <summary>The SwitchingDictionary subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MdxScript">
            <summary>The MdxScript subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.MdxScriptCommand">
            <summary>The MdxScriptCommand subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverXEventTraceDefinition">
            <summary>The DiscoverXEventTraceDefinition subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.UserHierarchyProcessingQuery">
            <summary>The UserHierarchyProcessingQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.UserHierarchyProcessingQueryInternal">
            <summary>The UserHierarchyProcessingQueryInternal subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DAXQuery">
            <summary>The DAXQuery subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_COMMANDS">
            <summary>The DISCOVER_COMMANDS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_COMMAND_OBJECTS">
            <summary>The DISCOVER_COMMAND_OBJECTS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_OBJECT_ACTIVITY">
            <summary>The DISCOVER_OBJECT_ACTIVITY subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_OBJECT_MEMORY_USAGE">
            <summary>The DISCOVER_OBJECT_MEMORY_USAGE subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_XEVENT_TRACE_DEFINITION">
            <summary>The DISCOVER_XEVENT_TRACE_DEFINITION subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_STORAGE_TABLES">
            <summary>The DISCOVER_STORAGE_TABLES subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_STORAGE_TABLE_COLUMNS">
            <summary>The DISCOVER_STORAGE_TABLE_COLUMNS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS">
            <summary>The DISCOVER_STORAGE_TABLE_COLUMN_SEGMENTS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_CALC_DEPENDENCY">
            <summary>The DISCOVER_CALC_DEPENDENCY subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_CSDL_METADATA">
            <summary>The DISCOVER_CSDL_METADATA subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqCacheExactMatch">
            <summary>The VertiPaqCacheExactMatch subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InitEvalNodeStart">
            <summary>The InitEvalNodeStart subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.InitEvalNodeEnd">
            <summary>The InitEvalNodeEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeStart">
            <summary>The BuildEvalNodeStart subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeEnd">
            <summary>The BuildEvalNodeEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PrepareEvalNodeStart">
            <summary>The PrepareEvalNodeStart subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PrepareEvalNodeEnd">
            <summary>The PrepareEvalNodeEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RunEvalNodeStart">
            <summary>The RunEvalNodeStart subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RunEvalNodeEnd">
            <summary>The RunEvalNodeEnd subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeEliminatedEmptyCalculations">
            <summary>The BuildEvalNodeEliminatedEmptyCalculations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeSubtractedCalculationSpaces">
            <summary>The BuildEvalNodeSubtractedCalculationSpaces subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeAppliedVisualTotals">
            <summary>The BuildEvalNodeAppliedVisualTotals subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeDetectedCachedEvaluationNode">
            <summary>The BuildEvalNodeDetectedCachedEvaluationNode subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BuildEvalNodeDetectedCachedEvaluationResults">
            <summary>The BuildEvalNodeDetectedCachedEvaluationResults subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PrepareEvalNodeBeginPrepareEvaluationItem">
            <summary>The PrepareEvalNodeBeginPrepareEvaluationItem subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.PrepareEvalNodeFinishedPrepareEvaluationItem">
            <summary>The PrepareEvalNodeFinishedPrepareEvaluationItem subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RunEvalNodeFinishedCalculatingItem">
            <summary>The RunEvalNodeFinishedCalculatingItem subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DAXVertiPaqLogicalPlan">
            <summary>The DAXVertiPaqLogicalPlan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DAXVertiPaqPhysicalPlan">
            <summary>The DAXVertiPaqPhysicalPlan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DAXDirectQueryAlgebrizerTree">
            <summary>The DAXDirectQueryAlgebrizerTree subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DAXDirectQueryLogicalPlan">
            <summary>The DAXDirectQueryLogicalPlan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CloneDatabase">
            <summary>The CloneDatabase subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RGWLGroupExceedHighMemoryLimit">
            <summary>The RGWLGroupExceedHighMemoryLimit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RGWLGroupExceedHardMemoryLimit">
            <summary>The RGWLGroupExceedHardMemoryLimit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RGWLGroupBelowHighMemoryLimit">
            <summary>The RGWLGroupBelowHighMemoryLimit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RGWLGroupBelowHardMemoryLimit">
            <summary>The RGWLGroupBelowHardMemoryLimit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqScanQueryPlan">
            <summary>The VertiPaqScanQueryPlan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqScanLocal">
            <summary>The VertiPaqScanLocal subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqScanRemote">
            <summary>The VertiPaqScanRemote subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Interpret">
            <summary>The Interpret subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularCreate">
            <summary>The TabularCreate subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularAlter">
            <summary>The TabularAlter subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularDelete">
            <summary>The TabularDelete subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularRefresh">
            <summary>The TabularRefresh subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.ExtAuth">
            <summary>The ExtAuth subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Dbcc">
            <summary>The Dbcc subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularRename">
            <summary>The TabularRename subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSequencePoint">
            <summary>The TabularSequencePoint subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularCommit">
            <summary>The TabularCommit subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSave">
            <summary>The TabularSave subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_RESOURCE_POOLS">
            <summary>The DISCOVER_RESOURCE_POOLS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_RING_BUFFERS">
            <summary>The DISCOVER_RING_BUFFERS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaModel">
            <summary>The TabularSchemaModel subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaDataSources">
            <summary>The TabularSchemaDataSources subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaTables">
            <summary>The TabularSchemaTables subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaColumns">
            <summary>The TabularSchemaColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaAttributeHierarchies">
            <summary>The TabularSchemaAttributeHierarchies subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPartitions">
            <summary>The TabularSchemaPartitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRelationships">
            <summary>The TabularSchemaRelationships subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaMeasures">
            <summary>The TabularSchemaMeasures subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaHierarchies">
            <summary>The TabularSchemaHierarchies subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaLevels">
            <summary>The TabularSchemaLevels subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaTableStorages">
            <summary>The TabularSchemaTableStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaColumnStorages">
            <summary>The TabularSchemaColumnStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPartitionStorages">
            <summary>The TabularSchemaPartitionStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaSegmentMapStorages">
            <summary>The TabularSchemaSegmentMapStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaDictionaryStorages">
            <summary>The TabularSchemaDictionaryStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaColumnPartitionStorages">
            <summary>The TabularSchemaColumnPartitionStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRelationshipStorages">
            <summary>The TabularSchemaRelationshipStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRelationshipIndexStorages">
            <summary>The TabularSchemaRelationshipIndexStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaAttributeHierarchyStorages">
            <summary>The TabularSchemaAttributeHierarchyStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaHierarchyStorages">
            <summary>The TabularSchemaHierarchyStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaKpis">
            <summary>The TabularSchemaKpis subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaStorageFolders">
            <summary>The TabularSchemaStorageFolders subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaStorageFiles">
            <summary>The TabularSchemaStorageFiles subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaSegmentStorages">
            <summary>The TabularSchemaSegmentStorages subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaCultures">
            <summary>The TabularSchemaCultures subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaObjectTranslations">
            <summary>The TabularSchemaObjectTranslations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaLinguisticMetadata">
            <summary>The TabularSchemaLinguisticMetadata subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaAnnotations">
            <summary>The TabularSchemaAnnotations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularUpgrade">
            <summary>The TabularUpgrade subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularMergePartitions">
            <summary>The TabularMergePartitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DisableDatabase">
            <summary>The DisableDatabase subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TokenizationStoreProcessing">
            <summary>The TokenizationStoreProcessing subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CheckTabularDataStructure">
            <summary>The CheckTabularDataStructure subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CheckColumnDataForDuplicatesOrNullValues">
            <summary>The CheckColumnDataForDuplicatesOrNullValues subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.JSON">
            <summary>The JSON subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_XEVENT_PACKAGES">
            <summary>The DISCOVER_XEVENT_PACKAGES subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_XEVENT_OBJECTS">
            <summary>The DISCOVER_XEVENT_OBJECTS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_XEVENT_OBJECT_COLUMNS">
            <summary>The DISCOVER_XEVENT_OBJECT_COLUMNS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DISCOVER_XEVENT_SESSION_TARGETS">
            <summary>The DISCOVER_XEVENT_SESSION_TARGETS subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectives">
            <summary>The TabularSchemaPerspectives subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectiveTables">
            <summary>The TabularSchemaPerspectiveTables subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectiveColumns">
            <summary>The TabularSchemaPerspectiveColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectiveHierarchies">
            <summary>The TabularSchemaPerspectiveHierarchies subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectiveMeasures">
            <summary>The TabularSchemaPerspectiveMeasures subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRoles">
            <summary>The TabularSchemaRoles subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRoleMemberships">
            <summary>The TabularSchemaRoleMemberships subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaTablePermissions">
            <summary>The TabularSchemaTablePermissions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaVariations">
            <summary>The TabularSchemaVariations subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqCacheProbe">
            <summary>The VertiPaqCacheProbe subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.VertiPaqCacheNotFound">
            <summary>The VertiPaqCacheNotFound subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.JsonCommand">
            <summary>The JsonCommand subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.Evict">
            <summary>The Evict subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.CommitImport">
            <summary>The CommitImport subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.OpenedConnection">
            <summary>The OpenedConnection subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.BatchVertiPaqScan">
            <summary>The BatchVertiPaqScan subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.RewriteAttempted">
            <summary>Alternate Source Rewrite attempted subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.AnalyzeRefreshPolicyImpactForTabularPartition">
            <summary>The AnalyzeRefreshPolicyImpactForTabularPartition subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaSets">
            <summary>The TabularSchemaSets subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPerspectiveSets">
            <summary>The TabularSchemaPerspectiveSets subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaExtendedProperties">
            <summary>The TabularSchemaExtendedProperties subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaExpressions">
            <summary>The TabularSchemaExpressions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaColumnPermissions">
            <summary>The TabularSchemaColumnPermissions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaDetailRowsDefinitions">
            <summary>The TabularSchemaDetailRowsDefinitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRelatedColumnDetails">
            <summary>The TabularSchemaRelatedColumnDetails subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaGroupByColumns">
            <summary>The TabularSchemaGroupByColumns subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaCalculationGroups">
            <summary>The TabularSchemaCalculationGroups subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaCalculationItems">
            <summary>The TabularSchemaCalculationItems subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaAlternateOfDefinitions">
            <summary>The TabularSchemaAlternateOfDefinitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaRefreshPolicies">
            <summary>The TabularSchemaRefreshPolicies subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverPowerBIDatasources">
            <summary>The DiscoverPowerBIDatasources subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaFormatStringDefinitions">
            <summary>The TabularSchemaFormatStringDefinitions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverMExpressions">
            <summary>The DiscoverMExpressions subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaPowerbiRoles">
            <summary>The TabularSchemaPowerbiRoles subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaQueryGroups">
            <summary>The TabularSchemaQueryGroups subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverDBMemoryStats">
            <summary>The DiscoverDBMemoryStats subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.DiscoverMemoryStats">
            <summary>The DiscoverMemoryStats subclass.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceEventSubclass.TabularSchemaAnalyticsAimetadata">
            <summary>The TabularSchemaAnalyticsAimetadata subclass.</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.TraceColumn">
            <summary>
            Represent the trace event columns.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.EventClass">
            <summary>Event Class is used to categorize events.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.EventSubclass">
            <summary>Event Subclass provides additional information about each event class.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.CurrentTime">
            <summary>Time at which the event started, when available. For filtering, expected formats are 'YYYY-MM-DD' and 'YYYY-MM-DD HH:MM:SS'.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.StartTime">
            <summary>Time at which the event started, when available. For filtering, expected formats are 'YYYY-MM-DD' and 'YYYY-MM-DD HH:MM:SS'.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.EndTime">
            <summary>Time at which the event ended. This column is not populated for starting event classes, such as SQL:BatchStarting or SP:Starting. For filtering, expected formats are 'YYYY-MM-DD' and 'YYYY-MM-DD HH:MM:SS'.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.Duration">
            <summary>Amount of time (in milliseconds) taken by the event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.CpuTime">
            <summary>Amount of CPU time (in milliseconds) used by the event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.JobID">
            <summary>Job ID for progress.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.SessionType">
            <summary>Session type (what entity caused the operation).</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ProgressTotal">
            <summary>Progress total.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.IntegerData">
            <summary>Integer data.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ObjectID">
            <summary>Object ID (note this is a string).</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ObjectType">
            <summary>Object type.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ObjectName">
            <summary>Object name.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ObjectPath">
            <summary>Object path.  A comma-separated list of parents, starting with the object's parent.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ObjectReference">
            <summary>Object reference.  Encoded as XML for all parents, using tags to describe the object.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.Severity">
            <summary>Severity level of an exception.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.Success">
            <summary>1 = success. 0 = failure (for example, a 1 means success of a permissions check and a 0 means a failure of that check).</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.Error">
            <summary>Error number of a given event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ConnectionID">
            <summary>Unique connection ID.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.DatabaseName">
            <summary>Name of the database in which the statement of the user is running.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.NTUserName">
            <summary>Windows user name.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.NTDomainName">
            <summary>Windows domain to which the user belongs.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ClientHostName">
            <summary>Name of the computer on which the client is running. This data column is populated if the host name is provided by the client.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ClientProcessID">
            <summary>The process ID of the client application.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ApplicationName">
            <summary>Name of the client application that created the connection to the server. This column is populated with the values passed by the application rather than the displayed name of the program.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.SessionID">
            <summary>Session GUID.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.NTCanonicalUserName">
            <summary>User name in canonical form.  For example, engineering.microsoft.com/software/someone.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.Spid">
            <summary>Server process ID.  This uniquely identifies a user session. This directly corresponds to the session GUID used by XML/A.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.TextData">
            <summary>Text data associated with the event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ServerName">
            <summary>Name of the server producing the event.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.RequestParameters">
            <summary>Parameters for parameterized queries and commands.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.RequestProperties">
            <summary>XMLA request properties.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ActivityID">
            <summary>The activity ID is used to track the request(s) from the same operation.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.RequestID">
            <summary>The request ID is used to track a request.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.CalculationExpression">
            <summary>Expression being evaluated when error occurred.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ErrorType">
            <summary>Error Type: 0 = unknown, 1 = user, 2 = system.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.FunctionName">
            <summary>Name of the Dax extension function being executed.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.UserObjectID">
            <summary>User Object ID.</summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.TraceColumn.ApplicationContext">
            <summary>The value of the ApplicationContext XMLA property as provided by external applications to assist with end-to-end correlation of user activities.</summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.ErrorConfiguration">
            <summary>
            Specifies settings for handling errors that can occur when the parent element is processed. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ErrorConfiguration.#ctor">
            <summary>
            Initializes a new instance of the ErrorConfiguration class using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ErrorConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of ErrorConfiguration using a named keyErrorLogFile.
            </summary>
            <param name="keyErrorLogFile">A String that contains the name of the keyErrorLogFile.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ErrorConfiguration.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of ErrorConfiguration using a named keyErrorLogFile and an keyErrorLimit.
            </summary>
            <param name="keyErrorLogFile">A String that contains the name of the keyErrorLogFile.</param>
            <param name="keyErrorLimit">An Integer representation of the limit on number of errors logged.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyErrorLimit">
            <summary>
            Gets or sets the number of errors allowed during processing.
            </summary>
            <value>The Integer value representing the maximum number of error messages allowed.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyErrorLogFile">
            <summary>
            Gets or sets the file name for logging processing errors.
            </summary>
            <value>The file name itself.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyErrorAction">
            <summary>
            Gets or sets the action for Analysis Services to take when an error occurs on a key.
            </summary>
            <value>An enumeration that corresponds to the allowed values for KeyErrorAction.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyErrorLimitAction">
            <summary>
            Gets or sets the action Analysis Services takes when the key error count that is specified in the KeyErrorLimit element is reached.
            </summary>
            <value>The enumeration that corresponds to the allowed values for KeyErrorLimitAction.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyNotFound">
            <summary>
            Gets or sets how Analysis Services responds when it encounters a referential integrity error.
            </summary>
            <value>An enumeration that corresponds to the allowed values for KeyNotFound.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.KeyDuplicate">
            <summary>
            Gets or sets the KeyDuplicate property for an ErrorConfiguration object. This determines how Analysis Services handles a duplicate key error if it encounters one during processing.
            </summary>
            <value>An enumeration of allowed values for KeyDuplicate.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.NullKeyConvertedToUnknown">
            <summary>
            Gets or sets the action to be taken when a null conversion error is encountered.
            </summary>
            <value>An enumeration that corresponds to the allowed values for NullKeyConvertedToUnknown.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.NullKeyNotAllowed">
            <summary>
            Gets or sets the property that determines how Analysis Services processing engine handles a null key error encountered during processing.
            </summary>
            <value>An enumeration that corresponds to the allowed values for NullKeyNotAllowed.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ErrorConfiguration.CalculationError">
            <summary>
            Gets or sets the calculation error that occurs during configuration.
            </summary>
            <value>The calculation error that occurs during configuration.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ErrorConfiguration.CopyTo(Microsoft.AnalysisServices.ErrorConfiguration)">
            <summary>
            Creates a full copy of an object into the existing object that is passed as a parameter.
            </summary>
            <param name="obj">The object you are copying to.</param>
            <returns>The object copied to.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ErrorConfiguration.Clone">
            <summary>
            Creates a new, full copy of an object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.AmoException">
            <summary>
            Represents an exception that is raised when an AMO error or warning is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoException.#ctor">
            <summary>
            Initializes a new instance of the AmoException class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AmoException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AmoException class using the specified message text.
            </summary>
            <param name="message">A System.String value that specifies the message text that describes the event that caused the exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.AmoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AmoException class with message text and inner exception.
            </summary>
            <param name="message">The message text that describes the event that caused the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.OperationException">
            <summary>
            Represents the errors of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.OperationException.XmlaRequest">
            <summary>
            XMLA request that was sent to Server and failed [Can be null].
            </summary>
            <!--
            In principle, OperationException always means that some request was sent to server and server returned an error,
            so XmlaRequest should not be null (i.e. there is always some xmla request)
            In practice, TOM doesn't collect Xmla request for operations that TOM is doing through AMO, like BeginTransaction, CommitTransaction, RollbackTransaction.
            Two reasons: 
            1) TOM wants to use AMO APIs directly and don't get into a business of capturing XMLA first and sending it separately then like BackEnd.dll does
            2) XMLA requests that AMO sends because of BeginTransaction/CommitTransaction/RollbackTransaction don't contaning anything interesting, they're always the same,
               in constrast to XMLAs produced by Model.SaveChanges(), which are always different and depend on user's manipulations on the Model.
            -->
        </member>
        <member name="M:Microsoft.AnalysisServices.OperationException.#ctor(Microsoft.AnalysisServices.XmlaResultCollection)">
            <summary>
            Initializes a new instance of the OperationException class.
            </summary>
            <param name="results">The collection of XMLA results that trigerred the exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.OperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.OperationException.Results">
            <summary>
            Gets the XMLA results of the operation.
            </summary>
            <value>The results of the operation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.OperationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>The error message that explains the reason for the exception, or an empty string ("").</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ResponseFormatException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ResponseFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResponseFormatException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ResponseFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ResponseFormatException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ConnectionException">
            <summary>
            The exception that is thrown when a connection problem arises between the server and current application. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionException.#ctor">
            <summary>
            Initializes a new instance of the ConnectionException class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionException class using the specified message text.
            </summary>
            <param name="message">A System.String value that specifies the message text that describes the event that caused the exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ConnectionException class with message text and inner exception.
            </summary>
            <param name="message">The message text that describes the event that caused the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ConnectionException.ExceptionCause">
            <summary>
            Gets a ConnectionExceptionCause value to explain the origin of the exception.
            </summary>
            <value>The cause of the exception.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.JsonSerializationException">
            <summary>
            Represents an exception thrown during a serialization or deserialization operation to/from JSON.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.JsonSerializationException.HasLineInfo">
            <summary>
            Gets a value indicating whether the exception can return line information.
            </summary>
            <value>true if the exception can return line information; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number that caused the exception.
            </summary>
            <value>The current line number.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.JsonSerializationException.LinePosition">
            <summary>
            Gets the position in the line where the exception occurred.
            </summary>
            <value>The line position.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the JsonSerializationException class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JsonSerializationException class using the specified message text.
            </summary>
            <param name="message">A System.String value that specifies the message text that describes the event that caused the exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the JsonSerializationException class with message text and inner exception.
            </summary>
            <param name="message">The message text that describes the event that caused the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the JsonSerializationException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.JsonSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpactDetail">
            <summary>
            Contains one detail result for an impact analysis operation.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetail.Object">
            <summary>
            Gets the object that would be affected by the planned operations in impact analysis.
            </summary>
            <value>The object that would be affected by the planned operations in impact analysis.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetail.Impact">
            <summary>
            Gets or sets the type of impact the planned operation has on current Object.
            </summary>
            <value>An ImpactAnalysisType value that the planned operation has on current Object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetail.Severity">
            <summary>
            Gets or sets a string with the values Error or Warning depending on the severity of the impact analysis.
            </summary>
            <value>A string with the values Error or Warning depending on the severity of the impact analysis.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetail.FaultCode">
            <summary>
            Gets or sets the error code from executing the intended operation.
            </summary>
            <value>A system.string with the error code from executing the planned operation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpactDetail.Description">
            <summary>
            Gets or sets the error or warning message description from the impact analysis operation.
            </summary>
            <value>A system.string with the error or warning message description from the impact analysis operation.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImpersonationInfo">
            <summary>
            Defines the type of credentials used to establish a connection to the server.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.#ctor">
            <summary>
            Initializes a new instance of ImpersonationInfo using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.#ctor(Microsoft.AnalysisServices.ImpersonationMode)">
            <summary>
            Initializes a new instance of ImpersonationInfo for the specified ImpersonationMode.
            </summary>
            <param name="mode">An ImpersonationMode that contains the mode of impersonating.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of ImpersonationInfo for the specified user account and password.
            </summary>
            <param name="account">A String that contains the user account.</param>
            <param name="password">A String that contains the password.</param>
            <remarks>The inpersonation-mode of the ImpersonationInfo is set to ImpersonationMode.ImpersonateAccount.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.#ctor(Microsoft.AnalysisServices.ImpersonationMode,System.String,System.String)">
            <summary>
            Initializes a new instance of ImpersonationInfo for the specified ImpersonationMode, user account, and password.
            </summary>
            <param name="mode">An ImpersonationMode that contains the mode of impersonating.</param>
            <param name="account">A String that contains the user account.</param>
            <param name="password">A String that contains the password.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpersonationInfo.ImpersonationMode">
            <summary>
            Gets or sets the access mode the service uses to connect to the data source.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpersonationInfo.Account">
            <summary>
            Gets or sets the user account.
            </summary>
            <value>A String with the user account.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpersonationInfo.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>A String with the password for the user account.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImpersonationInfo.ImpersonationInfoSecurity">
            <summary>
            Gets or sets the password availability from data source.
            </summary>
            <value>An ImpersonationInfoSecurity value with password availability from data source.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.CopyTo(Microsoft.AnalysisServices.ImpersonationInfo)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImpersonationInfo.ToString">
            <summary>
            Returns a System.String representation of current object.
            </summary>
            <returns>A System.String representation of current object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.IProcessable">
            <summary>
            Represents an object that is processable.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.IProcessable.LastProcessed">
            <summary>
            Gets the date and time on which the IProcessable was last processed.
            </summary>
            <value>A DateTime that contains the date on which the IProcessable was last processed.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.IProcessable.State">
            <summary>
            Gets the current state of the IProcessable that was last processed.
            </summary>
            <value>The current state of the IProcessable that was last processed.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.CanProcess(Microsoft.AnalysisServices.ProcessType)">
            <summary>
            Indicates whether the IProcessable can perform the specified processing.
            </summary>
            <param name="processType">The type of processing expected to be performed. </param>
            <returns>true if the IProcessable can perform the specified processing; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process">
            <summary>
            Executes a process that is associated with the IProcessable with the default type.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process(Microsoft.AnalysisServices.ProcessType)">
            <summary>
            Executes a process that is associated with the IProcessable with the specified type.
            </summary>
            <param name="processType">The type of process to perform. </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration)">
            <summary>
            Executes a process that is associated with the IProcessable with the specified process type and error configuration.
            </summary>
            <param name="processType">The type of process to perform.</param>
            <param name="errorConfiguration">The configuration used for handling errors.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection)">
            <summary>
            Executes a process that is associated with the IProcessable with the specified process type, error configuration and warnings.
            </summary>
            <param name="processType">The type of process to perform.</param>
            <param name="errorConfiguration">The configuration used for handling errors.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection)">
            <summary>
            Executes a process that is associated with the IProcessable with the specified process type, error configuration, warnings and impact details.
            </summary>
            <param name="processType">The type of process to perform.</param>
            <param name="errorConfiguration">The configuration used for handling errors.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
            <param name="impactResult">The collection of detail on the ImpactDetailCollection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IProcessable.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection,System.Boolean)">
            <summary>
            Executes a process that is associated with the IProcessable with the specified process type, error configuration, warnings and impact details.
            </summary>
            <param name="processType">The type of process to perform.</param>
            <param name="errorConfiguration">The configuration used for handling errors.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
            <param name="impactResult">The collection of detail on the ImpactDetailCollection.</param>
            <param name="analyzeImpactOnly">true to analyze impact only; otherwise, false.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.IDeserializationStartCallback">
            <summary>
            Specifies the deserialization start callback.
            </summary>
            <remarks>
            IDeserializationStartCallback is similar to System.Runtime.Serialization.IDeserializationCallback but its goal is to inform object that its deserialization begun.
            In can be implemented on the object, or/and on the object's designer.
            </remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.IDeserializationStartCallback.OnDeserializationBegin(System.Object)">
            <summary>
            Indicates the start of the deserialization.
            </summary>
            <param name="sender">The object that sends the callback.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.MajorObject">
            <summary>
            Serves as the base class from which all major objects are derived.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.#ctor">
            <summary>
            Initializes a new major object as implemented by the derived class using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.#ctor(System.String)">
            <summary>
            Initializes a new major object as implemented by the derived class using the specified object name.
            </summary>
            <param name="name">A System.String containing the name of the object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new major object as implemented by the derived class using the specified object name and identifier of the object.
            </summary>
            <param name="name">A System.String containing the name of the object.</param>
            <param name="id">A System.String containing the identifier of the object.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.MajorObject.IsLoaded">
            <summary>
            Gets a value that indicates whether MajorObject have been loaded.
            </summary>
            <value>true if MajorObject have been loaded; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.MajorObject.CreatedTimestamp">
            <summary>
            Gets or sets the date and time of the creation of the object.
            </summary>
            <value>A System.DateTime value with date and time of creation of the object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.MajorObject.LastSchemaUpdate">
            <summary>
            Gets or sets the date and time when current object schema was last updated.
            </summary>
            <value>A System.DateTime value with the date and time when current object schema was last updated.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.MajorObject.Description">
            <summary>
            Gets or sets the description of major object.
            </summary>
            <value>The description of the object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.MajorObject.Annotations">
            <summary>
            Gets the collection of all annotations associated with the major object.
            </summary>
            <value>An AnnotationCollection object that has all the annotations.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Refresh">
            <summary>
            Updates the object from server definitions.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Refresh(System.Boolean)">
            <summary>
            Updates the object from server definitions, as well as loaded dependent objects [if specified].
            </summary>
            <param name="full">Specifies a Boolean value to refresh loaded dependent objects if true.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Refresh(System.Boolean,Microsoft.AnalysisServices.RefreshType)">
            <summary>
            Updates the object from server definitions, as well as loaded dependent objects [if specified].
            </summary>
            <param name="full">Specifies a Boolean value to refresh loaded dependent objects if true.</param>
            <param name="type">Specifies a RefreshType value that determines which dependent objects to refresh.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update">
            <summary>
            Updates server definition of current object to actual values using the default values to update dependent objects.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update(Microsoft.AnalysisServices.UpdateOptions)">
            <summary>
            Updates server definition of current object to actual values using the specified options to update dependent objects.
            </summary>
            <param name="options">Specifies an UpdateOptions value that determines how to update dependent objects.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update(Microsoft.AnalysisServices.UpdateOptions,Microsoft.AnalysisServices.UpdateMode)">
            <summary>
            Updates server definition of current object to actual values using the specified options to update dependent objects.
            </summary>
            <param name="options">Specifies an UpdateOptions value that determines how to update dependent objects.</param>
            <param name="mode">Specifies an UpdateMode value that determines what to do if dependent objects exists.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update(Microsoft.AnalysisServices.UpdateOptions,Microsoft.AnalysisServices.UpdateMode,Microsoft.AnalysisServices.XmlaWarningCollection)">
            <summary>
            Updates server definition of current object to actual values using the specified options to update dependent objects and reports any warnings from operation.
            </summary>
            <param name="options">Specifies an UpdateOptions value that determines how to update dependent objects.</param>
            <param name="mode">Specifies an UpdateMode value that determines what to do if dependent objects exists.</param>
            <param name="warnings">Specifies an XmlaWarningCollection with all warnings resulting from update operation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update(Microsoft.AnalysisServices.UpdateOptions,Microsoft.AnalysisServices.UpdateMode,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection)">
            <summary>
            Updates server definition of current object to actual values using specified options to update dependent objects, reports any warnings from operation, and returns affected objects from operation.
            </summary>
            <param name="options">Specifies an UpdateOptions value that determines how to update dependent objects.</param>
            <param name="mode">Specifies an UpdateMode value that determines what to do if dependent objects exists.</param>
            <param name="warnings">Specifies an XmlaWarningCollection with all warnings resulting from update operation.</param>
            <param name="impactResult">Specifies an ImpactDetailCollection with all affected objects from update operation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Update(Microsoft.AnalysisServices.UpdateOptions,Microsoft.AnalysisServices.UpdateMode,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection,System.Boolean)">
            <summary>
            Updates server definition of current object to actual values using specified options to update dependent objects, reports any warnings from operation, and returns affected objects from operation. If analyzeImpactOnly is true, an impact analysis operation is performed with no update operation.
            </summary>
            <param name="options">Specifies an UpdateOptions value that determines how to update dependent objects.</param>
            <param name="mode">Specifies an UpdateMode value that determines what to do if dependent objects exists.</param>
            <param name="warnings">Specifies an XmlaWarningCollection with all warnings resulting from update operation.</param>
            <param name="impactResult">Specifies an ImpactDetailCollection with all affected objects from update operation.</param>
            <param name="analyzeImpactOnly">If true, only the impact analysis is executed, otherwise update operation is executed.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Drop">
            <summary>
            Removes current object and updates server.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Drop(Microsoft.AnalysisServices.DropOptions)">
            <summary>
            Removes current object and updates server using specified options.
            </summary>
            <param name="options">Defines the behavior of the drop method on dependent objects.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Drop(Microsoft.AnalysisServices.DropOptions,Microsoft.AnalysisServices.XmlaWarningCollection)">
            <summary>
            Removes current object and updates server using specified options. Warnings resulting from drop operation are returned on the specified warnings object.
            </summary>
            <param name="options">Defines the behavior of the drop method on dependent objects.</param>
            <param name="warnings">Specifies an XmlaWarningCollection variable to hold all resulting warnings from drop operation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Drop(Microsoft.AnalysisServices.DropOptions,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection)">
            <summary>
            Removes current object and updates server using specified options. Warnings resulting from drop operation are returned on the specified warnings variable and results for affected objects in operation are returned on specified impactResult variable.
            </summary>
            <param name="options">Defines the behavior of the drop method on dependent objects.</param>
            <param name="warnings">Specifies an XmlaWarningCollection variable to hold all resulting warnings from drop operation.</param>
            <param name="impactResult">Specifies an ImpactDetailCollection variable to hold results for all affected objects in current drop operation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Drop(Microsoft.AnalysisServices.DropOptions,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection,System.Boolean)">
            <summary>
            Removes current object and updates server using specified options. Warnings resulting from drop operation are returned on the specified warnings variable and results for affected objects in operation are returned on specified impactResult variable.
            </summary>
            <param name="options">Defines the behavior of the drop method on dependent objects.</param>
            <param name="warnings">Specifies an XmlaWarningCollection variable to hold all resulting warnings from drop operation.</param>
            <param name="impactResult">Specifies an ImpactDetailCollection variable to hold results for all affected objects in current drop operation.</param>
            <param name="analyzeImpactOnly">If true, only the impact analysis is executed, otherwise drop operation is executed.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Clone(System.Boolean)">
            <summary>
            Creates a new copy of the MajorObject object.
            </summary>
            <param name="forceBodyLoading">true to force the body loading; otherwise, false.</param>
            <returns>A new copy of the MajorObject object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.CopyTo(Microsoft.AnalysisServices.MajorObject,System.Boolean)">
            <summary>
            Copies a MajorObject object to the specified destination.
            </summary>
            <param name="destination">The destination object to copy to.</param>
            <param name="forceBodyLoading">true to force the body to load; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.GetUpdateOverwrites(System.Boolean)">
            <summary>
            Gets the Hashtable object that overwrites the updated MajorObject.
            </summary>
            <param name="fullExpansion">true to full expansion; otherwise, false.</param>
            <returns>The Hashtable object that overwrites the updated MajorObject.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.GetDependents(System.Collections.Hashtable)">
            <summary>
            Gets the dependents to the specified Hashtable.
            </summary>
            <param name="dependents">The Hashtable to append dependent objects to.</param>
            <returns>The dependents to the specified Hashtable.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.GetReferences(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Gets the objects that the MajorObject references.
            </summary>
            <param name="references">The Hashtable to append references to.</param>
            <param name="forMajorChildrenAlso">true to also reference for major children; otherwise, false.</param>
            <returns>The references Hashtable with objects that the data source references appended.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.GetCreateReferences(System.Collections.Hashtable,System.Boolean,System.Boolean)">
            <summary>
            Gets a Hashtable to create references.
            </summary>
            <param name="createReferences">The hastable to create references.</param>
            <param name="considerPermissions">true to consider permissions; otherwise, false.</param>
            <param name="considerPartitions">true to consider partitions; otherwise, false.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.GetDropDependents(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Gets the drop dependents.
            </summary>
            <param name="dependentsToAlter">The dependents to alter.</param>
            <param name="dependentsToDrop">The dependents to drop.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.IsBodyLoadable">
            <summary>
            Check if major object Body is already loaded or ready to be loaded from parent server
            </summary>
            <remarks>
            Allows to precheck and avoid unwanted major object Body creation
            </remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Validate(Microsoft.AnalysisServices.ValidationResultCollection)">
            <summary>
            Indicates whether the MajorObject is valid.
            </summary>
            <param name="results">A collection of validation results.</param>
            <returns>true if the MajorObject is valid; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Validate(Microsoft.AnalysisServices.ValidationResultCollection,Microsoft.AnalysisServices.ValidationOptions)">
            <summary>
            Indicates whether the MajorObject is valid.
            </summary>
            <param name="results">A collection of validation results.</param>
            <param name="flags">A validation options.</param>
            <returns>true if the MajorObject is valid; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObject.Validate(Microsoft.AnalysisServices.ValidationResultCollection,Microsoft.AnalysisServices.ValidationOptions,Microsoft.AnalysisServices.ServerEdition)">
            <summary>
            Indicates whether the MajorObject is valid.
            </summary>
            <param name="results">A collection of validation results.</param>
            <param name="flags">A validation options.</param>
            <param name="serverEdition">The server edition.</param>
            <returns>true if the MajorObject is valid; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ProcessableMajorObject">
            <summary>
            Represents a processable major object.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.CopyTo(Microsoft.AnalysisServices.MajorObject,System.Boolean)">
            <summary>
            Copies the object to the specified destination.
            </summary>
            <param name="destination">The destination where the object copied to.</param>
            <param name="forceBodyLoading">true to force by loading; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.#ctor">
            <summary>
            Initializes a new instance of the ProcessableMajorObject class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProcessableMajorObject class using the specified name.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ProcessableMajorObject class using the specified name and id.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="id">The id of the object.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ProcessableMajorObject.LastProcessed">
            <summary>
            Gets or sets the DateTime on which the object was last processed.
            </summary>
            <value>The DateTime on which the object was last processed.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ProcessableMajorObject.State">
            <summary>
            Gets or sets the AnalysisState of this current instance.
            </summary>
            <value>The AnalysisState of this current instance.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.CanProcess(Microsoft.AnalysisServices.ProcessType)">
            <summary>
            Provides an indication if the object can process the specified process-type.
            </summary>
            <param name="processType">The type of processing to validate.</param>
            <returns>An indication if the process-type is valid.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process">
            <summary>
            Processes the ProcessableMajorObject.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type.
            </summary>
            <param name="processType">The type of processing for the object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type and error handling configuration.
            </summary>
            <param name="processType">The type of processing for the object.</param>
            <param name="errorConfiguration">The error handling configuration.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.WriteBackTableCreation)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type and writeback option.
            </summary>
            <param name="processType">The type of processing for the object.</param>
            <param name="writebackOption">The writeback option.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type, error handling configuration and warnings.
            </summary>
            <param name="processType">The type of processing for the object.</param>
            <param name="errorConfiguration">The error handling configuration.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type, error handling configuration, warnings and impact details.
            </summary>
            <param name="processType">The type of processing for the object.</param>
            <param name="errorConfiguration">The error handling configuration.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
            <param name="impactResult">The collection of detail on the ImpactDetailCollection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.ErrorConfiguration,Microsoft.AnalysisServices.XmlaWarningCollection,Microsoft.AnalysisServices.ImpactDetailCollection,System.Boolean)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type, error handling configuration, warnings and impact details.
            </summary>
            <param name="processType">The type of processing for the object.</param>
            <param name="errorConfiguration">The error handling configuration.</param>
            <param name="warnings">The collection of warnings associated with this object.</param>
            <param name="impactResult">The collection of detail on the ImpactDetailCollection.</param>
            <param name="analyzeImpactOnly">true to analyze only the impact; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ProcessableMajorObject.Process(Microsoft.AnalysisServices.ProcessType,Microsoft.AnalysisServices.Core.IBinding)">
            <summary>
            Processes the ProcessableMajorObject with the specified process type and binding.
            </summary>
            <param name="type">The type of processing for the object.</param>
            <param name="source">The source binding.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.IModelComponent">
            <summary>
            Represents a model component.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.IModelComponent.OwningCollection">
            <summary>
            Gets or sets the collection that owns the current object.
            </summary>
            <value>The collection that owns the object.</value>
            <remarks> Removal from this collection usually destroys the object. Other objects and collections may store monikers to this object, but not direct references.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.IModelComponent.Parent">
            <summary>
            Gets the parent IModelComponent of this object.
            </summary>
            <value>The parent of this IModelComponent.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.IModelComponent.FriendlyPath">
            <summary>
            Gets a friendly path for this object.
            </summary>
            <value>The friendly path.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ModelComponent">
            <summary>
            Represents the base class for most of the Analysis Management Objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.KeyForCollection">
            <summary>
            Gets the key used in collections.
            </summary>
            <value>The key used in the collection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.FriendlyName">
            <summary>
            Gets the friendly name of the ModelComponent.
            </summary>
            <value>The friendly name of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.FriendlyPath">
            <summary>
            Returns an user-friendly path.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.OwningCollection">
            <summary>
            Gets or sets the collection that contains the ModelComponent.
            </summary>
            <value>The collection containing the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.Parent">
            <summary>
            Gets the IModelComponent object that is the parent of the ModelComponent object.
            </summary>
            <value>The parent of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponent.Annotations">
            <summary>
            Gets a collection within which you can store custom data.
            </summary>
            <value>A collection of custom data elements (annotations).</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Submit(System.Boolean)">
            <summary>
            Submits a ModelComponent object.
            </summary>
            <param name="submitPermanently">true to submit permanently; otherwise, false.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Submit">
            <summary>
            Submits a ModelComponent object.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.CopyTo(Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Copies a ModelComponent object to the specified object.
            </summary>
            <param name="obj">The object you are copying to.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Reset">
            <summary>
            Resets the component to an initial state.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.AfterInsert(System.Int32)">
            <summary>
            Displays a ModelComponent object after added to the specified index.
            </summary>
            <param name="index">The index where the object is added.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.AfterMove(System.Int32,System.Int32)">
            <summary>
            Displays a ModelComponent object after moving to the specified index.
            </summary>
            <param name="fromIndex">Move from index.</param>
            <param name="toIndex">Move to index.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.BeforeRemove(System.Boolean)">
            <summary>
            Removes the ModelComponent object before the cleanup.
            </summary>
            <param name="cleanUp">true to clean up the ModelComponent object; otherwise, false.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.AfterRemove(Microsoft.AnalysisServices.ModelComponentCollection)">
            <summary>
            Displays a ModelComponentCollection after a ModelComponent object is removed.
            </summary>
            <param name="collection">The ModelComponentCollection where the object is removed.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.AddToContainer(System.ComponentModel.IContainer)">
            <summary>
            Adds the ModelComponent object to the specified container.
            </summary>
            <param name="container">The container where to add the ModelComponent.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.RemoveFromContainer(System.ComponentModel.IContainer)">
            <summary>
            Removes the ModelComponent object from the specified container.
            </summary>
            <param name="container">The container.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Validate(Microsoft.AnalysisServices.ValidationErrorCollection)">
            <summary>
            Validates the element to which it is appended; returns any errors encountered in a collection.
            </summary>
            <param name="errors">A collection within which errors can be logged.</param>
            <returns>Indication if the component is valid.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Validate(Microsoft.AnalysisServices.ValidationErrorCollection,System.Boolean)">
            <summary>
            Validates the element to which it is appended; returns any errors encountered in a collection. Also contains a parameter to enable return of detailed errors.
            </summary>
            <param name="errors">A collection within which errors can be logged.</param>
            <param name="includeDetailedErrors">true if detailed errors is enabled; otherwise false.</param>
            <returns>Indication if the component is valid.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.Validate(Microsoft.AnalysisServices.ValidationErrorCollection,System.Boolean,Microsoft.AnalysisServices.ServerEdition)">
            <summary>
            Indicates whether a ModelComponent object is valid.
            </summary>
            <param name="errors">A collection within which errors can be logged.</param>
            <param name="includeDetailedErrors">true if detailed errors is enabled; otherwise false.</param>
            <param name="serverEdition">The server edition.</param>
            <returns>Indication if the component is valid.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.GetHostService(System.Type)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.IModelComponentCollection">
            <summary>
            Represents a collection of IModelComponent objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.IModelComponentCollection.Parent">
            <summary>
            Gets the parent IModelComponent of the IModelComponentCollection.
            </summary>
            <value>The parent IModelComponent of the IModelComponentCollection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.IModelComponentCollection.Contains(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Indicates whether the collection contains a specified IModelComponent.
            </summary>
            <param name="obj">The IModelComponent to be located.</param>
            <returns>true if the IModelComponent is contained in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.IModelComponentCollection.Remove(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Removes an IModelComponent from the collection.
            </summary>
            <param name="obj">The IModelComponent to be removed.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.IModelComponentCollection.Remove(Microsoft.AnalysisServices.IModelComponent,System.Boolean)">
            <summary>
            Removes an IModelComponent from the collection.
            </summary>
            <param name="obj">The IModelComponent to be removed.</param>
            <param name="cleanUp">true if it will delete referencing objects; otherwise, false.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ModelComponentCollection">
            <summary>
            Contains a collection of ModelComponent objects.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.#ctor(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Initializes a new instance of the ModelComponentCollection class.
            </summary>
            <param name="parent">The parent IModelComponent.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.Parent">
            <summary>
            Gets the parent IModelComponent of the IModelComponentCollection.
            </summary>
            <value>The parent IModelComponent of the IModelComponentCollection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.Count">
            <summary>
            Gets the number of ModelComponent objects in the ModelComponentCollection.
            </summary>
            <value>The number of ModelComponent objects in the ModelComponentCollection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.ItemsType">
            <summary>
            Gets the Type of objects that can be contained by the ModelComponentCollection.
            </summary>
            <value>The Type of objects that can be contained by the ModelComponentCollection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ModelComponentCollection is synchronized (thread-safe).
            </summary>
            <value>true if access to the ModelComponentCollection is synchronized (thread-safe); otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ModelComponentCollection.
            </summary>
            <value>An object that can be used to synchronize access to the ModelComponentCollection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the ModelComponentCollection has a fixed size.
            </summary>
            <value>true if the model component collection has a fixed size; otherwise false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the ModelComponentCollection is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise false.</value>
        </member>
        <member name="E:Microsoft.AnalysisServices.ModelComponentCollection.CollectionChanging">
            <summary>
            Occurs when the collection is changing.
            </summary>
        </member>
        <member name="E:Microsoft.AnalysisServices.ModelComponentCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.OnItemAdding(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            This method is invoked before the item is added into collection.
            It gives chance to derived classes to validate the item any throw exception if item cannot be added.
            </summary>
            <param name="item">Item being added into collection</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.OnItemAdded(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            This method is invoked after the item is added into collection.
            It gives chance to derived classes to take any post actions.
            </summary>
            <param name="item">Item added into collection</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.Item(System.Int32)">
            <summary>
            Gets the IModelComponent at the specified index.
            </summary>
            <param name="index">The zero-based index of the Microsoft.DataWarehouse.IModelComponent to get.</param>
            <returns>The IModelComponent at the specified index.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.GetItem(System.String,System.Boolean,System.String)">
            <summary>
            Gets a reference to the specified component.
            </summary>
            <param name="key">The key of the IModelComponent to get from the ModelComponentCollection.</param>
            <param name="throwIfNotFound">true if Exception should be thrown if the key is not found in the ModelComponentCollection;otherwise, false.</param>
            <param name="keyPropertyName">The name of the IModelComponent property that provides key values.</param>
            <returns>The IModelComponent that has the specified key.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.CanAdd(Microsoft.AnalysisServices.ModelComponent,System.String@)">
            <summary>
            Indicates whether the collection can add a ModelComponent.
            </summary>
            <param name="item">The item to add.</param>
            <param name="error">The error that will occur if the collection can’t add a ModelComponent.</param>
            <returns>true if the collection can add a ModelComponent; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.AddNew(System.String,System.String,System.Type)">
            <summary>
            Adds a new IModelComponent to the collection.
            </summary>
            <param name="name">The name of the component to add.</param>
            <param name="key">The key.</param>
            <param name="type">The type of the component.</param>
            <returns>The IModelComponent added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.AddNew(System.String,System.Type)">
            <summary>
            Adds a new IModelComponent to the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type of the component.</param>
            <returns>The IModelComponent added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Add(Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Adds a ModelComponent object to the ModelComponentCollection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>The index of the item that is added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Add(Microsoft.AnalysisServices.ModelComponent,System.Boolean)">
            <summary>
            Adds a ModelComponent object to the ModelComponentCollection.
            </summary>
            <param name="item">The item to add.</param>
            <param name="updateDependents">Indicates whether to update the dependents.</param>
            <returns>The index of the item that is added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Add(System.String,Microsoft.AnalysisServices.IModelComponent,System.Boolean)">
            <summary>
            Adds a IModelComponent object to the ModelComponentCollection.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item to add.</param>
            <param name="updateDependents">Indicates whether to update the dependents.</param>
            <returns>The index of the item that is added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Add(System.String,Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Adds a IModelComponent object to the ModelComponentCollection.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item to add.</param>
            <returns>The index of the item that is added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Insert(System.Int32,Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Inserts an ModelComponent in the ModelComponentCollection.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Insert(Microsoft.AnalysisServices.IModelComponent,System.String,System.Int32)">
            <summary>
            Inserts an IModelComponent in the ModelComponentCollection.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="key">The key.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Insert(Microsoft.AnalysisServices.IModelComponent,System.String,System.Int32,System.Boolean)">
            <summary>
            Inserts an IModelComponent in the ModelComponentCollection.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="key">The key.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="updateDependents">Indicates whether to update the dependents.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IModelComponent at the specified index from the ModelComponentCollection.
            </summary>
            <param name="index">The zero-based index of the IModelComponent to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.RemoveAt(System.Int32,System.Boolean)">
            <summary>
            emoves the IModelComponent at the specified index from the ModelComponentCollection.
            </summary>
            <param name="index">The zero-based index of the IModelComponent to remove.</param>
            <param name="cleanUp">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Remove(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Removes the specified IModelComponent from the collection.
            </summary>
            <param name="item">The IModelComponent to remove.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Clear">
            <summary>
            Removes all elements from the ModelComponentCollection.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.IndexOf(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of an IModelComponent that has the specified key in the ModelComponentCollection.
            </summary>
            <param name="key">The key of the IModelComponent to locate.</param>
            <returns>The zero-based index of the first occurrence of key within the ModelComponentCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.IndexOf(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Searches for the specified item and returns its zero-based index within the collection.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The zero-based index of the item in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Contains(System.String)">
            <summary>
            Determines whether an item with the specified key is in the ModelComponentCollection.
            </summary>
            <param name="key">The key of the IModelComponent to locate in the ModelComponentCollection.</param>
            <returns>true if key found in the ModelComponentCollection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.Contains(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Determines whether the specified item is in the collection.
            </summary>
            <param name="item">The item to verify if it's in the collection.</param>
            <returns>True if the specified item is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the ModelComponentCollection.
            </summary>
            <returns>A System.IEnumerator for the entire ModelComponentCollection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.ChangeKey(System.String,System.String)">
            <summary>
            Changes the specified keys to the collection.
            </summary>
            <param name="oldKey">The old key.</param>
            <param name="newKey">The new key.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire ModelComponentCollection to a one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ModelComponentCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.DemandLoadingService">
            <summary>
            Gets the demand loading service for the collection.
            </summary>
            <value>The demand loading service for the collection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ModelComponentCollection.EnsureLoaded">
            <summary>
            Ensures the collection is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ModelComponentCollection.Preloadable">
            <summary>
            Gets a value indicating whether the collection can be preloaded.
            </summary>
            <value>true if the collection can be preloaded; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.CollectionChangeEventArgs">
            <summary>
            Provides data for the collection changed event.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.CollectionChangeEventArgs.Element">
            <summary>
            Gets the element that caused the change event.
            </summary>
            <value>The event associated element</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.AddEventArgs">
            <summary>
            Provides information about the arguments used in the Add event over a collection for which the CollectionChangeEventHandler has been enabled.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.AddEventArgs.Index">
            <summary>
            Gets the index in the collection associated with the change event
            </summary>
            <value>The index in the collection</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.RemoveEventArgs">
            <summary>
            Represents a class that removes the event data.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.RemoveEventArgs.Index">
            <summary>
            Gets the index in the collection associated with the change event
            </summary>
            <value>The index in the collection</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.MoveEventArgs">
            <summary>
            Represents an event data to a move.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.MoveEventArgs.FromIndex">
            <summary>
            Gets the index of the event data to be moved.
            </summary>
            <value>The index of the event data to be moved.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.MoveEventArgs.ToIndex">
            <summary>
            Gets the index to which to move the event data specified by FromIndex.
            </summary>
            <value>The index to which to move the event data specified by FromIndex.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.CollectionChangeEventHandler">
            <summary>
            Represents the method that will handle the OnCollectionChange event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An object that contains the event data.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.INamedComponent">
            <summary>
            Represents a named component.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.INamedComponent.ID">
            <summary>
            Gets or sets the engine ID of the component.
            </summary>
            <value>The engine ID of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.INamedComponent.Name">
            <summary>
            Gets or sets the name of the component as presented to user.
            </summary>
            <value>The name of the component.</value>
            <remarks>Some restrictions apply to the name.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.INamedComponent.Description">
            <summary>
            Gets or sets the description of the component.
            </summary>
            <value>The description of the component,</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.NamedComponent">
            <summary>
            Represents a named component.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.NamedComponent.MaxNameLength">
            <summary>
            Specifies the maximum length of the name.
            </summary>
        </member>
        <member name="F:Microsoft.AnalysisServices.NamedComponent.MaxIDLength">
            <summary>
            Specifies the maximum length of the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.KeyForCollection">
            <summary>
            Gets the key used in collections.
            </summary>
            <value>The key used in collection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.#ctor">
            <summary>
            Initializes a new instance of the NamedComponent class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NamedComponent class with the specified name.
            </summary>
            <param name="name">The name of the component.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NamedComponent class with the specified name and identifier.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="id">The identifier of the component.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.ID">
            <summary>
            Gets or sets the identifier of the component.
            </summary>
            <value>The identifier of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.Name">
            <summary>
            Gets or sets the name of the component.
            </summary>
            <value>The name of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.Description">
            <summary>
            Gets or sets the description of the component.
            </summary>
            <value>The description of the component.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.Site">
            <summary>
            Gets or sets the site associated with the component.
            </summary>
            <value>The site associated with the component.</value>
            <remarks>For internal use.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.SiteID">
            <summary>
            Gets or sets the identifier for the site associated with the component.
            </summary>
            <value>The identifier for the site associated with the component.</value>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.CopyTo(Microsoft.AnalysisServices.NamedComponent)">
            <summary>
            Copies a NamedComponent object to the specified object.
            </summary>
            <param name="obj">The object you are copying to.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.Reset">
            <summary>
            Resets the component to its initial state.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.ToString">
            <summary>
            Returns a string representing the named-component.
            </summary>
            <returns>A string containing the name of the component.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponent.Validate(Microsoft.AnalysisServices.ValidationErrorCollection,System.Boolean,Microsoft.AnalysisServices.ServerEdition)">
            <summary>
            Determines whether the NamedComponent is valid.
            </summary>
            <param name="errors">A collection of validation errors.</param>
            <param name="includeDetailedErrors">true to include detailed errors; otherwise, false.</param>
            <param name="serverEdition">The server edition.</param>
            <returns>true if the NamedComponent is valid; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.NamedComponent.FriendlyName">
            <summary>
             Gets a user-friendly name for the component.
            </summary>
            <value>A String with the user-friendly name.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.INamedComponentCollection">
            <summary>
            Repesent a container of a collection of named components.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.GetNewName">
            <summary>
            Generates a new unique name for a component in the collection.
            </summary>
            <returns>A String with the new name.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.GetNewName(System.String)">
            <summary>
            Assists in creating new consecutive numbered names that start with the specified prefix.
            </summary>
            <param name="prefix">The prefix for the numbered names.</param>
            <returns>A String with the new name.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.GetNewID">
            <summary>
            Generates a new unique ID for the component in the collection.
            </summary>
            <returns>A String with the new ID.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.GetNewID(System.String)">
            <summary>
            Generates a new unique ID for a component in the collection that starts with the specified prefix.
            </summary>
            <param name="prefix">The prefix for the ID</param>
            <returns>A String with the new ID.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.ContainsName(System.String)">
            <summary>
            Indicates whether the collection contains a component with the specified name.
            </summary>
            <param name="name">The name of the looked-up component.</param>
            <returns>true if a component with the specified name exists in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.INamedComponentCollection.Contains(System.String)">
            <summary>
            Indicates whether the collection contains a component with the specified ID.
            </summary>
            <param name="id">The ID of the looked-up component.</param>
            <returns>true if the identified component exists in the collection; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.NamedComponentCollection">
            <summary>
            Contains a collection of INamedComponent objects.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.#ctor(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Initializes a new instance of the NamedComponentCollection class.
            </summary>
            <param name="parent">The parent object. </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IndexOfName(System.String)">
            <summary>
            Gets the index of the NamedComponent, identified by name, in the collection.
            </summary>
            <param name="name">The name to be located in the collection. </param>
            <returns>The zero-based index at which the component is at the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the identified NamedComponent in the collection.
            </summary>
            <param name="id">The identifier of the searched component.</param>
            <returns>The zero-based index at which the component is at the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.CanAdd(Microsoft.AnalysisServices.ModelComponent,System.String@)">
            <summary>
            Indicates whether the specifed ModelComponent can be added to the collection.
            </summary>
            <param name="item">The item to add. </param>
            <param name="error">The error that will occur if the collection can’t add the ModelComponent.</param>
            <returns>An indication if the componenet can be added to the collection.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.Add(Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Adds a ModelComponent object to the NamedComponentCollection.
            </summary>
            <param name="item">The item to add. </param>
            <returns>The index in which the item was added to the collection.</returns>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.Insert(System.Int32,Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Inserts a ModelComponent in the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be inserted. </param>
            <param name="item">The item to insert. </param>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.ContainsName(System.String)">
            <summary>
            Indicates whether the component with the specified name is containd in the collection.
            </summary>
            <param name="name">The name of the compoent.</param>
            <returns>true if the component is contained; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.Contains(System.String)">
            <summary>
            Determines whether an item with the specific key is in the NamedComponentCollection.
            </summary>
            <param name="id">The identifier to locate in the NamedComponentCollection. </param>
            <returns>true if the id found in the NamedComponentCollection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.GetNewName">
            <summary>
            Gets a unique new name for a component in the collection.
            </summary>
            <returns>A unique new name for a component.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.GetNewName(System.String)">
            <summary>
            Gets a unique new name for a component in the collection with the specified name prefix.
            </summary>
            <param name="namePrefix">The name prefix.</param>
            <returns>A unique new name for a component with the specified name prefix.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.GetNewID">
            <summary>
            Gets a new unique ID for a component in the collection.
            </summary>
            <returns>The value of the new ID.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.GetNewID(System.String)">
            <summary>
            Gets the value for the new unique ID for a component in the collection with the specified name prefix.
            </summary>
            <param name="idPrefix">The ID prefix. </param>
            <returns>The value for the new unique ID.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidName(System.String)">
            <summary>
            Determines whether the provided name is valid for a component in the collection.
            </summary>
            <param name="name">The name to validate.</param>
            <returns>true if the name is valid for a component in collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidName(System.String,System.String@)">
            <summary>
            Determines whether the provided name is valid for a component in the collection.
            </summary>
            <param name="name">The name to validate.</param>
            <param name="error">The error that will occur if the provided name is not valid.</param>
            <returns>true if the name is valid for a component in collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidName(System.String,System.Type,Microsoft.AnalysisServices.ModelType,System.Int32,System.String@)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidName(System.String,System.Type,System.String@)">
            <summary>
            Determines whether the provided name is valid for a component in the collection.
            </summary>
            <param name="name">The name to validate.</param>
            <param name="type">The type of the component.</param>
            <param name="error">The error that will occur if the provided name is not valid.</param>
            <returns>true if the name is valid for a component in collection; otherwise, false.</returns>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidID(System.String)">
            <summary>
            Determines whether the provided identifier is valid for a component in the collection.
            </summary>
            <param name="id">The identifier to validate.</param>
            <returns>true if the ID is valid for a component in collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidID(System.String,System.String@)">
            <summary>
            Determines whether the provided identifier is valid for a component in the collection.
            </summary>
            <param name="id">The identifier to validate.</param>
            <param name="error">The error that will occur if the provided ID is not valid.</param>
            <returns>true if the ID is valid for a component in collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.NamedComponentCollection.IsValidID(System.String,System.Type,System.String@)">
            <summary>
            Determines whether the provided identifier is valid for a component in the collection.
            </summary>
            <param name="id">The identifier to validate.</param>
            <param name="type">The type of the component.</param>
            <param name="error">The error that will occur if the provided ID is not valid.</param>
            <returns>true if the ID is valid for a component in collection; otherwise, false.</returns>
            <remarks>For internal use.</remarks>
        </member>
        <member name="T:Microsoft.AnalysisServices.ServerProperty">
            <summary>
            Defines a property associated with a Server element. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerProperty.#ctor">
            <summary>
            Initializes a new instance of the ServerProperty class.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of ServerProperty by using the specified name and a value.
            </summary>
            <param name="name">A String that contains the name of the property represeted by the ServerProperty object.</param>
            <param name="value">A String that contains the property's value.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.Name">
            <summary>
            Gets or sets the name of the property represented by the ServerProperty object.
            </summary>
            <value>The property's name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.Type">
            <summary>
            Gets or sets the type of the property represented by the ServerProperty object.
            </summary>
            <value>The property's type.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.Value">
            <summary>
            Gets or sets the value of the property represented by the ServerProperty object.
            </summary>
            <value>The property's value.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.DefaultValue">
            <summary>
            Gets or sets the default value of the property represented by the ServerProperty object.
            </summary>
            <value>The property's default value.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.PendingValue">
            <summary>
            Gets or sets the pending value of the property represented by the ServerProperty object.
            </summary>
            <value>A String that contains the pending value.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.RequiresRestart">
            <summary>
            Gets or sets an indication if changes in the value of the property represented by the ServerProperty object requires restart.
            </summary>
            <value>true if restart is required; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.IsReadOnly">
            <summary>
            Gets or sets an indication if the property represented by the ServerProperty object is read-only.
            </summary>
            <value>true if read-only; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.DisplayFlag">
            <summary>
            Gets or sets the display flag status.
            </summary>
            <value>true if the display flag is on; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.Category">
            <summary>
            Gets or sets the category associated with the property represented by the ServerProperty object.
            </summary>
            <value>The category associated with the property.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.Units">
            <summary>
            Gets or sets the units associated with the property represented by the ServerProperty object.
            </summary>
            <value>A String that contains the unit.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.PropertyName">
            <summary>
            Gets the property name from a ServerProperty object.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ServerProperty.FolderName">
            <summary>
            Gets the folder name associated with a ServerProperty object.
            </summary>
            <value>The folder name.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerProperty.CopyTo(Microsoft.AnalysisServices.ServerProperty)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ServerProperty.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Translation">
            <summary>
            Provides a localized translation for its parent object.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.KeyForCollection">
            <summary>
            Gets the value of the key used in collections.
            </summary>
            <value>A String with the key.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Translation.#ctor">
            <summary>
            Initializes a new instance of the Translation class using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Translation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Translation class using the specified language.
            </summary>
            <param name="language">The language for the Translation.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.Translation.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Translation class using the specified language and caption information.
            </summary>
            <param name="language">The language for the Translation.</param>
            <param name="caption">The caption to be used for display.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.Language">
            <summary>
            Gets or sets the language defined by a locale identifier code for a Translation.
            </summary>
            <value>A language defined by a locale identifier code.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.Caption">
            <summary>
            Gets or sets the caption to be used for display by clients.
            </summary>
            <value>A caption translation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.Description">
            <summary>
            Gets or sets the description of the translation.
            </summary>
            <value>The description of the translation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.DisplayFolder">
            <summary>
            Gets or sets the display folder of the translation.
            </summary>
            <value>The display folder of the translation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.CollectionCaption">
            <summary>
            Gets or sets the collection caption of the translation.
            </summary>
            <value>The collection caption of the translation.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.Translation.CopyTo(Microsoft.AnalysisServices.Translation)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.Translation.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="P:Microsoft.AnalysisServices.Translation.FriendlyName">
            <summary>
            Gets a user-friendly name for the translation.
            </summary>
            <value>A String with the user-friendly name.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationError">
            <summary>
            Represents the base class for validation errors.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationError.#ctor(Microsoft.AnalysisServices.IModelComponent,System.String)">
            <summary>
            Initializes a new instance of the ValidationError class using the source and error information.
            </summary>
            <param name="source">The validation source.</param>
            <param name="error">The validation error.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationError.#ctor(Microsoft.AnalysisServices.IModelComponent,System.String,Microsoft.AnalysisServices.ErrorPriority)">
            <summary>
            Initializes a new instance of the ValidationError class using the source and error information.
            </summary>
            <param name="source">The validation source.</param>
            <param name="error">The validation error.</param>
            <param name="priority">The priority of the error.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationError.#ctor(Microsoft.AnalysisServices.IModelComponent,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ValidationError class using the source and error information.
            </summary>
            <param name="source">The validation source.</param>
            <param name="error">The validation error.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationError.#ctor(Microsoft.AnalysisServices.IModelComponent,System.String,Microsoft.AnalysisServices.ErrorPriority,System.Int32)">
            <summary>
            Initializes a new instance of the ValidationError class using the source and error information.
            </summary>
            <param name="source">The validation source.</param>
            <param name="error">The validation error.</param>
            <param name="priority">The priority of the error.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationError.Source">
            <summary>
            Gets or sets the validation source for this instance.
            </summary>
            <value>The validation source for this instance.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationError.ErrorText">
            <summary>
            Gets or sets the error text for this instance.
            </summary>
            <value>The error text for this instance.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationError.Priority">
            <summary>
            Gets or sets the error priority.
            </summary>
            <value>The error priority.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationError.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationError.FullErrorText">
            <summary>
            Gets the full error text for this instance.
            </summary>
            <value>The full error text.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationErrorCodes">
            <summary>
            Represents a validation error codes.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="F:Microsoft.AnalysisServices.ValidationErrorCodes.MeasureGroupNoDimensionsDefined">
            <summary>
            Represents a MeasureGroupNoDimensionsDefined error code.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationRule">
            <summary>
            Represents the validation rule.
            </summary>
            <!-- Defines the validation rules we check in the MajorObject.Validate(...) method: errors, warnings and messages. -->
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.ID">
            <summary>
            Gets the validation rule's identifier.
            </summary>
            <value>The identifier.</value>
            <!-- Because we already use 'ID' instead of 'Id' all over AMO (and we cannot change at this point), we'll continue to use it here for consistency. -->
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.Type">
            <summary>
            Gets the type of validation.
            </summary>
            <value>The type of validation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.Priority">
            <summary>
            Gets the validation rule's priority.
            </summary>
            <value>The rule's priority.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.Category">
            <summary>
            Gets the category of the validation rule.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.Description">
            <summary>
            Gets the description of the validation rule.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.HelpID">
            <summary>
            Gets the help identifier.
            </summary>
            <value>The help id.</value>
            <!-- Because we already use 'ID' instead of 'Id' all over AMO (and we cannot change at this point), we'll continue to use it here for consistency. -->
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationRule.Warnings">
            <summary>
            Gets the set of errors or warnings.
            </summary>
            <value>The errors or warnings.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationResult">
            <summary>
            Represents a validation error, warning or message returned by the MajorObject.Validate method.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResult.Source">
            <summary>
            Gets the ModelComponent that is the source of the ValidationResult.
            </summary>
            <value>The source of the ValidationResult.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResult.SourcePath">
            <summary>
            Gets the source-path extracted from the Source property.
            </summary>
            <value>The source path.</value>
            <remarks> SourcePath and SourceType can be extracted from Source property, but when reading the ValidationResult from the Annotations (after a dismiss), the Source might not be available, so only SourcePath and SourceType remain.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResult.SourceType">
            <summary>
            Gets the source-type extracted from the Source property.
            </summary>
            <value>The source type.</value>
            <remarks> SourcePath and SourceType can be extracted from Source property, but when reading the ValidationResult from the Annotations (after a dismiss), the Source might not be available, so only SourcePath and SourceType remain.</remarks>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResult.Rule">
            <summary>
            Gets the ValidationRule associated with the ValidationResult.
            </summary>
            <value>The rule associated with the result.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResult.Description">
            <summary>
            Gets either a ValidationRule.Description or a similar text with parameters.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationResult.ToString">
            <summary>
            Returns a string representation of the current object.
            </summary>
            <returns>The representation of the object.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.DismissedValidationRule">
            <summary>
             Represents a dismissed ValidationRule (saved to the Annotaltions of a Database, considered by the .Validate(...) method).
            </summary>
            <!--
            Q: Why this class is not derived from ValidationRule ?
            A: Because we want to have a fixed set of ValidationRule objects (the ones returned by the static readonly properties from the ValidationRule class). With a fixed set, it's easier to compare ValidationRules.
            -->
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationRule.ValidationRule">
            <summary>
            Gets the custom rule for validation.
            </summary>
            <value>The custom rule for validation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationRule.Comments">
            <summary>
            Gets or sets the comments of validation.
            </summary>
            <value>The comments of validation.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.DismissedValidationResult">
            <summary>
            Represents a dismissed ValidationResult (saved to the Annotaltions of a Database, considered by the .Validate(...) method).
            </summary>
            <!--
            Q: Why this class is not derived from ValidationResult ?
            A: Because we want it to be consistent with the DismissedValidationRule class.
            -->
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationResult.ValidationResult">
            <summary>
            Gets the validation error, warning or message returned by the MajorObject.Validate method.
            </summary>
            <value>The validation result.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationResult.Comments">
            <summary>
            Gets or sets the comments in the validation result object.
            </summary>
            <value>The comments of validation.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.BackupLocation">
            <summary>
            Represents the location a file will be copied to during backup. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocation.#ctor">
            <summary>
            Initializes a new instance of the BackupLocation class, using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the BackupLocation class, using the specifyed file name and data source identifier.
            </summary>
            <param name="file">The name of the backup file.</param>
            <param name="dataSourceId">The identifier of the data source.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupLocation.File">
            <summary>
            Gets or sets the name of the file to backup the data source to.
            </summary>
            <value>A String with the file name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupLocation.DataSourceID">
            <summary>
            Gets or sets the identifier of the data source on the server to be backed up.
            </summary>
            <value>A String with the data source identifier.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.BackupInfo">
            <summary>
            Stores the information necessary to back up an Analysis Services database to a backup file. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor">
            <summary>
            Initializes a new instance of the BackupInfo class using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BackupInfo class using the file name to backup to.
            </summary>
            <param name="file">The name of the file to backup to.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the BackupInfo class using a file name, and indicates whether overwrite information is allowed.
            </summary>
            <param name="file">The file name to backup to.</param>
            <param name="allowOverwrite">true if overwrite is allowed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BackupInfo class using a file name, and indicates whether overwrite and backup of remote partitions are allowed.
            </summary>
            <param name="file">The file name to backup to.</param>
            <param name="allowOverwrite">true if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if backup of remote partitions is allowed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[])">
            <summary>
            Initializes a new instance of the BackupInfo class using a file name, indicates whether overwrite and backup of remote partitions are allowed, and specifies the locations for the backup to be stored.
            </summary>
            <param name="file">The file name to backup to.</param>
            <param name="allowOverwrite">true if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if backup of remote partitions is allowed; otherwise, false.</param>
            <param name="locations">The locations where the backup will be stored.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[],System.Boolean)">
            <summary>
            Initializes a new instance of the BackupInfo class using a file name, indicates whether overwrite and backup of remote partitions are allowed, specifies the location for the backup to be stored, and indicates whether compression is applied.
            </summary>
            <param name="file">The file name to backup to.</param>
            <param name="allowOverwrite">true if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if backup of remote partitions is allowed; otherwise, false.</param>
            <param name="locations">The locations where the backup will be stored.</param>
            <param name="applyCompression">true if compression is applied during the backup process; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.BackupInfo.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.AnalysisServices.BackupLocation[],System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the BackupInfo class using a file name, indicates whether overwrite and backup of remote partitions are allowed, specifies the location for the backup to be stored, indicates whether compression is applied, and specifies a password.
            </summary>
            <param name="file">The file name to backup to.</param>
            <param name="allowOverwrite">true if overwrite is allowed; otherwise, false.</param>
            <param name="backupRemotePartitions">true if backup of remote partitions is allowed; otherwise, false.</param>
            <param name="locations">The locations where the backup will be stored.</param>
            <param name="applyCompression">true if compression is applied during the backup process; otherwise, false.</param>
            <param name="password">A String containing the password.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.File">
            <summary>
            Gets or sets the name of the file to back up to.
            </summary>
            <value>A String containing the name of the file.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.AllowOverwrite">
            <summary>
            Gets or sets the indication whether the destination files can be overwritten during backup.
            </summary>
            <value>true if the destination files can be overwritten; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.BackupRemotePartitions">
            <summary>
            Gets or sets the indication whether remote partitions will be backed up or not.
            </summary>
            <value>true if remote partitions will be backed up; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.Locations">
            <summary>
            Gets or sets the locations where the backup will be stored.
            </summary>
            <value>The locations where the backup will be stored.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.ApplyCompression">
            <summary>
            Gets or sets the indication whether the backup will be compressed or not.
            </summary>
            <value>true if the backup will be compressed; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.BackupInfo.Password">
            <summary>
            Gets or sets the password to be used with backup file encryption.
            </summary>
            <value>A String containing the password.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreFolder">
            <summary>
            Restores an original folder to a new folder. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolder.#ctor">
            <summary>
            Initializes a new instance of the RestoreFolder class using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreFolder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RestoreFolder using a name for the original folder and the new folder.
            </summary>
            <param name="originalFolder">The original folder from which to copy.</param>
            <param name="newFolder">The folder to copy to.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreFolder.Original">
            <summary>
            Gets or sets the original folder associated with a RestoreFolder object.
            </summary>
            <value>A String with the original folder name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreFolder.New">
            <summary>
            Gets or sets the location of the new folder to be created for use by a RestoreFolder element.
            </summary>
            <value>A String with the new folder location.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreLocation">
            <summary>
            Represents information associated with the restoration of a Database backup. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreLocation.#ctor">
            <summary>
            Initializes a new instance of RestoreLocation using the default values.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocation.File">
            <summary>
            Gets or sets the file associated with a RestoreLocation object.
            </summary>
            <value>A String with the file name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocation.DataSourceID">
            <summary>
            Gets or sets the data source identifier associated with a RestoreLocation object.
            </summary>
            <value>A String with the data source identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocation.DataSourceType">
            <summary>
            Gets or sets the type of data source.
            </summary>
            <value>The type of data source.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocation.ConnectionString">
            <summary>
            Gets or sets a connection string associated with a RestoreLocation object.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreLocation.Folders">
            <summary>
            Gets the collection of folders associated with a RestoreLocation.
            </summary>
            <value>A collection of folders that are the target location for a restoration.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.RestoreInfo">
            <summary>
            Represents the information required to process a file or database restoration. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor">
            <summary>
            Initializes a new instance of RestoreInfo using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore and database name.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name, and overwrite indicator.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[])">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name, overwrite indicator, and an array of restore locations.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
            <param name="locations">An array of RestoreLocations for the remote objects to restored.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name , overwrite indicator, an array of restore locations, and a security definition for the roles to be restored.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
            <param name="locations">An array of RestoreLocations for the remote objects to restored.</param>
            <param name="security">A RestoreSecurity enumeration value that specifies what is going to happen to the Roles objects being restored.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name , overwrite indicator, an array of restore locations, a security definition for the roles to be restored, and password.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
            <param name="locations">An array of RestoreLocations for the remote objects to restored.</param>
            <param name="security">A RestoreSecurity enumeration value that specifies what is going to happen to the Roles objects being restored.</param>
            <param name="password">A string with the password that is required to read the restored file.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String,System.String)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name , overwrite indicator, an array of restore locations, a security definition for the roles to be restored, password, and the database storage location.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
            <param name="locations">An array of RestoreLocations for the remote objects to restored.</param>
            <param name="security">A RestoreSecurity enumeration value that specifies what is going to happen to the Roles objects being restored.</param>
            <param name="password">A string with the password that is required to read the restored file.</param>
            <param name="dbStorageLocation">The location of the database storage.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RestoreInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.AnalysisServices.RestoreLocation[],Microsoft.AnalysisServices.RestoreSecurity,System.String,System.String,Microsoft.AnalysisServices.ReadWriteMode)">
            <summary>
            Initializes a new instance of RestoreInfo using the file to restore, database name , overwrite indicator, an array of restore locations, a security definition for the roles to be restored, password, the database storage location, and the read/write mode of the database.
            </summary>
            <param name="file">Name of the file for which information is to be restored.</param>
            <param name="databaseName">Name of the database from which to extract the information to be restored.</param>
            <param name="allowOverwrite">A Boolean value. If true, the file information can be overwritten; otherwise, false.</param>
            <param name="locations">An array of RestoreLocations for the remote objects to restored.</param>
            <param name="security">A RestoreSecurity enumeration value that specifies what is going to happen to the Roles objects being restored.</param>
            <param name="password">A string with the password that is required to read the restored file.</param>
            <param name="dbStorageLocation">The location of the database storage.</param>
            <param name="readWriteMode">An enumeration that describes the read/write state of the database.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.File">
            <summary>
            Gets or sets the UNC name of the File to restore.
            </summary>
            <value>A string with the name of the restore file.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.DatabaseName">
            <summary>
            Gets or sets the DatabaseName aspect for a RestoreInfo object.
            </summary>
            <value>A String with the database name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.AllowOverwrite">
            <summary>
            Gets or sets the AllowOverwrite aspect of RestoreInfo.
            </summary>
            <value>true if overwrite is allowed; otherise, false.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.DatabaseReadWriteMode">
            <summary>
            Gets or sets the database read/write mode of an Analysis Services database as specified in a RestoreInfo object.
            </summary>
            <value>The read/write mode of the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.Locations">
            <summary>
            Gets a RestoreLocationCollection object with the locations of the remote partitions to restore.
            </summary>
            <value>A RestoreLocationCollection collection object.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.Security">
            <summary>
            Gets or sets the Security definition to apply to roles from the restore file.
            </summary>
            <value>A RestoreSecurity enumeration value: CopyAll | SkipMembership | IgnoreSecurity</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.Password">
            <summary>
            Gets or sets the Password that is required to read the restore file.
            </summary>
            <value>A string with the password that is required to read the restore file.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RestoreInfo.DbStorageLocation">
            <summary>
            Gets or sets the database storage location.
            </summary>
            <value>The database storage location.</value>
            <!-- We used 'DbStorageLocation' instead of 'DBStorageLocation' to be consistent with the existing properties 'DbSchemaName' and 'DbTableName' from the TableBinding class. -->
        </member>
        <member name="T:Microsoft.AnalysisServices.ImageLoadInfo">
            <summary>
            Loads a Tabular data model from a data stream. This class applies to SharePoint mode only.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImageLoadInfo.#ctor">
            <summary>
            Initializes an ImageLoadInfo object using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImageLoadInfo.#ctor(System.String,System.String,System.IO.Stream,Microsoft.AnalysisServices.ReadWriteMode)">
            <summary>
            Initializes an ImageLoadInfo object using the database ID, database name, data stream, and read/write mode of the database.
            </summary>
            <param name="databaseId">The ID of the restored database.</param>
            <param name="databaseName">The name of the restored database.</param>
            <param name="sourceDbStream">The stream of data to load into memory.</param>
            <param name="readWriteMode">The read/write mode of the database.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageLoadInfo.DatabaseId">
            <summary>
            Gets or sets the database identifier.
            </summary>
            <value>A String with the database identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageLoadInfo.DatabaseName">
            <summary>
            Gets or sets the Database name.
            </summary>
            <value>A String with the database name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageLoadInfo.DatabaseReadWriteMode">
            <summary>
            Gets or sets the database read/write mode of an Analysis Services database.
            </summary>
            <value>The read/write mode of the database.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageLoadInfo.SourceDbStream">
            <summary>
            Gets or sets the source database stream.
            </summary>
            <value>The source database stream.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ImageSaveInfo">
            <summary>
            Saves a Tabular data model back to the location from which it was loaded. This class applies to SharePoint mode only.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImageSaveInfo.#ctor">
            <summary>
            Initializes an ImageSaveInfo object using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ImageSaveInfo.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes an ImageSaveInfo object using a datastream and the database ID.
            </summary>
            <param name="databaseId">The ID of the database saved to attach.</param>
            <param name="targetDbStream">The data stream to save to attach.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageSaveInfo.DatabaseId">
            <summary>
            Gets or sets the database identifier.
            </summary>
            <value>A String with the database ID.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ImageSaveInfo.TargetDbStream">
            <summary>
            Gets or sets the target data stream to save the image information.
            </summary>
            <value>The target data stream to save the image information.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.SynchronizeInfo">
            <summary>
            Represents the synchronize information for the analysis services.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SynchronizeInfo.#ctor">
            <summary>
            Initializes a new instance of the SynchronizeInfo class using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.SynchronizeInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SynchronizeInfo class using the specified database ID and source.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.SynchronizeInfo.#ctor(System.String,System.String,Microsoft.AnalysisServices.SynchronizeSecurity)">
            <summary>
            Initializes a new instance of the SynchronizeInfo class using the specified database ID, source and synchronization security.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source.</param>
            <param name="synchronizeSecurity">The synchronize security.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.SynchronizeInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SynchronizeInfo class using the specified database ID, source and an indication if compression should be applied.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source.</param>
            <param name="applyCompression">true if the object apply compression; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.SynchronizeInfo.#ctor(System.String,System.String,Microsoft.AnalysisServices.SynchronizeSecurity,System.Boolean)">
            <summary>
            Initializes a new instance of the SynchronizeInfo class using the specified database ID, source, synchronization security, and an indication if compression should be applied.
            </summary>
            <param name="databaseID">The database identifier.</param>
            <param name="source">The source.</param>
            <param name="synchronizeSecurity">The synchronize security.</param>
            <param name="applyCompression">true if the object apply compression; otherwise, false.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.SynchronizeInfo.DatabaseID">
            <summary>
            Gets or sets the database ID.
            </summary>
            <value>A String with the database ID.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.SynchronizeInfo.Source">
            <summary>
            Gets or sets the source of the property.
            </summary>
            <value>The String source of the property.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.SynchronizeInfo.SynchronizeSecurity">
            <summary>
            Gets or sets the synchronize security.
            </summary>
            <value>The synchronize security.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.SynchronizeInfo.ApplyCompression">
            <summary>
            Gets or sets a value that indicates whether the information will compressed or not.
            </summary>
            <value>true if the information will be compressed; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.XmlaWarningCollection">
            <summary>
            Represents a collection of XmlaWarning objects.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.XmlaWarningCollection.#ctor">
            <summary>
            Initializes a new instance of the XmlaWarningCollection class using the default values.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaWarningCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of XmlaWarning objects in the collection.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.XmlaWarningCollection.Item(System.Int32)">
            <summary>
            Gets the XmlaWarning at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the XmlaWarning to return.</param>
            <value>The XmlaWarning at the specified index.</value>
        </member>
        <member name="T:Microsoft.AnalysisServices.ClrAssemblyFile">
            <summary>
            Contains the name, debug type and block of data for a ClrAssemblyFile. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.#ctor">
            <summary>
            Initializes a new instance of ClrAssemblyFile using the default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.#ctor(System.String)">
            <summary>
            nitializes a new instance of ClrAssemblyFile using the specified name.
            </summary>
            <param name="name">A String that contains the name of the ClrAssemblyFile.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.#ctor(System.String,Microsoft.AnalysisServices.ClrAssemblyFileType)">
            <summary>
            nitializes a new instance of ClrAssemblyFile using the specified name and type.
            </summary>
            <param name="name">A String that contains the name of the ClrAssemblyFile.</param>
            <param name="type">An Enumeration indicating the debug status of the ClrAssemblyFile.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ClrAssemblyFile.Name">
            <summary>
            Gets and sets the name of the ClrAssemblyFile.
            </summary>
            <value>A String with the file name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ClrAssemblyFile.Type">
            <summary>
            Gets or sets the type of ClrAssemblyFile; where type refers to debug status.
            </summary>
            <value>The debug status.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ClrAssemblyFile.Data">
            <summary>
            Gets the Data associated with a ClrAssemblyFile.
            </summary>
            <value>The block of data.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.CopyTo(Microsoft.AnalysisServices.ClrAssemblyFile)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ClrAssemblyFile.LoadData(System.String)">
            <summary>
            Loads the ClrAssemblyFile data.
            </summary>
            <param name="path">The path for the data file.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.AssemblyReferencesHelper">
            <summary>
            Represents an assembly references helper.
            </summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:Microsoft.AnalysisServices.AssemblyReferencesHelper.GetAssemblyReferences(System.String,System.Collections.Specialized.StringCollection@)">
            <summary>
            Gets the assembly references.
            </summary>
            <remarks>For internal use.</remarks>
            <!-- Adrian: String collection passed by reference to avoid creating a copy during cross App Domain call -->
        </member>
        <member name="T:Microsoft.AnalysisServices.MajorObjectCollection">
            <summary>
            Represents a collection of MajorObject objects.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObjectCollection.#ctor(Microsoft.AnalysisServices.IModelComponent)">
            <summary>
            Initializes a new instance of the MajorObjectCollection class for the specified parent object.
            </summary>
            <param name="parent">The parent component owning the collection.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObjectCollection.Add(Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Adds a ModelComponent object to the collection.
            </summary>
            <param name="item">The ModelComponent to add.</param>
            <returns>The index at which the item has been added.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.MajorObjectCollection.Insert(System.Int32,Microsoft.AnalysisServices.ModelComponent)">
            <summary>
            Inserts a ModelComponent object to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The ModelComponent to add.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ValidationResultCollection">
            <summary>
            Represents a collection of result objects during validation.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResultCollection.Item(System.Int32)">
            <summary>
            Gets a reference to the validation at the specified index location in the ValidationResultCollection object.
            </summary>
            <param name="index">The location of the validation in the ValidationResultCollection. </param>
            <value>The reference to the validation.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ValidationResultCollection.Count">
            <summary>
            Gets the number of validation result objects in the collection.
            </summary>
            <value>The number of results in the collection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ValidationResultCollection.Clear">
            <summary>
            Removes all results from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.DismissedValidationRuleCollection">
            <summary>
            Represents a collection of DismissedValidationRule objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationRuleCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.DismissedValidationRuleCollection.Add(Microsoft.AnalysisServices.ValidationRule,System.String)">
            <summary>
            Add a DismissedValidationRule to the collection for the specified rule and comment.
            </summary>
            <param name="validationRule">The associated validation rule.</param>
            <param name="comments">The comment.</param>
            <returns>The newly created DismissedValidationRule object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.DismissedValidationRuleCollection.Remove(Microsoft.AnalysisServices.DismissedValidationRule)">
            <summary>
            Remove the DismissedValidationRule item from the collection.
            </summary>
            <param name="item">The DismissedValidationRule to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.DismissedValidationResultCollection">
            <summary>
            Represents a collection of DismissedValidationResult objects.
            </summary>
        </member>
        <member name="P:Microsoft.AnalysisServices.DismissedValidationResultCollection.Count">
            <summary>
            Gets the number of validation result objects in the collection.
            </summary>
            <value>The number of validation result objects in the collection.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.DismissedValidationResultCollection.Add(Microsoft.AnalysisServices.ValidationResult,System.String)">
            <summary>
            Appends the specified validation result of the collection.
            </summary>
            <param name="validationResult">The validation result to add. </param>
            <param name="comments">The comments associated with the validation result. </param>
            <returns>The newly added validation result.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.DismissedValidationResultCollection.Remove(Microsoft.AnalysisServices.DismissedValidationResult)">
            <summary>
            Removes the specified validation result object.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="T:Microsoft.AnalysisServices.ConfigurationOptionStrings">
            <summary>
            The configuration settings (per AnalysisServicesProject configuration) as defined in the spec
            "Project Properties and Configurations - AS Project.doc"
            </summary>
        </member>
        <member name="T:Microsoft.AnalysisServices.RoleMember">
            <summary>
            A Role is a collection of one or more domain users or groups. RoleMember is an individual user/group in the role.
            </summary>
            <!-- WARNING: if you change the base class, update the 'CopyTo', 'Clone' and 'ICloneable.Clone' methods. -->
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMember.#ctor">
            <summary>
            Initializes a new instance of the RoleMember class using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMember.#ctor(System.String)">
            <summary>
            Initializes a new instance of RoleMember using the specified name.
            </summary>
            <param name="name">A String that contains the name of the RoleMember.</param>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMember.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RoleMember using the specified name and security identifier.
            </summary>
            <param name="name">A String that contains the name of the RoleMember.</param>
            <param name="sid">A String with the security identifier.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.RoleMember.Name">
            <summary>
            Gets or sets the name of a RoleMember object.
            </summary>
            <value>A String with the name.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.RoleMember.Sid">
            <summary>
            Gets or sets the security identifier for a RoleMember object.
            </summary>
            <value>A String with the security identifier.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMember.CopyTo(Microsoft.AnalysisServices.RoleMember)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.RoleMember.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.ExternalRoleMember">
            <summary>
            A Role is a collection of one or more domain users or groups. ExternalRoleMember is an individual user/group in the role coming from an external identity provider.
            </summary>
            <!-- WARNING: if you change the base class, update the 'CopyTo', 'Clone' and 'ICloneable.Clone' methods. -->
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMember.#ctor">
            <summary>
            Initializes a new instance of the ExternalRoleMember class using default values.
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMember.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ExternalRoleMember class using the specified identity provider, identifier, and name.
            </summary>
            <param name="identityProvider">The identity provider.</param>
            <param name="id">The member's identifier.</param>
            <param name="name">The member's name.</param>
        </member>
        <member name="P:Microsoft.AnalysisServices.ExternalRoleMember.IdentityProvider">
            <summary>
            Gets or sets the itentity provider associated with the member.
            </summary>
            <value>A String with the identitiy provider.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ExternalRoleMember.ID">
            <summary>
            Gets or sets the ID of the member.
            </summary>
            <value>A String with the identifier.</value>
        </member>
        <member name="P:Microsoft.AnalysisServices.ExternalRoleMember.Name">
            <summary>
            Gets or sets the name of the member.
            </summary>
            <value>A String with the name.</value>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMember.CopyTo(Microsoft.AnalysisServices.ExternalRoleMember)">
            <summary>
            Copies the content of this object to another object (the destination).
            </summary>
            <param name="obj">The destination object to copy to.</param>
            <returns>The destination object.</returns>
        </member>
        <member name="M:Microsoft.AnalysisServices.ExternalRoleMember.Clone">
            <summary>
            Returns a clone of the object.
            </summary>
            <returns>The clone.</returns>
        </member>
    </members>
</doc>
